<?xml version="1.0" ?><interfacedef loc="56:/home/linn/Local/tinyos-2.x/tos/interfaces/Receive.nc" nicename="tos.interfaces.Receive" qname="Receive">
      <documentation loc="34:/home/linn/Local/tinyos-2.x/tos/types/TinyError.h">
        <short>
 </short>
        <long>
 @author Phil Levis
 @author David Gay
 Revision:  $Revision: 1.12 $

 Defines global error codes for error_t in TinyOS.
</long>
      </documentation>
      <function event="" loc="78:/home/linn/Local/tinyos-2.x/tos/interfaces/Receive.nc" name="receive" provided="0" ref="0x408aaa48">
        <documentation loc="58:/home/linn/Local/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>
 Receive a packet buffer, returning a buffer for the signaling
 component to use for the next reception.</short>
          <long>
 Receive a packet buffer, returning a buffer for the signaling
 component to use for the next reception. The return value
 can be the same as &lt;tt&gt;msg&lt;/tt&gt;, as long as the handling
 component copies out the data it needs.

 &lt;b&gt;Note&lt;/b&gt; that misuse of this interface is one of the most
 common bugs in TinyOS code. For example, if a component both calls a
 send on the passed message and returns it, then it is possible
 the buffer will be reused before the send occurs, overwriting
 the component's data. This would cause the mote to possibly
 instead send a packet it most recently received.

 @param  'message_t* ONE msg'        the receied packet
 @param  'void* COUNT(len) payload'  a pointer to the packet's payload
 @param  len      the length of the data region pointed to by payload
 @return 'message_t* ONE'              a packet buffer for the stack to use for the next
                  received packet.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.interfaces.Receive" qname="Receive"/>
        <type-function alignment="I:1" size="I:1">
          <type-pointer alignment="I:2" size="I:2">
            <type-tag alignment="I:1" size="I:52"><nx_struct-ref name="message_t" ref="0x408b0430"/>
              <typename><typedef-ref name="message_t" ref="0x408af1e8"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer alignment="I:2" size="I:2">
              <type-tag alignment="I:1" size="I:52"><nx_struct-ref name="message_t" ref="0x408b0430"/>
                <typename><typedef-ref name="message_t" ref="0x408af1e8"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer alignment="I:2" size="I:2">
              <type-void alignment="I:1" size="I:1"/>
            </type-pointer>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x40212dc8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="78:/home/linn/Local/tinyos-2.x/tos/interfaces/Receive.nc" name="msg" ref="0x408aa500">
            <type-pointer alignment="I:2" size="I:2">
              <type-tag alignment="I:1" size="I:52"><nx_struct-ref name="message_t" ref="0x408b0430"/>
                <typename><typedef-ref name="message_t" ref="0x408af1e8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable loc="78:/home/linn/Local/tinyos-2.x/tos/interfaces/Receive.nc" name="payload" ref="0x408aa6e0">
            <type-pointer alignment="I:2" size="I:2">
              <type-void alignment="I:1" size="I:1"/>
            </type-pointer>
          </variable>
          <variable loc="78:/home/linn/Local/tinyos-2.x/tos/interfaces/Receive.nc" name="len" ref="0x408aa8c0">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x40212dc8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>