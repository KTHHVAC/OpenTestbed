% locked out from the system
if( any( strcmp( who, 'tTCPConnection' ) ) )
	%
	fclose( tTCPConnection.tTcpIpClient );
	%
end;%

close all;
clear all;
clear classes;
clc;
 
%Todo
%		- Change the thermal bounds based on the occupancy;

% to get the updated models
addpath(genpath('Models/'));

% % to get CPLEX path
addpath(genpath('/Users/giorgiopattarello/Applications/IBM/ILOG/CPLEX_Studio1251/cplex/'))
% addpath(genpath('C:/Program Files/IBM/ILOG/CPLEX_Studio125/cplex'));

% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConnection.*;
import Scenarios.*;

%% Connection
%
tTCPConnectionParameters			= InternetConnection.LoadDefaultTCPConnectionParameters();
tTCPConnection						= InternetConnection.KTHConnection( tTCPConnectionParameters );
%
%
%% Deterministic
%
% % co2 controller
% tCO2ControllerParameters			= Controller.LoadDeterministicCO2MPCParameters();
% tCO2Controller						= Controller.DeterministicCO2MPC( tCO2ControllerParameters );
% 
% % temperature controller
% tTemperatureControllerParameters	= Controller.LoadDeterministicTemperatureMPCParameters();
% tTemperatureController				= Controller.DeterministicTemperatureMPC( tTemperatureControllerParameters );
% 
% tCO2Controller.AcquireMeasurements( tTCPConnection );
% tCO2Controller.AcquireForecasts( tTCPConnection );
% tCO2Controller.ComputeControlInputs();
% 
% tTemperatureController.afLowerBoundForTheVentilation = tCO2Controller.afRequestedMassFlowOverPredictionHorizon;
% 
% % temperature controller
% tTemperatureController.AcquireMeasurements( tTCPConnection );
% tTemperatureController.AcquireForecasts( tTCPConnection );
% tTemperatureController.ComputeControlInputs();
% 
% tTemperatureController.SetLinearModelMatrices();

%% Stochastic
%
% % co2 controller
tCO2ControllerParameters			= Controller.LoadStochasticCO2MPCParameters();
tCO2Controller						= Controller.StochasticCO2MPC( tCO2ControllerParameters );
%
% % temperature controller
tTemperatureControllerParameters	= Controller.LoadStochasticTemperatureMPCParameters();
tTemperatureController				= Controller.StochasticTemperatureMPC( tTemperatureControllerParameters );
%
tCO2Controller.AcquireMeasurements( tTCPConnection );
tCO2Controller.AcquireForecasts( tTCPConnection );
%tCO2Controller.ComputeControlInputs();
%
tTemperatureController.AcquireMeasurements( tTCPConnection );
tTemperatureController.AcquireForecasts( tTCPConnection );
% tTemperatureController.ComputeControlInputs();


