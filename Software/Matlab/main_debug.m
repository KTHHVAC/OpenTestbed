% locked out from the system
% if( any( strcmp( who, 'tTCPConnection' ) ) )
% 	%
% 	fclose( tTCPConnection.tTcpIpClient );
% 	%
% end;%

close all;
clear all;
clear classes;
clc;
 
%Todo
%		- Change the thermal bounds based on the occupancy;

% to get the updated models
addpath(genpath('Models/'));

% % to get CPLEX path
addpath(genpath('/Users/giorgiopattarello/Applications/IBM/ILOG/CPLEX_Studio1251/cplex/'))
% addpath(genpath('C:/Program Files/IBM/ILOG/CPLEX_Studio125/cplex'));

% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConnection.*;
import Scenarios.*;

%
% % load the parameters	
tCO2ControllerParameters			= Controller.LoadDeterministicCO2MPCParameters();  
tTCPConnectionParameters			= InternetConnection.LoadDefaultTCPConnectionParameters();
% %
% % allocate the TCP connection and the controller
% tTCPConnection					= InternetConnection.KTHConnection( tTCPConnectionParameters );
% tPIController					= Controller.PIController( tControllerParameters );
% %
% bUseTimer = false;
% %
% %
% if ~bUseTimer
% 	%
% 	tPIController.OnStart();
% 	tPIController.Run( tTCPConnection , tControllerParameters );
% 	tPIController.OnExitNoTCPClose();
% 	%
% else%
% 	%
% 	tControllerDebugTimer = timer(																				...
% 		'TimerFcn',			{@Controller.Run,		tPIController, tTCPConnection , tControllerParameters},		...
% 		'ErrorFcn',			{@Controller.OnError,			tPIController},										...
% 		'StartFcn',			{@Controller.OnStart,			tPIController},										...
% 		'StopFcn',			{@Controller.OnExitNoTCPClose,	tPIController},										...
% 		'Period',			tPIController.fSamplingTimeInSeconds,												...
% 		'TasksToExecute',	tPIController.iNumberOfRunsToBeExecuted,											...
% 		'ExecutionMode',	'fixedRate',																		...
% 		'BusyMode',			'drop'														);
% 	% 
% 	start( tControllerDebugTimer );
% 	disp('ControlTimer Started');
% 	%
% 	%Experiment is done -> We close the connection
% 	%
% end %
% %
% %
% % fclose( tTCPConnection.tTcpIpClient );
% % %
% % %always delete timers before exiting!
% % %
% % delete(tControllerDebugTimer);
%%
tTCPConnection					= InternetConnection.KTHConnection( tTCPConnectionParameters );
%
tCO2Controller		= Controller.DeterministicCO2MPC( tCO2ControllerParameters );
tCO2Controller.ComputeControlInputs();
%
if( tCO2Controller.bPrintDebugInformation )
	%
	fprintf('Controller %s: entering Run()\n', tCO2Controller.strControllerID);
	%
end;%
%
tCO2Controller.AcquireMeasurements( tTCPConnection );
tCO2Controller.AcquireForecasts( tTCPConnection );
tCO2Controller.ComputeControlInputs( );
% tController.Actuate( tTCPConnection );
%
if( tCO2Controller.bPrintDebugInformation )
	%
	fprintf('Controller %s: exiting Run()\n\n', tCO2Controller.strControllerID);
	%
end;%
%
%
% tCO2Controller.SetLinearModelMatrices();
% tDebugController.SetConstraints( tControllerParameters );
% tDebugController.SetCostParameters();
% tDebugController.SetInitialConditions();
% tDebugController.SetDisturbancesVector();
% %
% [	tDebugController.tModel.aafAA ,							...
% 	tDebugController.tModel.aafAB ,							...
% 	tDebugController.tModel.aafAE ,							...
% 	tDebugController.tModel.aafCC ]							...
% 		= tDebugController.BuildModelEvolutionMatrices(	...
% 				tDebugController.tModel.aafA,			...
% 				tDebugController.tModel.aafB,			...
% 				tDebugController.tModel.aafE,			...
% 				tDebugController.tModel.aafC,			...
% 				5										);
% %										
% tDebugController.BuildConstraintsEvolutionMatrices( [	tDebugController.tActuationBounds.afActuationLowerBounds;		...
% 														tDebugController.tActuationBounds.afActuationUpperBounds	],	...
% 													[	tDebugController.tComfortBounds.afComfortLowerBounds;			...
% 														tDebugController.tComfortBounds.afComfortUpperBounds		],	...
% 														5															);
% %
% [aafLeftSideOptimizationProblem, afRightSideOptimizationProblem ] = tDebugController.GetInequalityLeftAndRightSides();
% %
% [ aafCostMatrixC , aafCostMatrixQ ] = tDebugController.BuildCostEvolutionMatrices(					...
% 												tDebugController.afLinearCostFunctionMatrix',		...
% 												tDebugController.aafQuadraticCostFunctionMatrix,	...
% 												5													);
% [	afOptimizationProblemSolution,								...
% 	fCostFunctionOptimalValue,									...
% 	iSolverStatus					]							...
% 		= tDebugController.SolveOptimizationProblem(			...
% 			aafCostMatrixC,										...
% 			aafCostMatrixQ,										...
% 			aafLeftSideOptimizationProblem,						...
% 			afRightSideOptimizationProblem		);





