% locked out from the system
% if( any( strcmp( who, 'tTCPConnection' ) ) )
% 	%
% 	fclose( tTCPConnection.tTcpIpClient );
% 	%
% end;%

close all;
clear all;
clear classes;
clc;
 
%Todo
%		- Change the thermal bounds based on the occupancy;

% to get the updated models
addpath(genpath('Models/'));

% % to get CPLEX path
addpath(genpath('/Users/giorgiopattarello/Applications/IBM/ILOG/CPLEX_Studio1251/cplex/'))
% addpath(genpath('C:/Program Files/IBM/ILOG/CPLEX_Studio125/cplex'));

% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConnection.*;
import Scenarios.*;

%
% % load the parameters	
% tControllerParameters			= Controller.LoadPIControllerParameters();  
% tTCPConnectionParameters		= InternetConnection.LoadDefaultTCPConnectionParameters();
% %
% % allocate the TCP connection and the controller
% tTCPConnection					= InternetConnection.KTHConnection( tTCPConnectionParameters );
% tPIController					= Controller.PIController( tControllerParameters );
% %
% bUseTimer = false;
% %
% %
% if ~bUseTimer
% 	%
% 	tPIController.OnStart();
% 	tPIController.Run( tTCPConnection , tControllerParameters );
% 	tPIController.OnExitNoTCPClose();
% 	%
% else%
% 	%
% 	tControllerDebugTimer = timer(																				...
% 		'TimerFcn',			{@Controller.Run,		tPIController, tTCPConnection , tControllerParameters},		...
% 		'ErrorFcn',			{@Controller.OnError,			tPIController},										...
% 		'StartFcn',			{@Controller.OnStart,			tPIController},										...
% 		'StopFcn',			{@Controller.OnExitNoTCPClose,	tPIController},										...
% 		'Period',			tPIController.fSamplingTimeInSeconds,												...
% 		'TasksToExecute',	tPIController.iNumberOfRunsToBeExecuted,											...
% 		'ExecutionMode',	'fixedRate',																		...
% 		'BusyMode',			'drop'														);
% 	% 
% 	start( tControllerDebugTimer );
% 	disp('ControlTimer Started');
% 	%
% 	%Experiment is done -> We close the connection
% 	%
% end %
% %
% %
% % fclose( tTCPConnection.tTcpIpClient );
% % %
% % %always delete timers before exiting!
% % %
% % delete(tControllerDebugTimer);


c=[1 2 3 4]';
H=2*eye(4);
LeftSideConstraints		=	[	1 2 3 4	;	...
								1 4 4 1	;	...
								7 4 7 1	;	...
								1 2 0 5 ];
							
RightSideConstraints	=	[	1	;	...
								2	;	...
								5	;	...
								5	];

% [a b c]= cplexqp([], c, LeftSideConstraints, RightSideConstraints)

[a b c ]= Controller.AbstractMPC.SolveOptimizationProblem( c,[], LeftSideConstraints, RightSideConstraints)


