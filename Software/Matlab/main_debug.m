% locked out from the system
if( any( strcmp( who, 'tTCPConnection' ) ) )
	%
	fclose( tTCPConnection.tTcpIpClient );
	%
end;%

close all;
clear all;
clear classes;
clc;
 
%Todo
%		- Change the thermal bounds based on the occupancy;

% to get the updated models
addpath(genpath('Models/'));

% % to get CPLEX path
addpath(genpath('/Users/giorgiopattarello/Applications/IBM/ILOG/CPLEX_Studio1251/cplex/'))
% addpath(genpath('C:/Program Files/IBM/ILOG/CPLEX_Studio125/cplex'));

% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConnection.*;
import Scenarios.*;

%
% % load the parameters	
% tCO2ControllerParameters			= Controller.LoadDeterministicCO2MPCParameters();  

% %
% % allocate the TCP connection and the controller
% tTCPConnection					= InternetConnection.KTHConnection( tTCPConnectionParameters );
% tPIController					= Controller.PIController( tControllerParameters );
% %
% bUseTimer = false;
% %
% %
% if ~bUseTimer
% 	%
% 	tPIController.OnStart();
% 	tPIController.Run( tTCPConnection , tControllerParameters );
% 	tPIController.OnExitNoTCPClose();
% 	%
% else%
% 	%
% 	tControllerDebugTimer = timer(																				...
% 		'TimerFcn',			{@Controller.Run,		tPIController, tTCPConnection , tControllerParameters},		...
% 		'ErrorFcn',			{@Controller.OnError,			tPIController},										...
% 		'StartFcn',			{@Controller.OnStart,			tPIController},										...
% 		'StopFcn',			{@Controller.OnExitNoTCPClose,	tPIController},										...
% 		'Period',			tPIController.fSamplingTimeInSeconds,												...
% 		'TasksToExecute',	tPIController.iNumberOfRunsToBeExecuted,											...
% 		'ExecutionMode',	'fixedRate',																		...
% 		'BusyMode',			'drop'														);
% 	% 
% 	start( tControllerDebugTimer );
% 	disp('ControlTimer Started');
% 	%
% 	%Experiment is done -> We close the connection
% 	%
% end %
% %
% %
% % fclose( tTCPConnection.tTcpIpClient );
% % %
% % %always delete timers before exiting!
% % %
% % delete(tControllerDebugTimer);
%%
%


% connection
tTCPConnectionParameters			= InternetConnection.LoadDefaultTCPConnectionParameters();
tTCPConnection						= InternetConnection.KTHConnection( tTCPConnectionParameters );
%
%
% co2 controller
tCO2ControllerParameters			= Controller.LoadDeterministicCO2MPCParameters();
tCO2Controller						= Controller.DeterministicCO2MPC( tCO2ControllerParameters );
%
%
tCO2Controller.AcquireMeasurements( tTCPConnection );
tCO2Controller.AcquireForecasts( tTCPConnection );
tCO2Controller.ComputeControlInputs();


% % temperature controller
% tTemperatureControllerParameters			= Controller.LoadDeterministicTemperatureMPCParameters();
% tTemperatureController						= Controller.DeterministicTemperatureMPC( tTemperatureControllerParameters );
% %
% %
% tTemperatureController.AcquireMeasurements( tTCPConnection );
% tTemperatureController.AcquireForecasts( tTCPConnection );
% tTemperatureController.ComputeControlInputs();






