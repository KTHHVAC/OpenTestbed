% % locked out from the system
% if( any( strcmp( who, 'tTCPConnection' ) ) )
% 	%
% 	fclose( tTCPConnection.tTcpIpClient );
% 	%
% end;%

close all;
clear all;
clear classes;
clc;
 
% to get the updated models
addpath(genpath('Models/'));

% to get CPLEX path
% addpath(genpath('/Users/giorgiopattarello/Applications/IBM/ILOG/CPLEX_Studio1251/cplex/'))
addpath(genpath('C:/Program Files/IBM/ILOG/CPLEX_Studio125/cplex'));

% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConnection.*;
import Scenarios.*;

% select if to use the true testbed or not
bUseVirtualTestbed = true;
%
if( bUseVirtualTestbed )
	%
	% connection
	tTCPConnection	= InternetConnection.VirtualConnection();
	%
	% controllers parameters
	tCO2ControllerParameters				= Controller.LoadVirtualDeterministicCO2MPCParameters();
	tTemperatureControllerParameters		= Controller.LoadVirtualDeterministicTemperatureMPCParameters();
	tAirConditionedPIControllerParameters	= Controller.LoadVirtualAirConditionedPIControllerParameters();
	%
else%
	%
	% connection
	tTCPConnectionParameters			= InternetConnection.LoadDefaultTCPConnectionParameters();
	tTCPConnection						= InternetConnection.KTHConnection( tTCPConnectionParameters );
	%
	% controllers parameters
	tCO2ControllerParameters				= Controller.LoadDeterministicCO2MPCParameters();
	tTemperatureControllerParameters		= Controller.LoadDeterministicTemperatureMPCParameters();
	tAirConditionedPIControllerParameters	= Controller.LoadAirConditionedPIControllerParameters();  
	%
end;%

% allocate the controllers
tCO2Controller				= Controller.DeterministicCO2MPC( tCO2ControllerParameters );
tTemperatureController		= Controller.DeterministicTemperatureMPC( tTemperatureControllerParameters );
tAirConditionedPIController	= Controller.AirConditionedPIController( tAirConditionedPIControllerParameters );

% TODO: implement the OnError() OnStart() etc.....
tControllerDebugMainTimer = timer(																									...
	'TimerFcn',			{@Controller.Run,	tCO2Controller, tTemperatureController , tAirConditionedPIController, tTCPConnection },	...
	'ErrorFcn',			{@Controller.OnError,				{ tCO2Controller, tTemperatureController } },														...
	'StartFcn',			{@Controller.OnStart,				{ tCO2Controller, tTemperatureController } },														...
	'StopFcn',			{@Controller.OnExitNoTCPClose,		{ tCO2Controller, tTemperatureController } },														...
	'Period',			tCO2Controller.fSamplingTimeInSeconds,																		...
	'TasksToExecute',	tCO2Controller.iNumberOfRunsToBeExecuted,																	...
	'ExecutionMode',	'fixedRate',																								...
	'BusyMode',			'drop'																										);

% allocate the timer for the low level control loop
tPIControlLoopDebugTimer = timer(																			...
	'TimerFcn',			{@Controller.RunPI,				  tAirConditionedPIController, tTCPConnection },	...
	'ErrorFcn',			{@Controller.OnError,			{ tAirConditionedPIController } },					...
	'StartFcn',			{@Controller.OnStart,			{ tAirConditionedPIController } },					...
	'StopFcn',			{@Controller.OnExitNoTCPClose,	{ tAirConditionedPIController } },					...
	'Period',			tAirConditionedPIController.fSamplingTimeInSeconds,									...
	'TasksToExecute',	tAirConditionedPIController.iNumberOfRunsToBeExecuted,								...
	'ExecutionMode',	'fixedRate',																		...
	'BusyMode',			'drop'																				);

start( tPIControlLoopDebugTimer );
start( tControllerDebugMainTimer );
disp('ControlTimer Started');

pause(8);
delete(tControllerDebugMainTimer);
delete(tPIControlLoopDebugTimer);

% %
% % fclose( tTCPConnection.tTcpIpClient );
% % %
% % %always delete timers before exiting!
% % %
% % delete(tControllerDebugTimer);delete(tPIControlLoopDebugTimer);




			