function ComputeIncidentRadiationsOnJulianDate(	...
			tWall,								...
			fCurrentJulianDate,					...
			fCurrentExtraterrestialRadiation,	...
			fCurrentC1,							...
			fCurrentC2							);
	%
	% for readability
	RAD_2_DEG				= 360 / (2 * pi);
	DEG_2_RAD				= (2 * pi) / 360;
	GROUND_REFLECTIVITY		= 0.1; % [adim.]
	fCurrentDay				= Time.JulianDateToDayOfYear( fCurrentJulianDate );
	fCurrentHour			= Time.JulianDateToHour( fCurrentJulianDate );
	%
	%
	%
	fCurrentSunDeclinationInRadiants =					...
			23.4										...
	   	*	sin( 2 * pi * (284 + fCurrentDay) / 365 )	...
	   	*	DEG_2_RAD;
	%
	% Time equation "e" variable [rad]
	w = 2 * pi * fCurrentDay / 365;
	%
	% Time equation [degrees]
	e = (								...
				0.42 * cos(w)			...
			-	3.23 * cos(2 * w)		...
			-	0.09 * cos(3 * w)		...
			-	7.35 * sin(w)			...
			-	9.39 * sin(2 * w)		...
			-	0.34 * sin(3 * w)		...
		)								...
		/								...
		60;
	%
	fCurrentSunAngleInRadiants =															...
		(																					...
				15.00 * ( fCurrentHour - 12)												...
			-	 0.25 * ( e - 4 * ( tWall.fLongitudeInDegrees - tWall.fTimeZone * 15 ) )	...
		)																					...
		*																					...
		DEG_2_RAD;
	%
	fCurrentBetaInRadiants =										...
		asin														...
		(															...
			(														...
					cos(fCurrentSunAngleInRadiants)					...
				*	cos(fCurrentSunDeclinationInRadiants)			...
				*	cos(tWall.fLatitudeInDegrees * DEG_2_RAD)		...
			)														...
			+														...
			(														...
					sin(fCurrentSunDeclinationInRadiants)			...
				*	sin(tWall.fLatitudeInDegrees * DEG_2_RAD)		...
			)														...
		);
	%
	fCurrentPhiInRadiants =											...
		acos														...
		(															...
			(														...
						sin(fCurrentSunDeclinationInRadiants)		...
					*	cos(tWall.fLatitudeInDegrees * DEG_2_RAD)	...
				-													...
						cos(fCurrentSunAngleInRadiants)				...
					*	cos(fCurrentSunDeclinationInRadiants)		...
					*	sin(tWall.fLatitudeInDegrees * DEG_2_RAD)	...
			)														...
			/														...
			cos(fCurrentBetaInRadiants)								...
		);
	%
	% correct the previous value in case of TODO
	if( fCurrentSunAngleInRadiants > 0 )
		%
		fCurrentPhiInRadiants = 2 * pi - fCurrentPhiInRadiants;
		%
	end;%
	%
	fCurrentGammaInRadiants = abs( fCurrentPhiInRadiants - tWall.fAzimuthInDegrees * DEG_2_RAD );
	%
	fIncidenceAngleInRadiants =								...
		acos												...
		(													...
			(												...
					cos(fCurrentBetaInRadiants)				...
				*	cos(fCurrentGammaInRadiants)			...
				*	sin(tWall.fTiltInDegrees * DEG_2_RAD)	...
			)												...
			+												...
			(												...
					sin(fCurrentBetaInRadiants)				...
				*	cos(tWall.fTiltInDegrees * DEG_2_RAD)	...
			)												...
		);
	%
	fDirectRadiationIncidentOnNormalToSunRays =				...
			fCurrentExtraterrestialRadiation				...
		/	exp( fCurrentC1 / sin(fCurrentBetaInRadiants) );
	%
	tWall.fIncidentDirectRadiation =					...
			fDirectRadiationIncidentOnNormalToSunRays	...
		*	cos( fIncidenceAngleInRadiants )			...
		*	( fCurrentBetaInRadiants > 0 )				... if beta < 0 the sun is behind the horizon => no direct radiation
		*	( fIncidenceAngleInRadiants <= 90 );		... if the incidence angle is greater than 90 degrees then the sun rays are behind the surface
	%
	tWall.fIncidentDiffuseRadiation =									...
			fDirectRadiationIncidentOnNormalToSunRays					...
		*	(   ( 1 + cos(tWall.fTiltInDegrees * DEG_2_RAD) ) / 2   )	...
		*	fCurrentC2													...
		*	(fCurrentBetaInRadiants > 0);				...	if beta < 0 the sun is behind the horizon => no diffuse radiation
	%
	tWall.fIncidentReflectedRadiation =									...
			fDirectRadiationIncidentOnNormalToSunRays					...
	   	*	GROUND_REFLECTIVITY											...
		*	(   ( 1 - cos(tWall.fTiltInDegrees * DEG_2_RAD) ) / 2   )	...
		*	( sin(fCurrentBetaInRadiants) + fCurrentC2 )				...
		*	(fCurrentBetaInRadiants > 0);				...	if beta < 0 the sun is behind the horizon => no diffuse radiation
	%
	tWall.fIncidentRadiation = 					...
			tWall.fIncidentDirectRadiation		...
		+	tWall.fIncidentDiffuseRadiation		...
		+	tWall.fIncidentReflectedRadiation;
	%
end % function

