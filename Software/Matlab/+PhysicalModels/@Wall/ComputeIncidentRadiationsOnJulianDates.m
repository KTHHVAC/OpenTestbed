function [	afIncidentDirectRadiations,					... % [ W / m2 ]
			afIncidentDiffuseRadiations,				...	% [ W / m2 ]
			afIncidentReflectedRadiations,				...	% [ W / m2 ]
			afTotalIncidentRadiations		] =			...	% [ W / m2 ]
				ComputeIncidentRadiationsOnJulianDates(	...
					tWall,								...
					afCurrentJulianDates,				...
					afCurrentExtraterrestialRadiations,	...
					afCurrentC1s,						...
					afCurrentC2s						)
	%
	if( tWall.bIsShadowed )
		%
		afIncidentDirectRadiations		= 0;
		afIncidentDiffuseRadiations		= 0;
		afIncidentReflectedRadiations	= 0;
		afTotalIncidentRadiations		= 0;
		return;
		%
	end;%
	%
	%
	% work with columns
	afCurrentJulianDates				= reshape(afCurrentJulianDates, numel(afCurrentJulianDates), 1);
	afCurrentExtraterrestialRadiations	= reshape(afCurrentExtraterrestialRadiations, numel(afCurrentExtraterrestialRadiations), 1);
	afCurrentC1s						= reshape(afCurrentC1s, numel(afCurrentC1s), 1);
	afCurrentC2s						= reshape(afCurrentC2s, numel(afCurrentC2s), 1);
	%
	%
	% for readability
	RAD_2_DEG				= 360 / (2 * pi);
	DEG_2_RAD				= (2 * pi) / 360;
	GROUND_REFLECTIVITY		= 0.1; % [adim.]
	afCurrentDays			= Time.JulianDateToDayOfYear( afCurrentJulianDates );
	afCurrentHours			= Time.JulianDateToHour( afCurrentJulianDates );
	%
	%
	afCurrentSunDeclinationsInRadiants =				...
			23.4										...
	   	*	sin( 2 * pi * (284 + afCurrentDays) / 365 )	...
	   	*	DEG_2_RAD;
	%
	%
	% Time equation [degrees]
	afWs = 2 * pi * afCurrentDays / 365;
	afEs = (							...
				0.42 * cos(    afWs)	...
			-	3.23 * cos(2 * afWs)	...
			-	0.09 * cos(3 * afWs)	...
			-	7.35 * sin(    afWs)	...
			-	9.39 * sin(2 * afWs)	...
			-	0.34 * sin(3 * afWs)	...
		)								...
		/								...
		60;
	%
	% TODO manage the legal time
	afCurrentSunAnglesInRadiants =																	...
		(																							...
				15.00 * ( afCurrentHours - 12)														...
			-	 0.25 * ( afEs - 4 * ( tWall.fLongitudeInDegrees - tWall.fTimeZoneInHours * 15 ) )	...
		)																							...
		*																							...
		DEG_2_RAD;
	%
	afCurrentBetasInRadiants =										...
		asin														...
		(															...
			(														...
					cos(afCurrentSunAnglesInRadiants)				...
				.*	cos(afCurrentSunDeclinationsInRadiants)			...
				.*	cos(tWall.fLatitudeInDegrees * DEG_2_RAD)		...
			)														...
			+														...
			(														...
					sin(afCurrentSunDeclinationsInRadiants)			...
				.*	sin(tWall.fLatitudeInDegrees * DEG_2_RAD)		...
			)														...
		);
	%
	afCurrentPhisInRadiants =										...
		acos														...
		(															...
			(														...
						sin(afCurrentSunDeclinationsInRadiants)		...
					.*	cos(tWall.fLatitudeInDegrees * DEG_2_RAD)	...
				-													...
						cos(afCurrentSunAnglesInRadiants)			...
					.*	cos(afCurrentSunDeclinationsInRadiants)		...
					.*	sin(tWall.fLatitudeInDegrees * DEG_2_RAD)	...
			)														...
			./														...
			cos(afCurrentBetasInRadiants)							...
		);
	%
	% correct the previous value in case of TODO
	if( afCurrentSunAnglesInRadiants > 0 )
		%
		afCurrentPhisInRadiants = 2 * pi - afCurrentPhisInRadiants;
		%
	end;%
	%
	afCurrentGammasInRadiants = abs( afCurrentPhisInRadiants - tWall.fAzimuthInDegrees * DEG_2_RAD );
	%
	afIncidenceAnglesInRadiants =							...
		acos												...
		(													...
			(												...
					cos(afCurrentBetasInRadiants)			...
				.*	cos(afCurrentGammasInRadiants)			...
				.*	sin(tWall.fTiltInDegrees * DEG_2_RAD)	...
			)												...
			+												...
			(												...
					sin(afCurrentBetasInRadiants)			...
				.*	cos(tWall.fTiltInDegrees * DEG_2_RAD)	...
			)												...
		);
	%
	afDirectRadiationsIncidentOnNormalToSunRays =				...
			afCurrentExtraterrestialRadiations					...
		./	exp( afCurrentC1s ./ sin(afCurrentBetasInRadiants) );
	%
	afIncidentDirectRadiations =						...
			afDirectRadiationsIncidentOnNormalToSunRays	...
		.*	cos( afIncidenceAnglesInRadiants )			...
		.*	( afCurrentBetasInRadiants > 0 )			... if beta < 0 the sun is behind the horizon => no direct radiation
		.*	( afIncidenceAnglesInRadiants <= 90 );		... if the incidence angle is greater than 90 degrees then the sun rays are behind the surface
	%
	afIncidentDiffuseRadiations =										...
			afDirectRadiationsIncidentOnNormalToSunRays					...
		.*	(   ( 1 + cos(tWall.fTiltInDegrees * DEG_2_RAD) ) / 2   )	...
		.*	afCurrentC2s												...
		.*	(afCurrentBetasInRadiants > 0);								...	if beta < 0 the sun is behind the horizon => no diffuse radiation
	%
	afIncidentReflectedRadiations =										...
			afDirectRadiationsIncidentOnNormalToSunRays					...
	   	.*	GROUND_REFLECTIVITY											...
		.*	(   ( 1 - cos(tWall.fTiltInDegrees * DEG_2_RAD) ) / 2   )	...
		.*	( sin(afCurrentBetasInRadiants) + afCurrentC2s )			...
		.*	(afCurrentBetasInRadiants > 0);								...	if beta < 0 the sun is behind the horizon => no diffuse radiation
	%
	afTotalIncidentRadiations = 			...
			afIncidentDirectRadiations		...
		+	afIncidentDiffuseRadiations		...
		+	afIncidentReflectedRadiations;
	%
	%
	% DEBUG
	if( sum( isnan(afTotalIncidentRadiations) ) )
		%
		afCurrentBetasInRadiants(isnan(afTotalIncidentRadiations))
		%
	end;%
	%
end % function

