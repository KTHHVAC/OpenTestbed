clc;
clear all;
close all;
import PhysicalModels.*;

fLatitudeInDegrees		= 50;
fLongitudeInDegrees		= 30;
fTimeZoneInHours		= 0;

 

% construct the main object
tEnvelope =															...
	PhysicalModels.ZoneEnvelope(									...
		40,															... fAzimuthInDegreesOfFirstWall
		fLatitudeInDegrees, fLongitudeInDegrees, fTimeZoneInHours,	...
		[ false, true, true, true ],								... abAreWallsShadowed
		true														);% bIsRoofShadowed


% test for a whole year
afJulianDates = Time.GetCurrentJulianYear():Time.GetJulianHour():(Time.GetCurrentJulianYear() + 365 * Time.GetJulianDay());


% get the auxiliary signals
[	afExtraterrestialRadiations,									...
	afC1s,															...
	afC2s						] =									...
		PhysicalModels.GetAuxiliarySignalsForComputingRadiations(	...
			afJulianDates											);


% compute the radiations
[	afIncidentDirectRadiations,								... % [ W / m2 ]
	afIncidentDiffuseRadiations,							...	% [ W / m2 ]
	afIncidentReflectedRadiations,							...	% [ W / m2 ]
	afTotalIncidentRadiations		] =						...	% [ W / m2 ]
		tEnvelope.ComputeIncidentRadiationsOnJulianDates(	...
			afJulianDates,									...
			afExtraterrestialRadiations,					...
			afC1s,											...
			afC2s											);


% save them
tRadiationSignal = Signal();
tRadiationSignal.Insert( afTotalIncidentRadiations, afJulianDates );
tRadiationSignal.Plot();

