
addpath '../'

% parameters
strOriginalFilePath						= '@IDAICEInterfacer/LispFiles/ida_lisp.ida';
strResultsFilePath						= 'ida_lisp_new.ida';
%
iNumberOfSamplesPerSignalPerDay			= 10;
bConsiderSignalsAsPiecewiseConstant		= true;
iNumberOfDays							= 1;
fOccupancyVariationsIntensity			= 60; % in minutes
%
% tOccupancySignal						= IDAICEInterfacer.GenerateRandomOccupancySignal(	...
% 	fOccupancyVariationsIntensity,															...
% 	iNumberOfDays,																			...
% 	Time.GregorianDateToJulianDate( 2014, 11, 27, 0, 0, 0)									);

% tOccupancySignal					= Signal.ImportFromFormattedTxt(		...
% 	'@IDAICEInterfacer/SignalsInTxt/occupancy_levels.txt',					...
% 	bConsiderSignalsAsPiecewiseConstant										);
%
tMainVentilationSignal				= Signal.ImportFromFormattedTxt(		...
	'@IDAICEInterfacer/SignalsInTxt/main_ventilation_levels.txt',			...
	bConsiderSignalsAsPiecewiseConstant										);
%
% tLocalVentilationSignal			= Signal.ImportFromFormattedTxt(		...
% 	'@IDAICEInterfacer/SignalsInTxt/local_ventilation_levels.txt',			...
% 	bConsiderSignalsAsPiecewiseConstant										);

cstrOccupancyModuleName					= {'Schedule_3'};
cstrOccupancyModuleName2				= {'Schedule_2'};
cstrMainVentilationLevelsModuleName		= {'Sched_AHU'};
cstrLocalVentilationLevelsModuleName	= {'Schedule_1'};

ExtractSignalsFromDataset;



% DEBUG
%
[ fInitialJulianDate, fFinalJulianDate ] = Signal.GetTimeSpan( [tOccupancySignal, tLocalVentilationSignal, tMainVentilationSignal], 'min' );
fprintf('Intersection of the signals: from - to:\n');
Time.JulianDateToString(fInitialJulianDate)
Time.JulianDateToString(fFinalJulianDate)
%
% tOccupancySignal.Plot();
% tMainVentilationLevelsSignal.Plot();
% tLocalVentilationLevelsSignal.Plot();


% format the information in a convenient way
atSignals				=	[												...
								tOccupancySignal,							...
								tOccupancySignal,							...
								tMainVentilationSignal,						...
								tLocalVentilationSignal,					...
							];
abAreSignalsPiecewiseConstant	=	[										...
								bConsiderSignalsAsPiecewiseConstant,		...
								bConsiderSignalsAsPiecewiseConstant,		...
								bConsiderSignalsAsPiecewiseConstant,		...
								bConsiderSignalsAsPiecewiseConstant,		...
							];
acstrModulesNames		=	[												...
								cstrOccupancyModuleName,					...
								cstrOccupancyModuleName2,					...
								cstrMainVentilationLevelsModuleName,		...
								cstrLocalVentilationLevelsModuleName,		...
							];


% write the lisp file
IDAICEInterfacer.GenerateLispFileFromTemplate(	...
	strOriginalFilePath,						...
	strResultsFilePath,							...
	atSignals,									...
	abAreSignalsPiecewiseConstant,				...
	acstrModulesNames,							...
	iNumberOfSamplesPerSignalPerDay				);


% DEBUG
fprintf('Lisp file generated successfully.\n');

