addpath '../'

% parameters
strOriginalFilePath						= '@IDAICEInterfacer/LispFiles/ida_lisp.ida';
strResultsFilePath						= 'ida_lisp_new.ida';
%
bConsiderSignalsAsPiecewiseConstant		= true;
% iNumberOfDays							= 1;
% fOccupancyVariationsIntensity			= 60; % in minutes
%
% tOccupancySignal						= IDAICEInterfacer.GenerateRandomOccupancySignal(	...
% 	fOccupancyVariationsIntensity,															...
% 	iNumberOfDays,																			...
% 	Time.GregorianDateToJulianDate( 2014, 11, 27, 0, 0, 0)									);

tOccupancySignal						= Signal.ImportFromFormattedTxt(	...
...	'@IDAICEInterfacer/SignalsInTxt/occupancy_levels.txt',					...
...	'@IDAICEInterfacer/SignalsInTxt/occupancy.txt',					...
	bConsiderSignalsAsPiecewiseConstant										);
%
tMainVentilationSignal				= Signal.ImportFromFormattedTxt(		...
	'@IDAICEInterfacer/SignalsInTxt/main_ventilation_levels.txt',			...
	bConsiderSignalsAsPiecewiseConstant										);
%
tLocalVentilationSignal			= Signal.ImportFromFormattedTxt(			...
	'@IDAICEInterfacer/SignalsInTxt/local_ventilation_levels.txt',			...
	bConsiderSignalsAsPiecewiseConstant										);

% ExtractSignalsFromDataset; 

% DEBUG
% tOccupancySignal.Plot();
% tMainVentilationSignal.Plot();
% tLocalVentilationSignal.Plot();


% assign the modules a name
cstrOccupancyModuleName					= {'Schedule_3'};
cstrOccupancyModuleName2				= {'Schedule_2'};
cstrMainVentilationLevelsModuleName		= {'Sched_AHU'};
cstrLocalVentilationLevelsModuleName	= {'Schedule_1'};


% format the information in a convenient way
atSignals				=	[												...
								tOccupancySignal,							...
								tOccupancySignal,							...
								tMainVentilationSignal,						...
								tLocalVentilationSignal,					...
							];
abAreSignalsPiecewiseConstant	=	[										...
								bConsiderSignalsAsPiecewiseConstant,		...
								bConsiderSignalsAsPiecewiseConstant,		...
								bConsiderSignalsAsPiecewiseConstant,		...
								bConsiderSignalsAsPiecewiseConstant,		...
							];
acstrModulesNames		=	[												...
								cstrOccupancyModuleName,					...
								cstrOccupancyModuleName2,					...
								cstrMainVentilationLevelsModuleName,		...
								cstrLocalVentilationLevelsModuleName,		...
							];
                        
IDAICEInterfacer.GenerateLispFileFromTemplate(	...
	strOriginalFilePath,						...
	strResultsFilePath,							...
	atSignals,									...
	abAreSignalsPiecewiseConstant,				...
	acstrModulesNames							);


% DEBUG
fprintf('Lisp file generated successfully.\n');

