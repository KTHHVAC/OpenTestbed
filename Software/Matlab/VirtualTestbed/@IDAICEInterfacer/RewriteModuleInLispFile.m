% The method first retrieves the useful information from the tSignal,
% and then rewrites each piece of information separatedly
% through the method RewriteSubmoduleInLispFile()
%
function RewriteModuleInLispFile(		...
			strFilepath,				...
			tSignal,					...
			bIsSignalPiecewiseConstant,	...
		   	cstrModuleName,				...
			iNumberOfSamplesPerDay		)
	%
	% DEBUG
	fprintf( 'starting rewriting module %s\n', cstrModuleName{1} );
	%
	% get the information to be put in the module from the tSignal structure
	[	iNumberOfDays,									...
		iNumberOfSamplesPerDay,							...
		iPeriodStart,									...
		iPeriodEnd,										...
		afTimes,										...
		afValues,										...
		aiDays,											...
		aiMonths,										...
		aiYears					] = 					...
			IDAICEInterfacer.GetInformationFromSignal(	...
				tSignal,								...
				iNumberOfSamplesPerDay,					...
				bIsSignalPiecewiseConstant				);
	%
	% read the original file
	acFile = regexp( fileread(strFilepath), '\n', 'split');
	%
	%
	% rewrite the various modules in the file -- every time re-compute
	% the start and end indexes of the module so that there is no
	% problem of 'dynamically growing' files
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      N '},				iModuleStartIndex, iModuleEndIndex, iNumberOfDays + 1,		true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      LEN '},			iModuleStartIndex, iModuleEndIndex, iNumberOfSamplesPerDay,	true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      PERIOD_START '},	iModuleStartIndex, iModuleEndIndex, iPeriodStart,			true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      PERIOD_END '},	iModuleStartIndex, iModuleEndIndex, iPeriodEnd,				true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      TIME_COL '},		iModuleStartIndex, iModuleEndIndex, afTimes,			false );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      VALUE_COL '},		iModuleStartIndex, iModuleEndIndex, afValues,			false );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      END_DAY '},		iModuleStartIndex, iModuleEndIndex, aiDays,					true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      START_DAY '},		iModuleStartIndex, iModuleEndIndex, aiDays,					true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      END_MONTH '},		iModuleStartIndex, iModuleEndIndex, aiMonths,				true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      START_MONTH '},	iModuleStartIndex, iModuleEndIndex, aiMonths,				true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      END_YEAR '},		iModuleStartIndex, iModuleEndIndex, aiYears,				true );
	%
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      START_YEAR '},	iModuleStartIndex, iModuleEndIndex, aiYears,				true );
	%
	% rewrite the WD_CODEs only if they are there 
	[ iModuleStartIndex, iModuleEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, cstrModuleName );
	[ iSignalStartIndex, iSignalEndIndex ] = IDAICEInterfacer.FindStartAndEndIndexesOfSubmodule( acFile, {'      WD_CODE '}, iModuleStartIndex, iModuleEndIndex);
	%
	if( iSignalStartIndex ~= -1  &&  iSignalEndIndex ~= -1 )
		%
		% generate the WD codes
		aiWDCode = ones( (iNumberOfDays + 1) * 7, 1 );
		%
		% write the corresponding submodule
		acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'      WD_CODE '},	iModuleStartIndex, iModuleEndIndex, aiWDCode,		true );
        %
	end;%
	%
	% rewrite the file
	hFile = fopen(strFilepath, 'w');
	fprintf(hFile, '%s\n', acFile{:});
	fclose(hFile);
	%
	% DEBUG
	fprintf( 'finished rewriting module %s\n', cstrModuleName{1} );
	%
end % function

