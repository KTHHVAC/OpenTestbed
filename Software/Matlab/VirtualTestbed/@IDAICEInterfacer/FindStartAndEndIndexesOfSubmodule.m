function [	iStartIndex,							...
			iEndIndex		] =						...
				FindStartAndEndIndexesOfSubmodule(	...
					acFile,							...
					cstrSubmoduleName,				...
					iModuleStartIndex,				...
					iModuleEndIndex					)
	%
	% find the start index
	iStartIndex = -1;
	%
	% understand how long the searched string is
	iNumberOfCharsInSignalName = numel( cstrSubmoduleName{1} );
	%
	% cycle on the various strings
	for iRow = iModuleStartIndex:iModuleEndIndex
		%
		% compare only
		if( numel( acFile{iRow} ) >= iNumberOfCharsInSignalName )
			%
			if( strcmp( acFile{iRow}(1:iNumberOfCharsInSignalName), cstrSubmoduleName{1} ) )
				%
				iStartIndex = iRow;
				break;
				%
			end;%
			%
		end;%
		%
	end;%
	%
	% DEBUG
% 	fprintf('submodule starts at row %d\n', iStartIndex );
	%
	% find the end index ...
	iEndIndex = -1;
	%
	% ... only if one got the starting one
	if( iStartIndex ~= -1 )
		%
		% check if we are already at the end of the module -- in case skip the rest
		if( iStartIndex == iModuleEndIndex - 1 )
			%
			iEndIndex = iStartIndex;
			return;
			%
		else%
			%
			% if instead there are other rows below the start, check the first that
			% starts with a non-numerical character
			for iRow = (iStartIndex+1):(iModuleEndIndex-1)
				%
				strTrailedRow = strtrim( acFile{iRow} );
				%
				% remove the trailing spaces and get the first character
				if( iscell(strTrailedRow) )
					%
					cFirstCharacter = strTrailedRow{1}(1);
					%
				else%
					%
					cFirstCharacter = strTrailedRow(1);
					%
				end;%
				%
				% check if the first character is an alphabetic character...
				if( isstrprop( cFirstCharacter , 'alpha' ) )
					%
					iEndIndex = iRow - 1;
					return;
					%
				end;%
				%
				% check also if we are at the end of the module
				if( iRow == (iModuleEndIndex - 1 ) )
					%
					iEndIndex = iRow;
					%
				end;%
				%
			end;%
			%
		end;%
		%
		% if we arrived here then we have a bug :)
		if( iEndIndex == -1 )
			%
			warning('there must be a bug in FindStartAndEndIndexesOfSignal.m :)');
			%
		end;%
		%
	end;%
	%
end % function

