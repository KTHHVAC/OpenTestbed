function RewriteIntegrationTimes(					...
			strFilepath,							...
			fInitialJulianDate,						...
			fFinalJulianDate						)
	%
	% DEBUG
	fprintf( 'starting rewriting the integration times\n' );
	%
	fPreintegrationJulianDate = fInitialJulianDate - Time.GetJulianDay();
	%
	iPreintegrationYear		= Time.JulianDateToYear( fPreintegrationJulianDate );
	iPreintegrationMonth	= Time.JulianDateToMonth( fPreintegrationJulianDate );
	iPreintegrationDay		= Time.JulianDateToDayOfMonth( fPreintegrationJulianDate );
	%
	iInitialYear			= Time.JulianDateToYear( fInitialJulianDate );
	iInitialMonth			= Time.JulianDateToMonth( fInitialJulianDate );
	iInitialDay				= Time.JulianDateToDayOfMonth( fInitialJulianDate );
	%
	iFinalYear				= Time.JulianDateToYear( fFinalJulianDate );
	iFinalMonth				= Time.JulianDateToMonth( fFinalJulianDate );
	iFinalDay				= Time.JulianDateToDayOfMonth( fFinalJulianDate );
	%
	aiFromValuesForPreintegration	= [ iPreintegrationYear, iPreintegrationMonth, iPreintegrationDay, 0 ];
	aiToValuesForPreintegration		= [ iPreintegrationYear, iPreintegrationMonth, iPreintegrationDay, 24 ];
	aiFromValuesForIntegration		= [ iInitialYear, iInitialMonth, iInitialDay, 0 ];
	aiToValuesForIntegration		= [ iFinalYear, iFinalMonth, iFinalDay, 24 ];
	%
	%
	% read the original file
	acFile = regexp( fileread(strFilepath), '\n', 'split');
	%
	% get the preintegration module indexes
	[ iPreintegrationModuleStartIndex, iPreintegrationModuleEndIndex ] =	...
		IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, {'INTEGRATION'}, false, 1 );
	%
	% write the info for the preintegration module
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'  FROM '},	iPreintegrationModuleStartIndex, iPreintegrationModuleEndIndex, aiFromValuesForPreintegration,	true );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'  TO '},	iPreintegrationModuleStartIndex, iPreintegrationModuleEndIndex, aiToValuesForPreintegration,    true );
	%
	% get the integration module indexes
	[ iIntegrationModuleStartIndex, iIntegrationModuleEndIndex ] =	...
		IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, {'INTEGRATION'}, false, iPreintegrationModuleStartIndex + 1 );
	%
	% write the info for the integration module
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'  FROM '},	iIntegrationModuleStartIndex, iIntegrationModuleEndIndex, aiFromValuesForIntegration,	true );
	acFile = IDAICEInterfacer.RewriteSubmoduleInLispFile( acFile, {'  TO '},	iIntegrationModuleStartIndex, iIntegrationModuleEndIndex, aiToValuesForIntegration,		true );
	%
	% rewrite the file
	hFile = fopen(strFilepath, 'w');
	fprintf(hFile, '%s\n', acFile{:});
	fclose(hFile);
	%
	% DEBUG
    
    fprintf( ['Start startup hour:      ',num2str(aiFromValuesForPreintegration),'\n']);
    fprintf( ['End startup hour:        ',num2str(aiToValuesForPreintegration ),'\n']);
   
    fprintf( ['Start integration hour:  ',num2str(aiFromValuesForIntegration),'\n']);
    fprintf( ['End integration hour:    ',num2str(aiToValuesForIntegration),'\n']);
    
	fprintf( 'finished rewriting the integration times\n' );
	%
end %

