function tOccupancySignal = GenerateRandomOccupancySignal( fPoissonProcessRateInMinutes, iNumberOfDays )
	%
	% allocate the signal
	tDevicesIDs			= Signal.GetDevicesIDs();
	tSignalsIDs			= Signal.GetSignalsIDs();
	tOccupancySignal	= Signal();
	tOccupancySignal.Set( tDevicesIDs.iUserDefinedDevice, tSignalsIDs.iOccupancy );
% 	tOccupancySignal.bPrintDebugInformation = true;
	%
	% set the current time as today at 00:00 and the end time as now + the requested number of days
	fCurrentTime		= Time.GetCurrentJulianDay();
	fEndingTime			= fCurrentTime + iNumberOfDays * Time.GetJulianDay();
	%
	% start from a null occupancy
	fCurrentOccupancy	= 0;
	%
	% insert the first value
	tOccupancySignal.InsertAsPiecewiseConstant( fCurrentOccupancy, fCurrentTime );
	%
	% up to the moment that the ending time is not reached add samples
	while( fCurrentTime < fEndingTime )
		%
		% get the new time
		fCurrentTime = fCurrentTime + exprnd(fPoissonProcessRateInMinutes) * Time.GetJulianMinute();
		%
		% get the new occupancy level
		fCurrentOccupancy = max( fCurrentOccupancy + randi([-1 1], 1), 0 );
		%
		% insert the current value
		tOccupancySignal.InsertAsPiecewiseConstant( fCurrentOccupancy, fCurrentTime );
		%
	end;%
	%
end % function

