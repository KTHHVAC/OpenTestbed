function [	iNumberOfDays,					...
			iNumberOfSamplesPerDay,			...
			iPeriodStart,					...
			iPeriodEnd,						...
			afTimes,						...
			afValues,						...
			aiDays,							...
			aiMonths,						...
			aiYears					] = 	...
				GetInformationFromSignal(	...
					tSignal,				...
					iNumberOfSamplesPerDay	)
	%
	% resample the signal so to find the midnights in a meaningful way
	afResamplingTimes = tSignal.afTimes(1):(5 * Time.GetJulianMinute()):tSignal.afTimes(end);
	tSignal = tSignal.ResampleAt( afResamplingTimes );
	%
	% truncate to full days
	iNumberOfDays = tSignal.GetNumberOfFullDays();
	tSignal.TruncateToFullDays();
	%
	% resample the signal so to have iNumberOfSamplesPerDay per day
	afResamplingTimes = linspace( tSignal.afTimes(1), tSignal.afTimes(end), iNumberOfSamplesPerDay * iNumberOfDays );
	tSignal = tSignal.ResampleAt( afResamplingTimes );
	%
	% get the various information
	strPeriodStart	= Time.JulianDateToString_YYYYMMDD( tSignal.afTimes(1) ){1};
	strPeriodEnd	= Time.JulianDateToString_YYYYMMDD( tSignal.afTimes(end) ){1};
	strPeriodStart(end-3:end)	= '0101';
	strPeriodEnd(end-3:end)		= '1231';
	iPeriodStart	= str2num(strPeriodStart);
	iPeriodEnd		= str2num(strPeriodEnd);
	aiYears			= [Time.JulianDateToYear( tSignal.afTimes(1:iNumberOfSamplesPerDay:end) ); -1];
	aiMonths		= [Time.JulianDateToMonth( tSignal.afTimes(1:iNumberOfSamplesPerDay:end) ); -1];
	aiDays			= [Time.JulianDateToDayOfMonth( tSignal.afTimes(1:iNumberOfSamplesPerDay:end) ); -1];
	%
	% get the samples
	afValues		= [ tSignal.afValues; zeros( iNumberOfSamplesPerDay, 1 ) ];
	afHours			= Time.JulianDateToMinuteOfDay( tSignal.afTimes ) ./ 60;
	afTimes			= [ afHours; 0; 24 * ones( iNumberOfSamplesPerDay - 1, 1 ) ];
	%
end % function

