% The method copies the template into a new file, and then 
% rewrites each module by calling RewriteModuleInLispFile()
%
function GenerateLispFileFromTemplate(					...
			strTemplateFilePath,						...
			strResultsFilePath,							...
			atSignals,									...
			abAreSignalsPiecewiseConstant,				...
			acstrModulesNames							)
	%
	% preprocessing on the data
	for iSignal = 1:numel( atSignals )
		%
		% extend the signal to full days
		atSignals(iSignal).ExtendToFullDays();
		%
		% find the time span in number of days
		iNumberOfDays = atSignals(iSignal).GetNumberOfFullDays();
		%
		% insert values at midnights
		afMidnights = linspace(atSignals(iSignal).afTimes(1), atSignals(iSignal).afTimes(end), iNumberOfDays + 1);
		atSignals(iSignal).Insert( NaN * ones( size(afMidnights) ), afMidnights );
		atSignals(iSignal).InterpolateInvalidData();
		%
	end;%
	%
	% compute the intersection of the time spans of the various signals
	[ fInitialJulianDate, fFinalJulianDate ] = Signal.GetTimeSpan( atSignals, 'min' );
	%
	% compute the time granularity and the maximum number of samples per signal per day
	fTimeGranularityForIDALogFiles	= 9999999999999999;
	iNumberOfSamplesPerSignalPerDay	= 1;
	%
	for iSignal = 1:numel( atSignals )
		%
		fTimeGranularityForIDALogFiles =					...
			min(	fTimeGranularityForIDALogFiles,			...
					atSignals(iSignal).GetTimeGranularity() );
		%
		iNumberOfSamplesPerSignalPerDay	=									...
			max(	iNumberOfSamplesPerSignalPerDay,						...
					atSignals(iSignal).GetNumberOfSamplesPerDay( 'max' )	);
		%
	end;%
	%
	%
	% DEBUG
	fprintf( 'IDA Log files time granularity [s]:   %f \n', fTimeGranularityForIDALogFiles / Time.GetJulianSecond() );
	fprintf( 'Number of samples per signal per day: %d \n', iNumberOfSamplesPerSignalPerDay );
	%
	% do the rest of the computations only if it is meaningful to
	if( fInitialJulianDate >= fFinalJulianDate )
		%
		warning(' Lisp file not generated!! The intersection of the time spans of the various signals is empty ');
		return;
		%
	end;%
	%
	% make a copy of the original file
	copyfile(strTemplateFilePath, strResultsFilePath);
	%
	% write the out times 
	IDAICEInterfacer.RewriteOutTimes(			...
		strResultsFilePath,						...
		fInitialJulianDate,						...
		fFinalJulianDate,						...
		fTimeGranularityForIDALogFiles			);
	%
	% write the integration times 
	IDAICEInterfacer.RewriteIntegrationTimes(	...
		strResultsFilePath,						...
		fInitialJulianDate,						...
		fFinalJulianDate						);
	%
	% write the various signals on the copied file
	for iSignal = 1:numel(atSignals)
		%
		IDAICEInterfacer.RewriteModuleInLispFile(	...
			strResultsFilePath,						...
			atSignals(iSignal),						...
			abAreSignalsPiecewiseConstant(iSignal),	...
			acstrModulesNames(iSignal),				...
			iNumberOfSamplesPerSignalPerDay			);
		%
	end;%
	%
end % function

