% algorithm:
% 
% - every time one encounters a 'OUT_TIMES' then substitute the next row with the necessary information
%
function RewriteOutTimes(							...
			strFilepath,							...
			fInitialJulianDate,						...
			fFinalJulianDate,						...
			fRequestedTimeGranularityForIDALogFiles	)
	%
	% DEBUG
	fprintf( 'starting rewriting the OUT_TIMES\n' );
	%
	fInitialDateInMinutesFromTheBeginningOfYear	= Time.JulianDateToHourOfYear( fInitialJulianDate );
	fFinalDateInMinutesFromTheBeginningOfYear	= Time.JulianDateToHourOfYear( fFinalJulianDate );
	%
	% read the original file
	acFile = regexp( fileread(strFilepath), '\n', 'split');
	%
	% put some fake indexes just to start
	iModuleStartIndex	= 1;
	iModuleEndIndex		= 1;
	%
	% cycle on the various places where there is the OUT_TIMES
	while(  iModuleStartIndex ~= -1 && iModuleEndIndex ~= -1  )
		%
		[ iModuleStartIndex, iModuleEndIndex ] =	...
			IDAICEInterfacer.FindStartAndEndIndexesOfModule( acFile, {'    OUT_TIMES'}, false, iModuleStartIndex + 1 );
		%
		% if one enters here it means that there is an other module
		if(  iModuleStartIndex ~= -1 && iModuleEndIndex ~= -1  )
			%
			acFile{iModuleStartIndex + 1} =								...
				sprintf('    %.2f %.2f %.2f',							...
						fInitialDateInMinutesFromTheBeginningOfYear,	...
						fFinalDateInMinutesFromTheBeginningOfYear,		...
						fRequestedTimeGranularityForIDALogFiles			);
			%
		end;%
		%
	end;%
	%
	% rewrite the file
	hFile = fopen(strFilepath, 'w');
	fprintf(hFile, '%s\n', acFile{:});
	fclose(hFile);
	%
	% DEBUG
%     fprintf( ['Start display hour: ',num2str(fInitialDateInMinutesFromTheBeginningOfYear),'\n']);
%     fprintf( ['End display hour: ',num2str(fFinalDateInMinutesFromTheBeginningOfYear),'\n']);

	fprintf( 'finished rewriting the OUT_TIMES\n' );
	%
end % function

