% ASHRAE Model
% Version 2.8, 22-08-13
% Code written and adapted by Marco Molinari
%
% The code is based on the ASHRAE model for radiation. The program
% calculates first the position of the sun (sun azimuth "phi" and 
% solar height "beta") given the location coordinates (latitude "lat",
% longitude "long" and time zone "timeZone"). The precision of the
% calculation can be set by means of the variable hourRes, i.e. the number
% of salculation samples per hour. The user can set the initial day and 
% the last day for the simulation, for a maximum time span of 1 year. 
%   
% Secondly, the progam calculates the angle between sun rays and normal to
% the surface. The surface orientation is determined by psi wall azimuth (angle between 
% north and wall normal) and alpha (tilt angle, angle between normal to 
% surface and normal to horizontal surface).
%
% The effects of the radiation on the surface are determined by summing up
% IDir, direct radiation on the surface, IDiff, diffuse radiation on the 
% surface, and IRefl, radiation reflected to the surface from the surroundings.
% 
% IDir, IDif and IRefl are derived from Rad_Dir, direct radiation on a
% surface perpendicular to the sun rays. Rad_Dir is read from a .txt file.
% The value C2 used to calculate IDif is interpolated from tabled values.


% what's new?
% V 2.2 - 
% 		- longitude effects added (time equation e)
%		- new title format
% V 2.3	- hourly resolution increased  
% V 2.4	- year simulation added
%		- constant values for radiation interpolated
% V 2.5 - data for radiation loaded from file: the data replaces the
%		values for radiation interpolated in V 2.4. Since radiation is sampled
%		once per hour, radiation input values are interpolated when higher 
%		resolution is required 
% V 2.6 - structure function
% V 2.7 - radiation debugged (C2 instead of C1 in Idif)
% V 2.8 - outputs printed as .txt file

% clc
% clear
% close all

function[IDir_v,IDif_v,IRefl_v,ITot_v,day,hour,InitDay,LastDay] ...
										= RadiationProcessor(startDay,...
															startMonth,...
															endDay,...
															endMonth,...
															lat,...
															long,...
															timeZone,...
															alpha,...		% tilt angle, angle between normal to surface 
																			...and normal to horizontal surface		
															psi,...			% wall azimuth (angle between north and wall normal)
															hourRes);

switch startMonth
    case 1
		InitDay	= startDay;
    case 2
	    InitDay	= 31+startDay;
    case 3
	    InitDay	= 59+startDay;
    case 4
	    InitDay	= 90+startDay;
    case 5
	    InitDay	= 120+startDay;
    case 6
		InitDay	= 151+startDay;
    case 7
    	InitDay	= 181+startDay;
    case 8
	    InitDay	= 212+startDay;
    case 9
	    InitDay	= 243+startDay;
    case 10
	    InitDay	= 273+startDay;
    case 11
	    InitDay	= 304+startDay;
    case 12
    	InitDay	= 334+startDay;
	otherwise
		error('Wrong input')
end;

switch endMonth
    case 1
    	LastDay	= endDay;
    case 2
	    LastDay	= 31+endDay;
    case 3
	    LastDay	= 59+endDay;
    case 4
	    LastDay	= 90+endDay;
    case 5
	    LastDay	= 120+endDay;
    case 6
		LastDay	= 151+endDay;
    case 7
    	LastDay	= 181+endDay;
    case 8
	    LastDay	= 212+endDay;
    case 9
	    LastDay	= 243+endDay;
    case 10
	    LastDay	= 273+endDay;
    case 11
	    LastDay	= 304+endDay;
    case 12
    	LastDay	= 334+endDay;   
	otherwise
		error('Wrong input')
end;
%%		% Define constants for radiation
	day_21	= [21 52 80 111 141 172 202 233 264 294 325 355]';								% Days used for the assessment of the constants ET,B and C
	ET		= [1396 1384 1364 1341 1321 1310 1311 1324 1345 1367 1388 1398]';				% Extra-terrestial radiation, calculated for the 21st day of the month...
																							% Not used in this version of the program
	B		= [0.142 0.144 0.156 0.180 0.196 0.205 0.207 0.201 0.177 0.16 0.149 0.142]';	% Not used in this version of the program
	C		= [0.058 0.06 0.071 0.097 0.121 0.134 0.136 0.122 0.092 0.073 0.063 0.057]';	% Coefficient used for the calculation of C2
%%		% Get input data for radiation from file

[Time_File,Temp_Out,RH,WDir,WSpeed,Rad_Dir,Rad_Diff]=...
								textread('BROMMA.txt','%f %f %f %f %f %f %f');				% Import climate data from file
		% Input data reshape
Time_File	= reshape(Time_File(1:8760,1),24,365);											% Sampling time in the climate data
Rad_Dir		= reshape(Rad_Dir(1:8760,1),24,365);											% Direct radiation on a surface perpendicular to sun rays
Rad_Diff	= reshape(Rad_Diff(1:8760,1),24,365);											% Diffuse radiation on a surface perpendicular to sun rays

test_h = 1:24;																				% Sampling time in 24 hours format
test_h_matrix = repmat(test_h',1,365);														% Sampling time, 24 hours, 365 days format

%%		% PARAMETERS
		% conversion parameters
rad2deg     = 360/(2*pi);																	% Conversion factor, radians to degrees
deg2rad     = (2*pi)/360;																	% Conversion factor, degrees to radians
rho_g		= 0.1;																			% Ground reflectivity used for IRefl, [-]
i			= 1;																			% Counter initialization 

for g = InitDay:LastDay
	
	ETrad	= interp1(day_21,ET,g);															% Extra-terrestrial radiation,not used in this version of the program [W/m2]
	C1		= interp1(day_21,B,g);															% Coefficient for assessing the variation of ETrad, not used in this version of the program
	C2		= interp1(day_21,C,g);															% Coefficient used to assess IDif

		% Daily values
declination		= 23.45*sin(2*pi*(284+g)/365);												% Sun declination, [deg]
declination_rad = declination*deg2rad;														% Sun declination, [rad]
w			= 2 * pi * g / 365;																% Time equation "e" variable [rad]
e			= (0.42 * cos(w) - 3.23 * cos(2 * w)- 0.09 * cos(3 * w)...
			-7.35 * sin(w)- 9.39 * sin(2 * w)- 0.34 * sin(3 * w))/60;						% Time equation, [degrees]

		% Hourly values
hour			= [1:1/hourRes:24]';														% Hour vector, [h]
hour_angle		= 15 .*(hour-12)-(0.25 .*(e - 4*(long-timeZone*15)));						% Hour angle, [deg] 
size_hour_angle = size(hour_angle);															% Help variable
		
sin_beta_rad	= cos(hour_angle*deg2rad).*...
				cos(declination_rad).*cos(lat*deg2rad)+...
				sin(declination_rad).*sin(lat*deg2rad);
beta_rad		= asin(sin_beta_rad);														% Solar elevation,[rad]
cos_phi			= (sin(declination_rad).*cos(lat*deg2rad)-...
				cos(hour_angle*deg2rad).*...
				cos(declination_rad).*sin(lat*deg2rad))...
				./cos(beta_rad);															% Solar azimuth cosinus

phi_rad			= (hour_angle<=0).*acos(cos_phi) +...
				(1-(hour_angle<=0)).*(2*pi-acos(cos_phi));									% Solar azimuth,[rad]
phi				= phi_rad*rad2deg;															% Solar azimuth,[deg]

gamma			= abs(phi_rad*rad2deg-psi);													% Wall solar azimuth, (angle measured in the horizontal plane between the projection of thh sun
																							% rays on the plane and the normal to the vertical surface ) [deg]
cos_theta		= cos(beta_rad).*cos(gamma*deg2rad).*sin(alpha*deg2rad)+ ...
				sin(beta_rad).*cos(alpha*deg2rad);
theta_rad		= acos(cos_theta);															% Incidence angle [rad]
theta			= theta_rad*rad2deg;														% Incidence angle [deg]

		% Radiation data interpolation
Rad_Dir_interp	= interp1(test_h_matrix(:,g),Rad_Dir(:,g),hour,'pchip');					% Direct radiation on a surface perpendicular to sun rays,[W,m2]
Rad_Diff_interp = interp1(test_h_matrix(:,g),Rad_Diff(:,g),hour,'pchip');					% Diffuse radiation on a surface perpendicular to sun rays,[W,m2] - not used in this version of the program

		% Direct radiation on the considered surface, [W/m2]
IDirN		= Rad_Dir_interp;						% Direct radiation on a surface perpendicular to sun rays,[W/m2]
IDir		= IDirN.*cos(theta_rad).*...			% expression
			(beta_rad*rad2deg > 0)...				% condition 1: if beta < 0 the sun is behind the horizon
			.*(theta<=90);							% condition 2:if theta > 90 then sun rays are behind the surface

		% Diffuse radiation on the considered surface, [W/m2]
IDif		= IDirN.*(1+cos(alpha*deg2rad))/2.*C2.*...
			(beta_rad*rad2deg > 0);					% condition 1: if beta < 0 the sun is behind the horizon

		% Reflected radiation on the considered surface, [W/m2]
IRefl	= IDirN.*rho_g.*((1-cos(alpha*deg2rad))/2)...
		.*(sin(beta_rad)+C2)...
		.*(beta_rad*rad2deg > 0);					% condition 1: if beta < 0 the sun is behind the horizon
		% Total radiation on the considered surface, [W/m2]
ITot	= IDir + IDif+ IRefl; 
		% Storage variables
day(i)																						= g;
day_v((i-1)*size_hour_angle(1,1)+1 : (i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= ones(size_hour_angle(1,1),1)*g;
hour_v((i-1)*size_hour_angle(1,1)+1 : (i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)	= hour;
hour_angle_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)= hour_angle;
beta_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= beta_rad*rad2deg;
phi_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= phi;
gamma_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= gamma;
theta_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= theta;
Rad_Dir_interp_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)	= Rad_Dir_interp;
Rad_Diff_interp_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)	= Rad_Diff_interp;
IDir_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= IDir; 
IDif_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= IDif;
IRefl_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= IRefl;
ITot_v((i-1)*size_hour_angle(1,1)+1:(i-1)*size_hour_angle(1,1)+size_hour_angle(1,1),1)		= ITot;
i = i +1;

end		

% Results			= [hour_v,hour_angle_v,beta_v,phi_v,gamma_v,theta_v];
% disp('     hour    hour_angle    beta     phi    gamma    theta      ');
% disp(Results);
% 
% Results			= [day_v,hour_v,IDir_v,IDif_v,IRefl_v,ITot_v];
% disp('    day      hour    IDir       IDif       IRefl       ITot');
% disp(Results);

size_day		= size(day');
size_hour		= size(hour);

IDir_v	= reshape(IDir_v,size_hour(1,1),size_day(1,1));
IDif_v	= reshape(IDif_v,size_hour(1,1),size_day(1,1));
IRefl_v	= reshape(IRefl_v,size_hour(1,1),size_day(1,1));
ITot_v	= reshape(ITot_v,size_hour(1,1),size_day(1,1));

end
