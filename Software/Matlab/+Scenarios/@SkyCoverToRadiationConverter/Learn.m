% algorithm
%
% - construct the bidimensional signal from the database
% - solve the regularization problem
%
function Learn(									...
			tConverter,							...
			strSkyCoverDatasetFilepath,			...
			strRadiationDatasetFilepath		)
	%
	% parameters settings
	strRegularizationKernelKind		= 'Laplacian';
	fRegularizationKernelScale		= 100;
	fRegularizationParameter		= 1;
	%
	%
	% ------------------------------------------------------
	% extract the signals
	fprintf('extracting the signals\n');
	tSkyCoverSignal				= tConverter.GetSkyCoverSignal(strSkyCoverDatasetFilepath);
	tMeasuredRadiationSignal	= tConverter.GetMeasuredRadiationSignal(strRadiationDatasetFilepath);
	%
	% find the intersection of the time spans of the two signals
	fInitialJulianDate	= max( tSkyCoverSignal.afTimes(1),		tMeasuredRadiationSignal.afTimes(1)		); 
	fFinalJulianDate	= min( tSkyCoverSignal.afTimes(end),	tMeasuredRadiationSignal.afTimes(end)	); 
	%
	% construct the julian dates of the resampled signals
	afJulianDates =		fInitialJulianDate												...
					:	tConverter.fSamplingPeriodInSeconds * Time.GetJulianSecond()	...
					:	fFinalJulianDate;
	%
	% get the maximal radiation signal
	tMaximalRadiationSignal	= tConverter.GetMaximalRadiationSignal( afJulianDates );
	%
	% extract the samples
	afSkyCoverSamples			= tSkyCoverSignal.ExtractSamplesAt( afJulianDates );
	afMaximalRadiationSamples	= tMaximalRadiationSignal.ExtractSamplesAt( afJulianDates );
	afMeasuredRadiationSamples	= tMeasuredRadiationSignal.ExtractSamplesAt( afJulianDates );
	%
	% learn the normalization factors
	tEmpiricalMap.fSkyCoverNormalizationFactor				= max(afSkyCoverSamples);
	tEmpiricalMap.fMeasuredRadiationNormalizationFactor		= max(afMeasuredRadiationSamples);
	tEmpiricalMap.fMaximalRadiationNormalizationFactor		= max(afMaximalRadiationSamples);
	%
	% normalize the data
	afSkyCoverSamples			= afSkyCoverSamples				./ tEmpiricalMap.fSkyCoverNormalizationFactor;
	afMeasuredRadiationSamples	= afMeasuredRadiationSamples	./ tEmpiricalMap.fMeasuredRadiationNormalizationFactor;
	afMaximalRadiationSamples	= afMaximalRadiationSamples		./ tEmpiricalMap.fMaximalRadiationNormalizationFactor;
	%
	% construct the bidimensional function
	tEmpiricalMap = BidimensionalSignal();
	tEmpiricalMap.Insert(				...
		afMeasuredRadiationSamples,		...
		afSkyCoverSamples,				...
		afMaximalRadiationSamples		);
	%
	%
	% ------------------------------------------------------
	% solve the regularization problem
	fprintf('solving the regularization problem\n');
	%
	tConverter.tRegularizedMap =								...
		EstimationAlgorithms.RegularizeBidimensionalSignal(		...
			tEmpiricalMap,										...
			@EstimationAlgorithms.EvaluateGaussianKernelAt,		...
			1,													...
			10													);
	%
	%
	% DEBUG
% 	tSkyCoverSignal.Plot();
% 	tMeasuredRadiationSignal.Plot();
% 	tMaximalRadiationSignal.Plot();
	tEmpiricalMap.Plot();
	tConverter.tRegularizedMap.Plot();
% 	Time.JulianDateToString( afJulianDates )
	%
end % function

