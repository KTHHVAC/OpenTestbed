% usage:
%
% aafScenarios =					...
% 	tGenerator.ExtractScenarios(	...
% 		fInitialJulianDate,			...
% 		iNumberOfScenarios,			...
% 		fInitialCondition			);% [optional]
%
% inputs:
%
% - fInitialJulianDate    needed to understand if the generation follows the
%                         pattern of the morning / afternoon / night, etc.
%
% - iNumberOfScenarios    how many scenarios one wants to be returned
%
% - fInitialCondition     OPTIONAL, if given it returns only scenarios that
%                         start with that given initial condition. If the
%                         marginals does not admit that initial condition (i.e.,
%                         that condition has never been seen when training the
%                         generator) then the scenarios returned will violate
%                         that initial condition
%
% - fToleranceOnIn.C.     OPTIONAL, if given it broadens the action of the
%                         previous initial condition, making it work as a set
%                         of values
%
% outputs:
%
% - aafScenarios          matrix, whose rows are scenarios. Thus the matrix has
%                         iNumberOfScenarios rows and a number of columns that
%                         depends on how the generator has been set at the
%                         beginning
%
function aafScenarios =							...
			ExtractScenarios(					...
				tGenerator,						...
				fInitialJulianDate,				... optional
				iNumberOfScenarios,				... optional
				fInitialCondition,				... optional
				fToleranceOnTheInitialCondition	) % optional
	%
	try %
		%
		if( tGenerator.bPrintDebugInformation )
			%
			fprintf('Entering ScenariosGenerator.ExtractScenarios()\n');
			%
		end;%
		%
		if( nargin == 1 )
			%
			fInitialJulianDate = Time.GetCurrentJulianDate();
			%
		end;%
		%
		iPeriod = tGenerator.JulianDateToPeriod( fInitialJulianDate );
		%
		switch( nargin )
			%
            case {1, 2}
				aafScenarios = tGenerator.atCopulas(iPeriod).Extract();
			%
            case 3
				aafScenarios = tGenerator.atCopulas(iPeriod).Extract(iNumberOfScenarios);
			%
            case 4
				aafScenarios = tGenerator.atCopulas(iPeriod).Extract(iNumberOfScenarios, fInitialCondition);
			%
            case 5
				aafScenarios = tGenerator.atCopulas(iPeriod).Extract(iNumberOfScenarios, fInitialCondition, fToleranceOnTheInitialCondition);
			%
			otherwise
				error('wrong number of parameters in ScenariosGenerator.ExtractScenarios()')
			%
		end;%
		%
		%
		if( tGenerator.bPrintDebugInformation )
			%
			fprintf('Exiting ScenariosGenerator.ExtractScenarios()\n');
			%
		end;%
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to extract the Scenarios in ScenariosGenerator.ExtractScenarios()');
		%
	end % try
	%
end % function

