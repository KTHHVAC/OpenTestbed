% algorithm: choose the 95% of the evaluations performed on the original samples
%
% inputs:
%
% - tCopula        object
% - fPercentile    number in [0, 1], optional
%
function LearnPDFEvaluationsNormalizationFactor( tCopula, fPercentile )
	%
	switch( nargin )
		%
		case 1
			fPercentile = 0.75;
		%
		case 2
			% signal potential mistakes
			if(  fPercentile < 0  ||  fPercentile > 1  )
				%
				error( 'the percentile must be in [0, 1]' );
				%
			end;%
		%
		otherwise
			error('wrong number of parameters');
		%
	end;%
	%
	% for readability
	iNumberOfSamples = numel( tCopula.aafOriginalSamples(:, 1) );
	%
	% initialization
	tCopula.fPDFEvaluationsNormalizationFactor = 0;
	%
	% storage allocation
	afEvaluations = zeros( iNumberOfSamples, 1 );
	%
	% cycle on the various scenarios -- remember that scenarios are by row
	for iSample = 1:iNumberOfSamples;
		%
		afEvaluations(iSample) = tCopula.EvaluatePDFAt( tCopula.aafOriginalSamples(iSample, :) );
		%
	end;%
	%
	% sort the evaluations (in ascending order)
	afSortedEvaluations = sort( afEvaluations );
	%
	% get the index of the chosen percentile
	iIndexOfChosenPercentile = max( 1, round( numel(afSortedEvaluations) * fPercentile ) );
	%
	% save the maximal evaluation
	tCopula.fPDFEvaluationsNormalizationFactor = afSortedEvaluations(iIndexOfChosenPercentile);
	%
	% DEBUG
	if( tCopula.bPrintDebugInformation )
		%
		fprintf('copula %d: just finished learning the PDF evaluations normalization factor (%.3f)\n', tCopula.iLabel, tCopula.fPDFEvaluationsNormalizationFactor);
		%
		% to prevent a bug
% 		if( min(afSortedEvaluations(1:iIndexOfChosenPercentile)) < max(afSortedEvaluations(1:iIndexOfChosenPercentile)) )
% 			%
% 			figure(tCopula.iLabel)
% 			hist(afSortedEvaluations(1:iIndexOfChosenPercentile));
% 			%
% 		end;%
		%
	end;%
	%
end %
