function Learn( tCopula )
	%
	if( tCopula.bPrintDebugInformation )
		%
		fprintf('Entering Copula.Learn()\n');
		%
	end;%
	%
	% learn (always) the marginal CDFs
	tCopula.LearnMarginalCDFs();
	%
	% learn the copula conditionally on what has been seen as original samples
	if( tCopula.OriginalSamplesAreAllEqual() )
		%
		% here just set the flag and skip all the rest
		tCopula.bOriginalSamplesAreAllEqual = true;
		%
	else%
		%
		% here set the flag and then proceed with the learning steps
		tCopula.bOriginalSamplesAreAllEqual = false;
		%
		% start with ranking the samples
		aafRankedSamples = tCopula.RankSamples( tCopula.aafOriginalSamples );
		%
		% then compute the copula
		tCopula.aafCopula = copulafit(tCopula.strCopulaFamily, aafRankedSamples);
		%
		% and perform some consistency checks
		switch( tCopula.strCopulaFamily )
			%
			case 'Gaussian'
				% in this case the copula is actually a correlation matrix, and
				% it must be symmetric and positive definite
				if( tCopula.aafCopula ~= tCopula.aafCopula' )
					%
					warning('copulafit() returned a non-symmetric correlation matrix. True scenario extracted.');
					%
				end;%
				%
				% check for PD-ness: use chol(), that is more computationally efficient
				% than checking the single eigenvalues
				[ aafCholeskyDecomposition, bIsTheArgumentNotPositiveDefinite ] =	...
					chol(tCopula.aafCopula);
				%
				if( bIsTheArgumentNotPositiveDefinite )
					%
					warning('copulafit() returned a non positive definite correlation matrix. Now we''ll fix it.');
					%
					tCopula.aafCopula = ...
						EstimationAlgorithms.MakeSymmetricMatrixPositiveDefinite( tCopula.aafCopula );
					%
					tCopula.aafCopula = ...
						EstimationAlgorithms.MakePositiveDefiniteMatrixACorrelationMatrix( tCopula.aafCopula );
					%
				end;%
				%
				[ aafCholeskyDecomposition, bIsTheArgumentNotPositiveDefinite ] =	...
					chol(tCopula.aafCopula);
				%
				if( bIsTheArgumentNotPositiveDefinite )
					%
					eig(tCopula.aafCopula)
					bIsTheArgumentNotPositiveDefinite
					error('Fixing did not work.');
					%
				end;%
			%
			otherwise
				error('wrong copula type');
			%
		end;% switch on the copula type
		%
		% learn the normalization factor
		tCopula.LearnPDFEvaluationsNormalizationFactor();
		%
		% compute the expected sample
		tCopula.ComputeExpectedSample();
		%
	end;%
	%
	% DEBUG
	if( tCopula.bPrintDebugInformation )
		%
		fprintf('copula %d: just finished the learning step\n', tCopula.iLabel);
		fprintf('Exiting Copula.Learn()\n');
		%
%		tCopula.aafCopula
		%
	end;%
	%
end %
