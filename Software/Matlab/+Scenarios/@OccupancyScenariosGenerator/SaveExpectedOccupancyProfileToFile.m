function SaveExpectedOccupancyProfileToFile( tGenerator, strFilepath )
	%
	% for readability
	tSignalsIDs			= Signal.GetSignalsIDs();
	tDevicesIDs			= Signal.GetDevicesIDs();
	%
	%
	% ----------------------------------------------------------------------
	% load the original realization as a signal
	tOriginalSignal		= Signal();
	tOriginalSignal.bPrintDebugInformation = true;
	tOriginalSignal.Set(	tDevicesIDs.iUserDefinedDevice,					...
							tSignalsIDs.iOccupancy,							...
							tGenerator.afOriginalRealizations,				...
							tGenerator.afOriginalRealizationsJulianDates	);
	%
	%
	% ----------------------------------------------------------------------
	% divide the original signal in weekly signals and sum the various weeks
	tOriginalSignal.TruncateToFullWeeks();
	iTotalNumberOfWeeks = tOriginalSignal.GetNumberOfFullWeeks();
	%
	% find the first week
	fStartingJDOfCurrentWeek	= tOriginalSignal.afTimes(1);
	fEndingJDOfCurrentWeek		= fStartingJDOfCurrentWeek + 7 * Time.GetJulianDay();
	%
	% initiate a 'zeroed' weekly signal
	tSumOfTheWeeks = tOriginalSignal.Copy();
	tSumOfTheWeeks.TruncateToPeriod( fStartingJDOfCurrentWeek, fEndingJDOfCurrentWeek );
	tSumOfTheWeeks.SetValuesBetweenJulianDates( 0, fStartingJDOfCurrentWeek, fEndingJDOfCurrentWeek );
	%
	% add to it each week
	for iWeek = 1:iTotalNumberOfWeeks;
		%
		% get the current week, and shift it to the origin of times
		tCurrentWeek = tOriginalSignal.Copy();
		tCurrentWeek.TruncateToPeriod( fStartingJDOfCurrentWeek, fEndingJDOfCurrentWeek );
		tCurrentWeek.SetInitialTimeAs( tOriginalSignal.afTimes(1) );
		%
		% add it to the sum
		tSumOfTheWeeks = tSumOfTheWeeks + tCurrentWeek;
		%
		% go to the next week
		fStartingJDOfCurrentWeek	= fStartingJDOfCurrentWeek + 7 * Time.GetJulianDay();
		fEndingJDOfCurrentWeek		= fStartingJDOfCurrentWeek + 7 * Time.GetJulianDay();
		%
		% DEBUG
% 		tCurrentWeek.Plot(); pause
% 		tSumOfTheWeeks.Plot(); pause
		%
	end;%
	%
	% normalize the result
	tSumOfTheWeeks = tSumOfTheWeeks / iTotalNumberOfWeeks;
	%
	%
	% ----------------------------------------------------------------------
	% create the resulting signal
	%
	% to do not have problems of wrapping around, we repeat the monday at the end
	% to do this, we take the first day and postpone it of 1 week
	tFirstDay = tSumOfTheWeeks.Copy();
	tFirstDay.TruncateToPeriod( tSumOfTheWeeks.afTimes(1), tSumOfTheWeeks.afTimes(1) + Time.GetJulianDay() );
	tFirstDay.SetInitialTimeAs( tSumOfTheWeeks.afTimes(1) + 7 * Time.GetJulianDay() );
	%
	tSumOfTheWeeks = tSumOfTheWeeks + tFirstDay;
	%
	% save the signal
	tSumOfTheWeeks.SaveToMatFile(strFilepath);
	%
	% DEBUG
	tSumOfTheWeeks.Plot();
	%
end % function

