function SaveExpectedOccupancyProfileToFile( tGenerator, strFilepath )
	%
	%
	% ----------------------------------------------------------------------
	% load the original realization as a signal
	%
	tSignalsIDs			= Signal.GetSignalsIDs();
	tDevicesIDs			= Signal.GetDevicesIDs();
	%
	tOriginalSignal		= Signal();
	tOriginalSignal.bPrintDebugInformation = true;
	tOriginalSignal.Set(	tDevicesIDs.iUserDefinedDevice,					...
							tSignalsIDs.iOccupancy,							...
							tGenerator.afOriginalRealizations,				...
							tGenerator.afOriginalRealizationsJulianDates	);
	%
	%
	% ----------------------------------------------------------------------
	% create the resulting signal
	%
	% we consider 8 days, so that we will not have problems of wrapping around
	% when starting from sunday
	fInitialJulianDate	= Time.GregorianDateToJulianDate( 2014, 1, 20, 0, 0, 0 ); % a monday
	fFinalJulianDate	= Time.GregorianDateToJulianDate( 2014, 1, 28, 0, 0, 0 ); % a tuesday
	afJulianDates		= linspace( fInitialJulianDate, fFinalJulianDate, 8 * 24 * 6 + 1 ); % days * hours * tenths of minutes
	%
	tResultingSignal		= Signal();
	tResultingSignal.bPrintDebugInformation = true;
	tResultingSignal.Set(	tDevicesIDs.iUserDefinedDevice,		...
							tSignalsIDs.iOccupancy,				...
							zeros( size(afJulianDates) ),		...
							afJulianDates						);
	%
	%
	% ----------------------------------------------------------------------
	% divide the original signal in weekly signals
	tOriginalSignal.TruncateToFullWeeks();
	iTotalNumberOfWeeks = tOriginalSignal.GetNumberOfFullWeeks();

	%
end % function

