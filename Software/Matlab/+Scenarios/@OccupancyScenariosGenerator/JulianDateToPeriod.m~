function aiPeriods = JulianDateToPeriod( tGenerator, afJulianDates )
	%
	% storage allocation
	aiPeriods = zeros( size( afJulianDates ) );
	tGenerator.afPeriodsStartingTimes
	pause
   	%
	% cycle on the various samples
	for iSample = 1:numel(aiPeriods)
		%
		% convert into minutes
		fMinutesInTheDay = Time.JulianDateToMinuteOfDay( afJulianDates(iSample) )
		%
		% find the period
		iCurrentPeriod = find( tGenerator.afPeriodsStartingTimes < fMinutesInTheDay, 1, 'last' )
		%
		% if there are no such periods than set as "last period" as a default
		if( numel(iCurrentPeriod) == 0 )
			%
			aiPeriods(iSample) = tGenerator.tPeriodsLabels.iNumberOfPeriods;
			%
		else%
			%
			% otherwise save it
			aiPeriods(iSample) = iCurrentPeriod;
			%
		end;%
		%
		% DEBUG
% 		fprintf( 'm%f - p%d\n', fMinutesInTheDay, aiPeriods(iSample) );
		%
	end;% cycle on the samples
	%
end % function

