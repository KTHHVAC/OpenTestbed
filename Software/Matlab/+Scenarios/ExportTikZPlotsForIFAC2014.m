% prepare the workspace
clear all;
clear classes;
close all;
clc;
import EstimationAlgorithms.*;
import PhysicalModels.*;
import MatlabToTikZ.*;
import Scenarios.*;


% load the objects
tOccupancy 		= Scenarios.ScenariosGenerator.LoadFromMatFile('../../Datasets/Scenarios/OccupancyGenerator.mat');
tTemperature 	= Scenarios.ScenariosGenerator.LoadFromMatFile('../../Datasets/Scenarios/TemperatureGenerator.mat');
tSolarRadiation	= Scenarios.ScenariosGenerator.LoadFromMatFile('../../Datasets/Scenarios/SolarRadiationGenerator.mat');

[ iNumberOfDays, iNumberOfHoursPerDay ] = size( tOccupancy.atCopulas(tOccupancy.tPeriodsLabels.i6).aafOriginalSamples );
afTimes = (6:1:6+iNumberOfHoursPerDay-1) * Time.GetJulianHour();
%
aafSignals = 
%
MatlabToTikZ.ExportLineplot(			...
	'~/Dropbox/HVAC Project/Papers/IFAC2014_Experimental_Validation_RMPC/Article/DatavisualizationsTables/SolarRadiationConverterEmpiricalMap.txt',		...
	aafSignals,			...
	astrHeader,			... optional, if not given then the header is 'x y1 y2 ...'
	iSamplingPeriod,	...	optional, if not given then the sampling period is 1
	iPrecision,			... optional, if not given then the precision is 5 digits after the comma
	abJulianDates		) % optional, it not given then the signals are not to be converted


tSolarRadiation.tEmpiricalMap.ExportToTxtForTikZScatterplot(	...
	'~/Dropbox/HVAC Project/Papers/IFAC2014_Experimental_Validation_RMPC/Article/DatavisualizationsTables/SolarRadiationConverterEmpiricalMap.txt');

tSolarRadiation.tRegressionMap.ExportToTxtForTikZSurfplot(	...
	'~/Dropbox/HVAC Project/Papers/IFAC2014_Experimental_Validation_RMPC/Article/DatavisualizationsTables/SolarRadiationConverterRegressionMap.txt');

