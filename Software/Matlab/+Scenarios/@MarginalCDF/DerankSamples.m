function afDerankedSamples = DerankSamples( tMarginalCDF, afRankedSamples )
	%
	% storage allocation
	afDerankedSamples = zeros( size(afRankedSamples) );
	% 
	for iSample = 1:numel( afRankedSamples );
		%
		iIndex = find( afRankedSamples(iSample) <= tMarginalCDF.afRange, 1, 'first' );
		%
		% case the current sample is bigger than the biggest value of the cdf
		% range
		if( numel(iIndex) == 0 )
			%
			iIndex = numel(tMarginalCDF.afRange);
			%
		end;%
		%
		afDerankedSamples(iSample) = tMarginalCDF.afDomain(iIndex);
		%
	end;%
	%
% 	% smoothing process
% 	for iElement = 1:numel( afRankedSamples(1, :) );
% 		%
% 		afDerankedSamples(:, iElement) =					...
% 			ksdensity(	afRankedSamples(:, iElement),	...
% 						afRankedSamples(:, iElement),		...
% 						'function', 'icdf' );
% 		%
% 	end;% cycle on the scalar components
	%
end %
