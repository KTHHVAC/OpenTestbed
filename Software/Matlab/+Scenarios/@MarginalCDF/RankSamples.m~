% algorithm:
%
% map each element of the input in [0 1] accordingly to the marginal CDF
%
function afRankedSamples = RankSamples( tMarginalCDF, afNonrankedSamples )
	%
	% storage allocation
	afRankedSamples = zeros( size(afNonrankedSamples) );
	% 
	for iSample = 1:numel( afNonrankedSamples );
		%
		iIndex = find( afNonrankedSamples(iSample) <= tMarginalCDF.afDomain, 1, 'first' );
		%
		% case the current sample is bigger than the biggest value of the cdf
		% domain
		if( numel(iIndex) == 0 )
			%
			iIndex = numel(tMarginalCDF.afDomain);
			%
		end;%
		%
		afRankedSamples(iSample) = tMarginalCDF.afRange(iIndex);
		%
	end;%
	%
	tMarginalCDF.iLabel

	tMarginalCDF.afRange
	%
	%
% 	% Smoothing process
% 	for iElement = 1:numel( afNonrankedSamples(1, :) );
% 		%
% 		afRankedSamples(:, iElement) =						...
% 			ksdensity(	afNonrankedSamples(:, iElement),	...
% 						afNonrankedSamples(:, iElement),	...
% 						'function', 'cdf'					);
% 		%
% 	end;%
	%
end %
