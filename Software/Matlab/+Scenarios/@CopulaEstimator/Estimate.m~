function Estimate( tEstimator )
	%
	% for readability
	iNumberOfSamples	= size( tEstimator.aafSamples, 1 ); % each row is a sample
	iNumberOfLags		= tEstimator.iCorrelationLength;
	%
	% storage allocation
	tEstimator.aaafCorrelations	= zeros( iNumberOfSamples, iNumberOfLags, iNumberOfLags );
	%
	for iSample = 1:iNumberOfSamples;
		%
		% for readability
		afCurrentSample = tEstimator.aafForecastsErrors(iSample, :);
		%
		% transform the Sample into the copula hypercube
		afCopuledSample = ksdensity( afCurrentSample, afCurrentSample, 'function', 'cdf' );
		%
		% compute the hankeled Sample
		afHankeledSample = hankel( afCopuledSample );
		afHankeledSample = (afHankeledSample(1:iNumberOfLags, 1:end-iNumberOfLags))';
		%
		% learn the copula
		aafCorrelation = copulafit('Gaussian', afHankeledSample);
		%
		% save the results
		tEstimator.aaafCorrelations(iSample, :, :)	= aafCorrelation;
		%
	end;%
	%
end % function
