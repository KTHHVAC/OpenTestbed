% clean the workspace -- but close the TCP connection properly! Or you get
% locked out from the system
if( any( strcmp( who, 'tTCPConnection' ) ) )
	%
	fclose( tTCPConnection.tTcpIpClient );
	%
end;%

close all;
clear all;
clear classes;
clc;

%Todo
%		- Change the thermal bounds based on the occupancy;

% to get the updated models
addpath(genpath('Models/'));
% addpath(genpath('../../Papers/CASE2013/Matlab/MFiles/BuildingModel/BuildingMatrices'));

% to get CPLEX path
addpath(genpath('/Users/giorgiopattarello/Applications/IBM/ILOG/CPLEX_Studio1251/cplex/'))
addpath(genpath('C:/Program Files/IBM/ILOG/CPLEX_Studio125/cplex'));

% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConncetion.*;
import Scenarios.*;

% load the parameters	
[tControllerParametersCO2 tControllerParametersTemperature] = Controller.LoadBuildSys2013Parameters();  
%
tTCPConnectionParameters 	= InternetConnection.LoadDefaultTCPConnectionParameters();

% allocate the TCP connection and the controller
tTCPConnection 	= InternetConnection.KTHConnection( tTCPConnectionParameters );

tControllerCO2			= Controller.MPControllerLinear(	tControllerParametersCO2,	...
															tTCPConnection	);
tControllerTemperature 	= Controller.MPControllerLinear(	tControllerParametersTemperature,	...
															tTCPConnection );

% start the control cycle
% notice that timers need callback functions, i.e., static pieces of codes.
% To manage it we implement some 'static' functions like Controller.Run.m
% that then go calling the corresponding method associated to the right
% object
tControlTimerCO2 = timer(															...
	'TimerFcn',			{@Controller.Run,		tControllerCO2, tTCPConnection},	...
	'ErrorFcn',			{@Controller.OnError,	tControllerCO2},					...
	'StartFcn',			{@Controller.OnStart,	tControllerCO2},					...
	'StopFcn',			{@Controller.OnExitNoTCPClose,	tControllerCO2, tTCPConnection},	...
	'Period',			tControllerCO2.fSamplingTimeInSeconds,						...
	'TasksToExecute',	tControllerCO2.iNumberOfRunsToBeExecuted,					...
	'ExecutionMode',	'fixedRate',												...
	'BusyMode',			'drop'														);

tControlTimerTemperature = timer(															...
	'TimerFcn',			{@Controller.Run,		tControllerTemperature, tTCPConnection},	...
	'ErrorFcn',			{@Controller.OnError,	tControllerTemperature},					...
	'StartFcn',			{@Controller.OnStart,	tControllerTemperature},					...
	'StopFcn',			{@Controller.OnExitNoTCPClose,	tControllerTemperature, tTCPConnection},	...
	'Period',			tControllerTemperature.fSamplingTimeInSeconds,						...
	'TasksToExecute',	tControllerTemperature.iNumberOfRunsToBeExecuted,					...
	'ExecutionMode',	'fixedRate',														...
	'BusyMode',			'drop'																);

start( tControlTimerCO2 );
start( tControlTimerTemperature );

% wait up to the moment that the experiment is concluded % We have the same
% timer for both controllers
while( tControlTimerTemperature.TasksExecuted < tControlTimerTemperature.TasksToExecute )
	%	
	tControllerTemperature.PostProcessingPhase( tTCPConnection ); % Built in pause function
	%
end;%

%Experiment is done -> We close the connection
fclose( tTCPConnection.tTcpIpClient );


%always delete timers before exiting!
delete(tControlTimerCO2);
delete(tControlTimerTemperature);

fprintf('\n\nExperiment concluded succesfully\n');


