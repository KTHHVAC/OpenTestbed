
%Returns
% W1 W1ytest W1ref W1ytestref           TC on future data with WN or same input stats as training 
% W2 W2ytest W2ref W2ytestref           SS on future data with WN or same input stats as training
% WDC WDCytest WDCref WDCytestref       DC on future data with WN or same input stats as training

% WOr WOrytest WOr2 WOr2ytest           Or=tuned on future data generated by WN
%                                       Or2=tuned on future data generated by training stats    
%                                       WOr>=WOr2, WOrytest<=WOr2ytest
% Wsub1,Wsub1ytest,Wsub2,Wsub2ytest     N4sid,PEM
% WAIC WAICytest                        BIC on future data with WN or same input stats as training 
% WAIC2 WAIC2ytest                      AIC on future data with WN or same input stats as training 
% WAIC3 WAIC3ytest                      AICc on future data with WN or same input stats as training
% WCV  WCVytest                         CV on future data with WN or same input stats as training 
% W1oe W1oeytest                        PEM+TC on future data with WN or same input stats as training 
% W1oeb W1oebytest                      Avg(TC,PEM+TC) on future data with WN or same input stats as training 
% W1oec W1oecytest                      Avg(TC,PEM+BIC) on future data with WN or same input stats as training

% WOr2altytest,WAICaltytest             ytest-> altytest, alternative fit 
% WAIC2altytest,WCValtytest             obtained by CompFIT
                                       

clear all;close all;randn('state',sum(100*clock))

global OrderKernel
niter=1500;%500;%1500;%1200;
Online=1;%1 = online data generation, otherwise from Data.mat
if Online==0;
    load('/Users/giapi/Desktop/DTExpForSurvey/DT#1/ResultsNullCI/Panel1.mat');Online=0;
    cd /Users/giapi/Desktop/DTExpForSurvey/DT#1
end
morder=30;
nf=200;%length impulse response coefficients
p=nf;%number of predictor coefficients to estimate
N=input('N = ');%200 o 500;%training set size
SNR=[1 10];%[1 9];
inp=[3 2];%1-WN, 2-LP, 3-WN filtered by system of order inp(2), 4-SINE
AlsoDC=0;
CI=0;%0 = null initial condition for PEM
Addzeros=0;%1 = even if CI=1 nf zeros are added to build yy and UU
if N<=300
    mPEM=20;
else
    mPEM=30;
end


for jj=1:niter;jj

    clear numG numH den b U
%     if round(jj/50)==jj/50
%         save Data
%     end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%% GENERATING THE MODEL, THE TRAINING AND THE TEST SET %%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if Online==1;
        gen=1;%1;%or 2
        Pbound=0.95;
        [y,U,f,yy,UU,accband(jj,:),accSNR(jj),md,Utest,ytest,UtestWN,ytestWN]=creadata(morder,SNR,gen,Pbound,N,nf,inp,CI,Addzeros);
        f=f(1:nf);accf(:,jj)=f;accdat(:,:,jj)=[y U];accdatt(:,:,jj)=[yy UU];accdatTest(:,:,jj)=[ytest' Utest'];accdatTest(:,:,jj)=[ytestWN' UtestWN'];accmod{jj}=md;
    else
        f=accf(1:nf,jj);di=size(accdatt,1)-size(accdat,1);
        y=accdat(1:N,1,jj);yy=accdatt(1:(N+di),1,jj);ytest=accdatTest(:,1,jj)';
        U=accdat(1:N,2,jj);UU=accdatt(1:(N+di),2,jj);Utest=accdatTest(:,2,jj)';
    end
    dat=iddata(y,U);%the training set
    datDC=iddata(yy,UU);%the training set for DC
    datTr=iddata(y(1:N/2),U(1:N/2));
    datVal=iddata(y((N/2+1):end),U((N/2+1):end));
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%% STABLE SPLINE ESTIMATOR%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    lab='ny';%'yy' means that it is required also to estimate the noise model
    LP=0;LP2=0;%these settings disable some special sparsification options
    red=length(yy)-p;%number of data used to estimate the hyperparameters (=n means that all the data are used)
    mb=1;%mb = 1 only one \beta to estimate
    cn=0;%dimension of \theta (number of poles with negative real part to be introduced)
    mv=0;%mv = 1 only one \lambda to estimate, otherwise one for each predictor impulse response
		 %p = number of coefficient of impulse response
		 %OrderKernel is a global variable
	
    OrderKernel=1;
    [Mnpe,ipere,A,S1,Ak1,Mref]=SSpline(yy,UU,p,lab,mv,mb,cn,red,LP,LP2);
    [W1(jj),W1ytest(jj)]=CompFIT(Mnpe,f,Utest,ytest,UtestWN,ytestWN);
    [W1ref(jj),W1ytestref(jj)]=CompFIT(Mref,f,Utest,ytest,UtestWN,ytestWN);
    pref=size(Mref.B,2)-1;
    MnpeTC=Mref;
    
    OrderKernel=2;
    [Mnpe,ipere,A,S1,Ak1,Mref]=SSpline(yy,UU,p,lab,mv,mb,cn,red,LP,LP2);
    [W2(jj),W2ytest(jj)]=CompFIT(Mnpe,f,Utest,ytest,UtestWN,ytestWN);
    [W2ref(jj),W2ytestref(jj)]=CompFIT(Mref,f,Utest,ytest,UtestWN,ytestWN);

    
    if AlsoDC==1;%DC
        options=impulseestOptions('RegulKernel','DC');
        Mnpe=impulseest(datDC,p,1,options);
        [WDC(jj),WDCytest(jj)]=CompFIT(Mnpe,f,Utest,ytest);
        Mnpe=impulseest(datDC,pref,1,options);
        [WDCref(jj),WDCytestref(jj)]=CompFIT(Mnpe,f,Utest,ytest);
    else
        WDC(jj)=W1(jj);
        WDCytest(jj)=W1ytest(jj); 
        WDCref(jj)=W1ref(jj); 
        WDCytestref(jj)=W1ytestref(jj);
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%% SUBSPACE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Msub1=n4sid(dat);%,[1:mPEM]);
    [Wsub1(jj),Wsub1ytest(jj)]=CompFIT(Msub1,f,Utest,ytest,UtestWN,ytestWN);
    Msub2=pem(dat);%,[1:mPEM]);
    [Wsub2(jj),Wsub2ytest(jj)]=CompFIT(Msub2,f,Utest,ytest,UtestWN,ytestWN);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%% PEM with AIC,CV and Oracle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %clear L1 L2 ll1 Or0 Or1 Or2 RROrM RROr2M DOr SOr
    for i1=1:mPEM;
        if CI==0
            Mpem{i1}=oe(dat,[i1 i1 1],'LimitError',0,'InitialState','Zero');
            MpemTr=oe(datTr,[i1 i1 1],'LimitError',0,'InitialState','Zero');
        else
            Mpem{i1}=oe(dat,[i1 i1 1],'LimitError',0);
            MpemTr=oe(datTr,[i1 i1 1],'LimitError',0);
        end
        
        npar=max(size(Mpem{i1}.ParameterVector))+1;%includes the noise variance (2*i1+1)
        ndat=Mpem{i1}.EstimationInfo.DataLength;
        predd=predict(Mpem{i1},dat,1);predd=iddata(predd);predd=predd.y;
        RM=sum((predd-y).^2);
        LAIC(i1)=ndat*log(RM/ndat)+log(ndat)*(npar+i1*(CI~=0));%AIC%aic(Mpem); %ndat*log(RM/ndat)+[ndat*(ndat+npar)]/[ndat-npar-2]
        LAIC2(i1)=ndat*log(RM/ndat)+2*(npar+i1*(CI~=0));%AIC%aic(Mpem); %ndat*log(RM/ndat)+[ndat*(ndat+npar)]/[ndat-npar-2]
        LAIC3(i1)=ndat*log(RM/ndat)+2*(npar+i1*(CI~=0))+[2*(npar+i1*(CI~=0))*(npar+i1*(CI~=0)+1)]/[ndat-npar-i1*(CI~=0)-1];
               
        preddVal=predict(MpemTr,datVal,1,'z');preddVal=iddata(preddVal);preddVal=preddVal.y;
        LCV(i1)=sum((preddVal-y((N/2+1):end)).^2);
        
        [WOR(i1),WORytest(i1),WORaltytest(i1)]=CompFIT(Mpem{i1},f,Utest,ytest,UtestWN,ytestWN);
        
        dist1(i1)=norm(impulse(MnpeTC,[0 1:(nf-1)])-impulse(Mpem{i1},[0 1:(nf-1)]));
    end
    %Oracle (WOr>=WOr2, WOrytest<=WOr2ytest) 
    [WOr(jj),accOr(jj)]=max(WOR);
    WOrytest(jj)=WORytest(accOr(jj));
    [WOr2ytest(jj),accOr2(jj)]=max(WORytest);
    WOr2(jj)=WOR(accOr2(jj));
    [WOr2altytest(jj),accOr2alt(jj)]=max(WORaltytest);
    WOr2alt(jj)=WOR(accOr2alt(jj));
    
    %results from AIC
    [q,accAIC(jj)]=min(LAIC);
    WAIC(jj)=WOR(accAIC(jj));
    WAICytest(jj)=WORytest(accAIC(jj));
    WAICaltytest(jj)=WORaltytest(accAIC(jj));
    
    %results from AIC2
    [q,accAIC2(jj)]=min(LAIC2);
    WAIC2(jj)=WOR(accAIC2(jj));
    WAIC2ytest(jj)=WORytest(accAIC2(jj));
    WAIC2altytest(jj)=WORaltytest(accAIC2(jj));
    
    %results from AIC3
    [q,accAIC3(jj)]=min(LAIC3);
    WAIC3(jj)=WOR(accAIC3(jj));
    WAIC3ytest(jj)=WORytest(accAIC3(jj));
    WAIC3altytest(jj)=WORaltytest(accAIC3(jj));
    
    %results from CV
    [q,accCV(jj)]=min(LCV);
    WCV(jj)=WOR(accCV(jj));
    WCVytest(jj)=WORytest(accCV(jj));
    WCValtytest(jj)=WORaltytest(accCV(jj));
    
    %Model order with kernel, 
    %TC+Oe
    [q,accSS1(jj)]=min(dist1);
    W1oe(jj)=WOR(accSS1(jj));
    W1oeytest(jj)=WORytest(accSS1(jj));
    %Avg(Oe+SS,SS)
    M=MnpeTC;
    M.B=[(impulse(MnpeTC,[0 1:(nf-1)])+impulse(Mpem{accSS1(jj)},[0 1:(nf-1)]))/2]';
    [W1oeb(jj),W1oebytest(jj)]=CompFIT(M,f,Utest,ytest,UtestWN,ytestWN);
    M=MnpeTC;
    M.B=[(impulse(MnpeTC,[0 1:(nf-1)])+impulse(Mpem{accAIC(jj)},[0 1:(nf-1)]))/2]';
    [W1oec(jj),W1oecytest(jj)]=CompFIT(M,f,Utest,ytest,UtestWN,ytestWN);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%RESULTS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if AlsoDC==1;
        disp(['     Or       Or2     Avg(OeB,SS)   Avg(Oe,SS)  Oe+SS       SS       SS2       DC       BIC       CV'])
        disp([mean(WOr)  mean(WOr2)   mean(W1oec)   mean(W1oeb)    mean(W1oe)   mean(W1ref)  mean(W2ref)   mean(WDCref)  mean(WAIC)  mean(WCV)])

        disp(['     Or       Or2     Avg(OeB,SS)   Avg(Oe,SS)  Oe+SS       SS       SS2       DC       BIC       CV'])
        disp([mean(WOrytest)  mean(WOr2ytest)   mean(W1oecytest)   mean(W1oebytest)    mean(W1oeytest)   mean(W1ytestref)  mean(W2ytestref)   mean(WDCytestref)  mean(WAICytest)  mean(WCVytest)])
    else
        disp(['     Or       Or2     Avg(OeB,SS)   Avg(Oe,SS)  Oe+SS       SS       SS2       BIC       CV'])
        disp([mean(WOr)  mean(WOr2)   mean(W1oec)   mean(W1oeb)    mean(W1oe)   mean(W1ref)  mean(W2ref)   mean(WAIC)  mean(WCV)])

        disp(['     Or       Or2     Avg(OeB,SS)   Avg(Oe,SS)  Oe+SS       SS       SS2       BIC       CV'])
        disp([mean(WOrytest)  mean(WOr2ytest)   mean(W1oecytest)   mean(W1oebytest)    mean(W1oeytest)   mean(W1ytestref)  mean(W2ytestref)   mean(WAICytest)  mean(WCVytest)])
    end
    disp(['  n4sid      PEM      AIC   AICc'])
    disp([mean(Wsub1)  mean(Wsub2)  mean(WAIC2)  mean(WAIC3)])
    disp(['n4sidytest  PEMytest   AIC   AICc'])
    disp([mean(Wsub1ytest)   mean(Wsub2ytest)   mean(WAIC2ytest)   mean(WAIC3ytest)])
    disp('Alternative Fit on ytest by Or2,BIC,AIC,AICc,CV')
    disp([mean(WOr2altytest)   mean(WAICaltytest) mean(WAIC2altytest)  mean(WAIC3altytest)  mean(WCValtytest)   ])
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
end

%Returns
% W1 W1ytest W1ref W1ytestref           TC on future data with WN or same input stats as training 
% W2 W2ytest W2ref W2ytestref           SS on future data with WN or same input stats as training
% WDC WDCytest WDCref WDCytestref       DC on future data with WN or same input stats as training

% WOr WOrytest WOr2 WOr2ytest           Or=tuned on future data generated by WN
%                                       Or2=tuned on future data generated by training stats    
%                                       WOr>=WOr2, WOrytest<=WOr2ytest
% Wsub1,Wsub1ytest,Wsub2,Wsub2ytest     N4sid,PEM
% WAIC WAICytest                        BIC on future data with WN or same input stats as training 
% WAIC2 WAIC2ytest                      AIC on future data with WN or same input stats as training 
% WCV  WCVytest                         CV on future data with WN or same input stats as training 
% W1oe W1oeytest                        PEM+TC on future data with WN or same input stats as training 
% W1oeb W1oebytest                      Avg(TC,PEM+TC) on future data with WN or same input stats as training 
% W1oec W1oecytest                      Avg(TC,PEM+BIC) on future data with WN or same input stats as training

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%% PLOTS FOR SURVEY %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
close all
figure(1);
lab={'Oe+Or1' 'Oe+Or2' 'TC' 'SS' 'DC' 'Oe+CV'};
boxplot([WOr' WOr2' W1ref'  W2ref' WDCref' WCV'],'labels',lab);
a=axis;a(3)=min(WOr)-0.5;a(4)=100;axis(a);h = findobj(gca,'Type','text');set(h,'Fontsize',13);ylabel('Fits')
disp(sum([WOr' WOr2' W1ref'  W2ref' WDCref' WCV']<a(3)))
figure(2);
boxplot([WOrytest' WOr2ytest' W1ytestref'  W2ytestref' WDCytestref' WCVytest'],'labels',lab);
a=axis;a(3)=min(WOr)-0.5;a(4)=100;axis(a);h = findobj(gca,'Type','text');set(h,'Fontsize',13);ylabel('Fits')
disp(sum([WOrytest' WOr2ytest' W1ytestref'  W2ytestref' WDCytestref' WCV']<a(3)))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%% PLOTS FOR ALCOSP %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure(3);
lab={'Oe+Or1' 'Oe+Or2' 'Avg(Oe+KB,KB)' 'Oe+KB' 'KB' 'Oe+CV'};
boxplot([WOr' WOr2' W1oeb'  W1oe' W1ref' WCV'],'labels',lab);
a=axis;a(3)=min(WOr)-0.5;a(4)=100;axis(a);h = findobj(gca,'Type','text');set(h,'Fontsize',13);ylabel('Fits')
disp('Oe+KB as Oracle 1 (input WN)')
disp(100*sum(accSS1==accOr)/length(accSS1))%W1oe as Oracle for WN
disp(sum([WOr' WOr2' W1oeb'  W1oe' W1ref' WCV']<a(3)))

figure(4);
boxplot([WOrytest' WOr2ytest' W1oebytest'  W1oeytest' W1ytestref' WCVytest'],'labels',lab);
a=axis;a(3)=min(WOr)-0.5;a(4)=100;axis(a);h = findobj(gca,'Type','text');set(h,'Fontsize',13);ylabel('Fits')
disp('Oe+KB as Oracle 2 (input stats as for training)')
disp(100*sum(accSS1==accOr2)/length(accSS1))%W1oe as Oracle for input as training
disp(sum([WOrytest' WOr2ytest' W1oebytest'  W1oeytest' W1ytestref' WCVytest']<a(3)))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%[q,w]=sort(WAICytest);
%a=w([1:400 751:1350]);
%a=randperm(1000);
%accdat=accdat(:,:,a);
%accdatt=accdatt(:,:,a);
%accdatTest=accdatTest(:,:,a);
%accf=accf(:,a);
%accmod=accmod(a);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%     d=[0 0.02:0.02:1];%grid for convex combination
%     Convex Oracle
%     for i=1:length(d);
%         f7=(d(i)*f1+(1-d(i))*f5);
%         Wnum=norm(f-f7);
%         Wvec(i)=100*(1-Wnum/Wden);
%         Wvecc(i)=100*Wnum/norm(f);
%         Y=filter(f7,1,Utest);
%         AA(i)=100*(1-norm(Y-ytest)/norm(ytest-mean(ytest)));
%     end
%     W1Orb(jj)=min(Wvecc);%Convex Oracle
%     [W1Or(jj),D1(jj)]=max(Wvec);
%     W1Orbytest(jj)=max(AA);

