
% genmod  Randomly generates a discrete-time ARMAX (or Output error) model with one output 
% and one delay from the inputs den(q)y(t) = numG(q)u(t) + numH(q)e(t).
% [den,numG,numH,mord,Ind]=genmod(m,mordn,T)
% 
% Outputs:
% den: row vector containing the coefficients defining the polynomial den(q)
% numG: matrix whose m rows containing the coefficients defining the m polynomials numG(q)
% numH: row vector containing the coefficients defining the polynomial numH(q)
% mord: model order that has been randomly chosen
% Ind: sparsity indices
% 
% Inputs:
% m: number of inputs in the ARMAX model
% mordn: choose the model order randomly between 1 and mordn
% T:  1 - generates an ARMAX model
% 2 - generates an output error model
% 3 - generates a sparse ARMAX or output error model
% 4 - generates a sparse ARMAX model

function [den,numG,numH,mord,Ind]=genmod(m,mordn,T);

mord=max(1+floor((mordn-1)*rand),2);
SV=10;%bound on the l2 norm of each system impulse response
fl=0;
while fl==0;

    for kk=1:m;
        V(kk+1)=+inf;
        while V(kk+1)>SV^2;% | V(kk+1)<1;
            if kk==1;
                [numG(kk,:),den]=drmodel(mord);
            else
                [numG(kk,:),denn]=drmodel(mord);
            end
            V(kk+1)=sum(dimpulse(numG(kk,:),den,300).^2);
        end
    end
    V(1)=+inf;
    while V(1)>SV^2;% | V(1)<1;;
        [a,numH]=drmodel(mord);
        V(1)=sum(dimpulse(numH,den,300).^2);
    end
    q1=roots(den);
    q2=roots(numH);
    if max(abs(q1))<0.95 &  max(abs(q2))<0.95;
        for kk=1:m;
            if numG(kk,1)==0;
                si=size(numG(kk,:),2);
                for i=1:si;
                    if numG(kk,i)==0;
                        sell=i;
                    end;
                end;
                numG(kk,:)=[numG(kk,(sell+1):si) zeros(1,sell)];
            end;
        end
        numG(:,end)=[];
        fl=1;
    end
end
Ind=ones(1,m+1);%da 2 a m+1: se a zero fdt a zero, prima componente: a zero = output error

if T==2;
    numH=den;
    Ind(1)=0;%output error model
elseif T==3 | T==4;
    %quante da 1 a m-1 sono zero
    %poi con probabilita' 0.5 numH=den;
    U1=ceil((m-1)/2)+round(rand*((m-1)/2-1));%U1=ceil((m-1)*rand);
    for kk=1:U1;
        numG(kk,:)=0*numG(kk,:);
        Ind(kk+1)=0;
    end
    if T==3;
    U2=rand;
    if U2<0.5;
        numH=den;
        Ind(1)=0;%output error model
    end
    end
end
   
  