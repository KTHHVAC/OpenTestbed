%   MODULE Schedule_1
%     TYPE SCHEDULE
%       NDPW 0
%       N iNumberOfDays + 1
%       LEN iNumberOfSamplesPerDay
%       NHD 0
%       DST_START 90
%       DST_END 300
%       SAMPLE_WIDTH 0.2
%       SMOOTHING_FANOUT 5
%       PERIOD_START YYYYMMDD # relative to the first sample
%       PERIOD_END YYYYMMDD # relative to the last sample
%       START_YEAR iYearOfFirstDay ... iYearOfLastDay -1 # the number of 'iYearOfXXXDay's is equal to iNumberOfDays; the same for the things below
%       END_YEAR iYearOfFirstDay ... iYearOfLastDay -1
%       START_MONTH iMonthOfFirstDay ... iMonthOfLastDay -1
%       END_MONTH iMonthOfFirstDay ... iMonthOfLastDay -1
%       START_DAY iDayOfFirstDay ... iDayOfLastDay -1
%       END_DAY iDayOfFirstDay ... iDayOfLastDay -1
%       VALUE_COL fSample1 ... fSampleM   ......   fSample1 ... fSampleM   0.0 ... 0.0 # with M = iNumberOfSamplesPerDay
%       TIME_COL fTimeOfSample1 ... fTimeOfSampleM   ......   fTimeOfSample1 ... fTimeOfSampleM   0.0 24.0 ... 24.0
%
function WriteSignalInLispFile(			...
			strOutputFilepath,			...
			tSignal,					...
		   	iInitialRowIndex,			...	
		   	iFinalRowIndex,				...
			iNumberOfSamplesPerDay		)
	%
	strTemplateFilepath = 'ida_lisp.ida';
	%
	% resample the signal so to find the midnights in a meaningful way
	afResamplingTimes = tSignal.afTimes(1):(5 * Time.GetJulianMinute()):tSignal.afTimes(end);
	tSignal = tSignal.ResampleAt( afResamplingTimes );
	%
	% truncate to full days
	iNumberOfDays = tSignal.GetNumberOfFullDays();
	tSignal.TruncateToFullDays();
	%
	% resample the signal so to have iNumberOfSamplesPerDay per day
	afResamplingTimes = linspace( tSignal.afTimes(1), tSignal.afTimes(end), iNumberOfSamplesPerDay * iNumberOfDays );
	tSignal = tSignal.ResampleAt( afResamplingTimes );
	%
	% get the various information
	strPeriodStart	= Time.JulianDateToString_YYYYMMDD( tSignal.afTimes(1) );
	strPeriodEnd	= Time.JulianDateToString_YYYYMMDD( tSignal.afTimes(end) );
	aiYears			= [Time.JulianDateToYear( tSignal.afTimes(1:iNumberOfSamplesPerDay:end) ); -1];
	aiMonths		= [Time.JulianDateToMonth( tSignal.afTimes(1:iNumberOfSamplesPerDay:end) ); -1];
	aiDays			= [Time.JulianDateToDayOfMonth( tSignal.afTimes(1:iNumberOfSamplesPerDay:end) ); -1];
	%
	% get the samples
	afValues		= [ tSignal.afValues; zeros( iNumberOfSamplesPerDay, 1 ) ];
	afHours			= Time.JulianDateToMinuteOfDay( tSignal.afTimes ) ./ 60;
	afTimes			= [ afHours; 0; 24 * ones( iNumberOfSamplesPerDay - 1, 1 ) ];
	%
	%
	% read the template file
	acFile = regexp( fileread(strTemplateFilepath), '\n', 'split');
	%
	% remove the useless rows
	acFile = acFile( 1:iInitialRowIndex, (iFinalRowIndex+1):end );
	%
	% how many values shall we write per row in the lisp file
	iNumberOfElementsPerRow = 10;
	%
	% function acOutputFile = WriteSpecificValuesInLispFile( acInputFile, strInitialString, iInitialRowIndex, afValues, bAreValuesIntegersAndNotFloats, iNumberOfElementsPerRow )
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      TIME_COL ', iInitialRowIndex + 19, afTimes, false, iNumberOfElementsPerRow );
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      VALUE_COL ', iInitialRowIndex + 18, afValues, false, iNumberOfElementsPerRow );
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      END_DAY ', iInitialRowIndex + 17, aiDays, true, iNumberOfElementsPerRow );
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      START_DAY ', iInitialRowIndex + 16, aiDays, true, iNumberOfElementsPerRow );
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      END_MONTH ', iInitialRowIndex + 15, aiMonths, true, iNumberOfElementsPerRow );
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      START_MONTH ', iInitialRowIndex + 14, aiMonths, true, iNumberOfElementsPerRow );
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      END_YEAR ', iInitialRowIndex + 13, aiYears, true, iNumberOfElementsPerRow );
	%
	acFile = IDAICEInterfacer.WriteSpecificValuesInLispFile( acFile, '      START_YEAR ', iInitialRowIndex + 12, aiYears, true, iNumberOfElementsPerRow );
	%
	%
	% change the various things to be changed
	strCurrentString = sprintf('      N %d', iNumberOfDays + 1);
	acFile{iInitialRowIndex + 3} = strCurrentString;
	%
	strCurrentString = sprintf('      LEN %d', iNumberOfSamplesPerDay);
	acFile{iInitialRowIndex + 4} = strCurrentString;
	%
	strCurrentString = sprintf('      PERIOD_START %s', strPeriodStart{1});
	acFile{iInitialRowIndex + 10} = strCurrentString;
	%
	strCurrentString = sprintf('      PERIOD_END %s', strPeriodEnd{1});
	acFile{iInitialRowIndex + 11} = strCurrentString;
	%
	%
	% write the output file
	hOutputFile = fopen(strOutputFilepath, 'w');
	fprintf(hOutputFile, '%s\n', acFile{:});
	fclose(hOutputFile);
	%
end % function

