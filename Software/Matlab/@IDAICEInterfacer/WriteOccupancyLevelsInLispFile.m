%   MODULE Schedule_1
%     TYPE SCHEDULE
%       NDPW 0
%       N iNumberOfDays + 1
%       LEN iNumberOfSamplesPerDay
%       NHD 0
%       DST_START 90
%       DST_END 300
%       SAMPLE_WIDTH 0.2
%       SMOOTHING_FANOUT 5
%       PERIOD_START YYYYMMDD # relative to the first sample
%       PERIOD_END YYYYMMDD # relative to the last sample
%       START_YEAR iYearOfFirstDay ... iYearOfLastDay -1 # the number of 'iYearOfXXXDay's is equal to iNumberOfDays; the same for the things below
%       END_YEAR iYearOfFirstDay ... iYearOfLastDay -1
%       START_MONTH iMonthOfFirstDay ... iMonthOfLastDay -1
%       END_MONTH iMonthOfFirstDay ... iMonthOfLastDay -1
%       START_DAY iDayOfFirstDay ... iDayOfLastDay -1
%       END_DAY iDayOfFirstDay ... iDayOfLastDay -1
%       VALUE_COL fSample1 ... fSampleM   ......   fSample1 ... fSampleM   0.0 ... 0.0 # with M = iNumberOfSamplesPerDay
%       TIME_COL fTimeOfSample1 ... fTimeOfSampleM   ......   fTimeOfSample1 ... fTimeOfSampleM   0.0 24.0 ... 24.0
%
function WriteOccupancyLevelsInLispFile( strFilepath, tOccupancySignal, iNumberOfSamplesPerDay )
	%
	% copy the signal to do not mess the original one
	tOccupancy = tOccupancySignal.Copy();
	tOccupancy.Plot()
	pause
	%
	% get some information
	tOccupancy.TruncateToFullDays();
	tOccupancy.Plot()
	Time.JulianDateToString( tOccupancy.afTimes )
	iNumberOfDays = tOccupancy.GetNumberOfFullDays()
	%
	% resample the signal so to have iNumberOfSamplesPerDay per day
	afResamplingTimes = linspace( tOccupancy.afTimes(1), tOccupancy.afTimes(end), iNumberOfSamplesPerDay * iNumberOfDays + 1 );
	tOccupancy.ResampleAt( afResamplingTimes );
	%
	% get the various information
	strPeriodStart	= Time.JulianDateToString_YYYYMMDD( tOccupancy.afTimes(1) );
	strPeriodEnd	= Time.JulianDateToString_YYYYMMDD( tOccupancy.afTimes(end) );
	aiYears			= Time.JulianDateToYear( tOccupancy.afTimes );
	aiMonths		= Time.JulianDateToMonth( tOccupancy.afTimes );
	aiDays			= Time.JulianDateToDayOfMonth( tOccupancy.afTimes );
	afHours			= Time.JulianDateToMinuteOfDay( tOccupancy.afTimes ) ./ 60;
	afValuesCol		= [ repmap( tOccupancy.afValues, iNumberOfDays, 1 ); zeros( iNumberOfSamplesPerDay, 1 ) ];
	afTimesCol		= [ repmap( tOccupancy.afTimes, iNumberOfDays, 1 ); zeros( iNumberOfSamplesPerDay, 1 ) ]
	%
	%
	% open the file
	hFileHandle = fopen( strFilepath, 'r+' );
	%
	% open the first line
	strCurrentLine = fgetl(hFileHandle);
	%
	% scan all the lines of the file
	while( ischar( strCurrentLine ) );
		%
		% if the current line is the right one...
		if( strcmp( strCurrentLine, '  MODULE Schedule_1' ) )
			%
			fprintf('YES\n');
			break;
			%
		end;%
		%
		% go to the next line
		strCurrentLine = fgetl(hFileHandle);
		%
	end;%
	%
end % function

