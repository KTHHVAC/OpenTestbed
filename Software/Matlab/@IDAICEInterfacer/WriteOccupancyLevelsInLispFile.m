%   MODULE Schedule_1
%     TYPE SCHEDULE
%       NDPW 0
%       N iNumberOfDays + 1
%       LEN iNumberOfSamplesPerDay
%       NHD 0
%       DST_START 90
%       DST_END 300
%       SAMPLE_WIDTH 0.2
%       SMOOTHING_FANOUT 5
%       PERIOD_START YYYYMMDD # relative to the first sample
%       PERIOD_END YYYYMMDD # relative to the last sample
%       START_YEAR iYearOfFirstDay ... iYearOfLastDay -1 # the number of 'iYearOfXXXDay's is equal to iNumberOfDays; the same for the things below
%       END_YEAR iYearOfFirstDay ... iYearOfLastDay -1
%       START_MONTH iMonthOfFirstDay ... iMonthOfLastDay -1
%       END_MONTH iMonthOfFirstDay ... iMonthOfLastDay -1
%       START_DAY iDayOfFirstDay ... iDayOfLastDay -1
%       END_DAY iDayOfFirstDay ... iDayOfLastDay -1
%       VALUE_COL fSample1 ... fSampleM   ......   fSample1 ... fSampleM   0.0 ... 0.0 # with M = iNumberOfSamplesPerDay
%       TIME_COL fTimeOfSample1 ... fTimeOfSampleM   ......   fTimeOfSample1 ... fTimeOfSampleM   0.0 24.0 ... 24.0
%
function WriteOccupancyLevelsInLispFile( strOutputFilepath, tOccupancySignal, iNumberOfSamplesPerDay )
	%
	strTemplateFilepath = 'ida_lisp.ida';
	%
	% resample the signal so to find the midnights in a meaningful way
	afResamplingTimes = tOccupancySignal.afTimes(1):(5 * Time.GetJulianMinute()):tOccupancySignal.afTimes(end);
	tOccupancy = tOccupancySignal.ResampleAt( afResamplingTimes );
	%
	% truncate to full days
	iNumberOfDays = tOccupancy.GetNumberOfFullDays();
	tOccupancy.TruncateToFullDays();
	%
	% resample the signal so to have iNumberOfSamplesPerDay per day
	afResamplingTimes = linspace( tOccupancy.afTimes(1), tOccupancy.afTimes(end), iNumberOfSamplesPerDay * iNumberOfDays );
	tOccupancy = tOccupancy.ResampleAt( afResamplingTimes );
	%
	% get the various information
	strPeriodStart	= Time.JulianDateToString_YYYYMMDD( tOccupancy.afTimes(1) );
	strPeriodEnd	= Time.JulianDateToString_YYYYMMDD( tOccupancy.afTimes(end) );
	aiYears			= Time.JulianDateToYear( tOccupancy.afTimes(1:iNumberOfSamplesPerDay:end) );
	aiMonths		= Time.JulianDateToMonth( tOccupancy.afTimes(1:iNumberOfSamplesPerDay:end) );
	aiDays			= Time.JulianDateToDayOfMonth( tOccupancy.afTimes(1:iNumberOfSamplesPerDay:end) );
	%
	% get the samples
	afValues		= [ tOccupancy.afValues; zeros( iNumberOfSamplesPerDay, 1 ) ];
	afHours			= Time.JulianDateToMinuteOfDay( tOccupancy.afTimes ) ./ 60;
	afTimes			= [ afHours; 0; 24 * ones( iNumberOfSamplesPerDay - 1, 1 ) ];
	%
	%
	% read the template file
	acFile = regexp( fileread(strTemplateFilepath), '\n', 'split');
	%
	% change the various things to be changed
	strCurrentString = sprintf('      N %d', iNumberOfDays + 1);
	acFile{159} = strCurrentString;
	%
	strCurrentString = sprintf('      LEN %d', iNumberOfSamplesPerDay);
	acFile{160} = strCurrentString;
	%
	strCurrentString = sprintf('      PERIOD_START %s', strPeriodStart{1});
	acFile{166} = strCurrentString;
	%
	strCurrentString = sprintf('      PERIOD_END %s', strPeriodEnd{1});
	acFile{167} = strCurrentString;
	%
	strStartYearsString		= sprintf('      START_YEAR ');
	strEndYearsString		= sprintf('      END_YEAR ');
	strStartMonthString		= sprintf('      START_MONTH ');
	strEndMonthString		= sprintf('      END_MONTH ');
	strStartDayString		= sprintf('      START_DAY ');
	strEndDayString			= sprintf('      END_DAY ');
	%
	for iSample = 1:numel( aiYears );
		%
		strStartYearsString		= strcat(strStartYearsString,		sprintf(' %d', aiYears(iSample)));
		strEndYearsString		= strcat(strEndYearsString,			sprintf(' %d', aiYears(iSample)));
		strStartMonthString		= strcat(strStartMonthString,		sprintf(' %d', aiMonths(iSample)));
		strEndMonthString		= strcat(strEndMonthString,			sprintf(' %d', aiMonths(iSample)));
		strStartDayString		= strcat(strStartDayString,			sprintf(' %d', aiDays(iSample)));
		strEndDayString			= strcat(strEndDayString,			sprintf(' %d', aiDays(iSample)));
		%
	end;%
	%
	strStartYearsString		= strcat(strStartYearsString,	' -1');	
	strEndYearsString		= strcat(strEndYearsString,		' -1');	
	strStartMonthString		= strcat(strStartMonthString,	' -1');	
	strEndMonthString		= strcat(strEndMonthString,		' -1');	
	strStartDayString		= strcat(strStartDayString,		' -1');	
	strEndDayString			= strcat(strEndDayString,		' -1');	
	%
	acFile{168} = strStartYearsString;
	acFile{169} = strEndYearsString;
	acFile{170} = strStartMonthString;
	acFile{171} = strEndMonthString;
	acFile{172} = strStartDayString;
	acFile{173} = strEndDayString;
	%
	strValuesString		= sprintf('      VALUE_COL ');
	strTimesString		= sprintf('      TIME_COL ');
	%
	for iSample = 1:numel( afValues );
		%
		strValuesString		= strcat(strValuesString,	sprintf(' %.2f', afValues(iSample)));
		strTimesString		= strcat(strTimesString,	sprintf(' %.2f', afTimes(iSample)));
		%
	end;%
	%
	acFile{174} = strValuesString;
	acFile{175} = strTimesString;
	%
	% write the output file
	hOutputFile = fopen(strOutputFilepath, 'w');
	fprintf(hOutputFile, '%s\n', acFile{:});
	fclose(hOutputFile);
	%
end % function

