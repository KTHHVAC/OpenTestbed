function acOutputFile = WriteSpecificValuesInLispFile( acInputFile, strInitialString, iInitialRowIndex, afValues, bAreValuesIntegersAndNotFloats, iNumberOfElementsPerRow )
	%
	acOutputFile = acInputFile;
	%
	strString = strInitialString;
	%
	iCurrentRowIndex = iInitialRowIndex;
	%
	iNumberOfWritings = 0;
	%
	for iSample = 1:numel( afValues );
		%
		if( bAreValuesIntegersAndNotFloats )
			%
			strString = strcat(strString, sprintf(' %d', afValues(iSample)));
			%
		else%
			%
			strString = strcat(strString, sprintf(' %.2f', afValues(iSample)));
			%
		end;%
		%
		bBufferIsNotEmpty = true;
		%
		if( ~mod(iSample, iNumberOfElementsPerRow) )
			%
			% shift the rows down if it is at least the second writing performed
			if( iNumberOfWritings > 0 )
				%
				for iRow = numel(acOutputFile):-1:(iCurrentRowIndex);
					%
					acOutputFile{iRow+1} = acOutputFile{iRow};
					%
				end;%
				%
			end;%
			%
			% write the current one
			acOutputFile{iCurrentRowIndex} = strString;
			%
			% reinitialize the times string
			strString = sprintf('      ');
			%
			% increment the row and number of writings counters
			iCurrentRowIndex = iCurrentRowIndex + 1;
			iNumberOfWritings = iNumberOfWritings + 1;
			%
			% signal that there is stuff to be written
			bBufferIsNotEmpty = false;
			%
		end;%
		%
	end;%
	%
	% in case one has not emptied the current string then do it 
	if( bBufferIsNotEmpty )
		%
		% shift the rows down if it is at least the second writing performed
		if( iNumberOfWritings > 0 )
			%
			for iRow = numel(acOutputFile):-1:(iCurrentRowIndex);
				%
				acOutputFile{iRow+1} = acOutputFile{iRow};
				%
			end;%
			%
		end;%
		%
		acOutputFile{iCurrentRowIndex} = strString;
		%
	end;%
	%
end % function

