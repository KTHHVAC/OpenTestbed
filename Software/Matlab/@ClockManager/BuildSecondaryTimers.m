function BuildSecondaryTimers( tClockManager )
	%
	global tCO2Controller;
	global tTemperatureController;
	global tAirConditionedPIController;
	global tTCPConnection;
	%
	try %
		%
% 		switch tClockManager.strRunningController
% 			%
% 			case { 'DeterministicMPC' , 'RandomizeMPC' }
% 				%
% 				tClockManager.atControllerTimers{1} =																			...
% 					timer(																										...
% 						'TimerFcn',			{@Controller.RunPI,				  tAirConditionedPIController, tTCPConnection },	...
% 						'ErrorFcn',			{@Controller.OnError,			{ tAirConditionedPIController } },					...
% 						'StartFcn',			{@Controller.OnStart,			{ tAirConditionedPIController } },					...
% 						'StopFcn',			{@Controller.OnExitNoTCPClose,	{ tAirConditionedPIController } },					...
% 						'Period',			tAirConditionedPIController.fSamplingTimeInSeconds,									...
% 						'ExecutionMode',	'fixedRate',																		...
% 						'BusyMode',			'drop'																				);
% 				%
% 				tClockManager.atControllerTimers{2} = timer(																											...
% 						'TimerFcn',			{@Controller.Run,				  tCO2Controller, tTemperatureController , tAirConditionedPIController, tTCPConnection },	...
% 						'ErrorFcn',			{@Controller.OnError,			{ tCO2Controller, tTemperatureController } },												...
% 						'StartFcn',			{@Controller.OnStart,			{ tCO2Controller, tTemperatureController } },												...
% 						'StopFcn',			{@Controller.OnExitNoTCPClose,	{ tCO2Controller, tTemperatureController } },												...
% 						'Period',			tCO2Controller.fSamplingTimeInSeconds,																						...
% 						'ExecutionMode',	'fixedRate',																												...
% 						'BusyMode',			'drop'																														);
% 				%
% 			case 'AkademiskaHC'
% 				%
% 				tClockManager.atControllerTimers = [];
% 				%
% 			otherwise
% 				%
% 				error('Wrong controller selection');	
% 				%
% 		end;	% end switch
		%
		
		%
		if(		strcmp(tClockManager.strRunningController,'DeterministicMPC')	...
			||	strcmp(tClockManager.strRunningController,'RandomizeMPC')		)
			%
			tClockManager.atControllerTimers{1} =																			...
				timer(																										...
					'TimerFcn',			{@Controller.RunPI,				  tAirConditionedPIController, tTCPConnection },	...
					'ErrorFcn',			{@Controller.OnError,			{ tAirConditionedPIController } },					...
					'StartFcn',			{@Controller.OnStart,			{ tAirConditionedPIController } },					...
					'StopFcn',			{@Controller.OnExitNoTCPClose,	{ tAirConditionedPIController } },					...
					'Period',			tAirConditionedPIController.fSamplingTimeInSeconds,									...
					'ExecutionMode',	'fixedRate',																		...
					'BusyMode',			'drop'																				);
			%
			tClockManager.atControllerTimers{2} = timer(																											...
					'TimerFcn',			{@Controller.Run,				  tCO2Controller, tTemperatureController , tAirConditionedPIController, tTCPConnection },	...
					'ErrorFcn',			{@Controller.OnError,			{ tCO2Controller, tTemperatureController } },												...
					'StartFcn',			{@Controller.OnStart,			{ tCO2Controller, tTemperatureController } },												...
					'StopFcn',			{@Controller.OnExitNoTCPClose,	{ tCO2Controller, tTemperatureController } },												...
					'Period',			tCO2Controller.fSamplingTimeInSeconds,																						...
					'ExecutionMode',	'fixedRate',																												...
					'BusyMode',			'drop'																														);
			%
		elseif(	strcmp(tClockManager.strRunningController,'AkademiskaHC') )
			%
			tClockManager.atControllerTimers = [];
			%
		else%
			%
			error('Wrong controller selection');	
			%
		end%;	% end else
		%
	catch exception
		%
		disp(exception.message);
		fprintf('Error starting the secondary timers.');
		%
	end;% catch
	%
end %
