function AllocateAppropriateController( tClockManager )
	%
	global tCO2Controller;
	global tTemperatureController;
	global tAirConditionedPIController;
	%
	try %
		%
		switch tClockManager.strRunningController
			%
			% ---------------------------------------------------
			case 'DeterministicMPC'
				tCO2ControllerParameters				= Controller.LoadDeterministicCO2MPCParameters();
				tCO2Controller							= Controller.DeterministicCO2MPC( tCO2ControllerParameters );
				tTemperatureControllerParameters		= Controller.LoadDeterministicTemperatureMPCParameters();
				tTemperatureController					= Controller.DeterministicTemperatureMPC( tTemperatureControllerParameters );
				tAirConditionedPIControllerParameters	= Controller.LoadAirConditionedPIControllerParameters();  
				tAirConditionedPIController				= Controller.AirConditionedPIController( tAirConditionedPIControllerParameters );
			%
			% ---------------------------------------------------
			case 'RandomizeMPC'
				tCO2ControllerParameters				= Controller.LoadStochasticCO2MPCParameters();
				tCO2Controller							= Controller.StochasticCO2MPC( tCO2ControllerParameters );
				tTemperatureControllerParameters		= Controller.LoadStochasticTemperatureMPCParameters();
				tTemperatureController					= Controller.StochasticTemperatureMPC( tTemperatureControllerParameters );
				tAirConditionedPIControllerParameters	= Controller.LoadAirConditionedPIControllerParameters();  
				tAirConditionedPIController				= Controller.AirConditionedPIController( tAirConditionedPIControllerParameters );
			%
			% ---------------------------------------------------
			case 'AkademiskaHC'
			%
			% ---------------------------------------------------
			otherwise
				error('Wrong controller selection');
			%	
			%
		end;% end switch
		%
	catch exception
		%
		disp(exception.message);
		fprintf('Error starting the secondary timers.');
		%
	end;% catch
	%
end %
