% locked out from the system
if( any( strcmp( who, 'tTCPConnection' ) ) )
	%
	fclose( tTCPConnection.tTcpIpClient );
	%
end;%

close all;
clear all;
clear classes;
clc;
 
% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConnection.*;
import Scenarios.*;

%
% load the parameters	
tControllerParameters			= Controller.LoadAirConditionedPIControllerParameters();  
tTCPConnectionParameters		= InternetConnection.LoadDefaultTCPConnectionParameters();
%
% allocate the TCP connection and the controller
tTCPConnection					= InternetConnection.KTHConnection( tTCPConnectionParameters );
tAirConditionedPIController		= Controller.AirConditionedPIController( tControllerParameters );
%
bUseTimer = true;
%
%
if ~bUseTimer
	%
	tAirConditionedPIController.OnStart();
	tAirConditionedPIController.Run( tTCPConnection , tControllerParameters );
	tAirConditionedPIController.OnExitNoTCPClose();
	%
else%
	%
	tControllerDebugTimer = timer(																									...
		'TimerFcn',			{@Controller.Run,				tAirConditionedPIController, tTCPConnection, tControllerParameters},	...
		'ErrorFcn',			{@Controller.OnError,			tAirConditionedPIController},											...
		'StartFcn',			{@Controller.OnStart,			tAirConditionedPIController},											...
		'StopFcn',			{@Controller.OnExitNoTCPClose,	tAirConditionedPIController},											...
		'Period',			tAirConditionedPIController.fSamplingTimeInSeconds,														...
		'TasksToExecute',	tAirConditionedPIController.iNumberOfRunsToBeExecuted,													...
		'ExecutionMode',	'fixedRate',																							...
		'BusyMode',			'drop'																									);
	% 
	start( tControllerDebugTimer );
	disp('ControlTimer Started');
	%
	%Experiment is done -> We close the connection
	%
end %
%
%
% fclose( tTCPConnection.tTcpIpClient );
% %
% %always delete timers before exiting!
% %
% delete(tControllerDebugTimer);

