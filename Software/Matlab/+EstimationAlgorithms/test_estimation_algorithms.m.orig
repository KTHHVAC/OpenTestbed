close all;
clear all;
clear classes;
clc;

import EstimationAlgorithms.*;

iDeviceID 	= 1001;
iSignalID 	= 10;
afX 		= 6;
afY 		= 7;
afZ 		= 8;


tSignal = BidimensionalSignal();
tSignal.Set( iDeviceID, iSignalID, [], [], [], afX, afY, afZ );
<<<<<<< HEAD

=======
%
>>>>>>> c155d7950e1a13abf870162cf27dfdf9b138986d
for fX = logspace(1, 2, 10)
for fY = logspace(1, 2, 10)
	%
	fZ = fX + fY + 10 * randn(1);
	%
	tSignal.Insert( fZ, fX, fY );
	%
end;%
end;%
<<<<<<< HEAD

tSignal.Plot();

=======
%
tSignal.Plot();
%
>>>>>>> c155d7950e1a13abf870162cf27dfdf9b138986d
tRegularizedSignal =										...
	EstimationAlgorithms.RegularizeBidimensionalSignal(		...
		tSignal,											...
		@EvaluateGaussianKernelAt,							...
<<<<<<< HEAD
		10,													...
		10													);

=======
		1,													...
		100													);
>>>>>>> c155d7950e1a13abf870162cf27dfdf9b138986d
tRegularizedSignal.Plot();


% tSignal = Signal();
% tSignal.Set( iDeviceID, iSignalID, [], [], afX, afY, afZ );
% 
% for fX = logspace(1, 2, 10)
% 	%
% 	fY = fX + 10 * randn(1);
% 	%
% 	tSignal.Insert( fY, fX );
% 	%
% end;%
% 
% tSignal.Plot();
% 
% tRegularizedSignal =										...
% 	EstimationAlgorithms.RegularizeSignal(					...
% 		tSignal,											...
% 		@EvaluateGaussianKernelAt,							...
% 		100,												...
% 		100													);
% 
% tRegularizedSignal.Plot();

