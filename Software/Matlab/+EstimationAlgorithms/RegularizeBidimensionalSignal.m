function tRegularizedSignal =						...
			RegularizeBidimensionalSignal(			...
				tOriginalSignal,					...
				tKernelEvaluationFunctionHandle,	...
				fRegularizationParameter,			...
				afKernelParameters					)
	%
	%
	% get the triplets from the original signal
	aafOriginalXYZTriplets = tOriginalSignal.GetXYZTriplets();
	%
	% for readability
	iNumberOfOriginalSamples = size( aafOriginalXYZTriplets, 1 );
	afXAxis = linspace(	min(aafOriginalXYZTriplets(:, 1)),	...
						max(aafOriginalXYZTriplets(:, 1)),	...
						100									);
	afYAxis = linspace(	min(aafOriginalXYZTriplets(:, 2)),	...
						max(aafOriginalXYZTriplets(:, 2)),	...
						100									);
	%
	% get the sampled kernel
	aafSampledKernel = EstimationAlgorithms.GetSampledKernel(	...
						aafOriginalXYZTriplets(:, 1:2),			...
						tKernelEvaluationFunctionHandle,		...
						afKernelParameters						);
	%
	% compute the solution of the regularization problem
	afCoefficients =															...
		inv																		...
		(																		...
				aafSampledKernel												...
			+	fRegularizationParameter * eye( size( aafSampledKernel ) )		...
		)																		...
		*																		...
		aafOriginalXYZTriplets(:, 3);
	%
	% construct the actual regression map
	tRegularizedSignal = BidimensionalSignal();
	%
	% cycle on the samples of the dataset
	for iXIndex = 1:numel(afXAxis)
	for iYIndex = 1:numel(afYAxis)
		%
		fX = afXAxis(iXIndex);
		fY = afYAxis(iYIndex);
		%
		% initialization
		fZ = 0;
		%
		% cycle on the samples of the dataset
		for iSample = 1:iNumberOfOriginalSamples;
			%
			% for readability
			fCurrentX = aafOriginalXYZTriplets(iSample, 1);
			fCurrentY = aafOriginalXYZTriplets(iSample, 2);
			%
			fCurrentKernelEvaluation =					...
				tKernelEvaluationFunctionHandle(		...
					[fX, fY],							...
					[fCurrentX, fCurrentY],				...
					afKernelParameters					);
			%
			fZ = fZ + afCoefficients(iSample) * fCurrentKernelEvaluation;
			%
		end;% cycle on the samples of the dataset
		%
		% insert the current value
		tRegularizedSignal.Insert( fZ, fX, fY );
		%
	end;%
	end;% cycle on the samples
	% 
end % function

