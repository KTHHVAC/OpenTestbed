function tRegularizedSignal =						...
			RegularizeBidimensionalSignal(			...
				tOriginalSignal,					...
				tKernelEvaluationFunctionHandle,	...
				fRegularizationParameter,			...
				afKernelParameters,					...
				bBeVerbose							) % optional
	%
	%
	if( nargin == 4 )
		%
		bBeVerbose = false;
		%
	end;%
	%
	%
	% get the triplets from the original signal
	aafOriginalXYZTriplets = tOriginalSignal.GetXYZTriplets();
	%
	% for readability
	iNumberOfOriginalSamples = size( aafOriginalXYZTriplets, 1 );
	afXAxis = linspace(	min(aafOriginalXYZTriplets(:, 1)),	...
						max(aafOriginalXYZTriplets(:, 1)),	...
						100									);
	afYAxis = linspace(	min(aafOriginalXYZTriplets(:, 2)),	...
						max(aafOriginalXYZTriplets(:, 2)),	...
						100									);
	%
	%
	% ------------------------------------------------------------------------
	% get the sampled kernel
	%
	if( bBeVerbose )
		%
		fprintf('Starting computing the sampled kernel: regularization parameter = %.4f\n', fRegularizationParameter);
		%
	end;%
	%
	aafSampledKernel = EstimationAlgorithms.GetSampledKernel(	...
						aafOriginalXYZTriplets(:, 1:2),			...
						tKernelEvaluationFunctionHandle,		...
						afKernelParameters						);
	%
	if( bBeVerbose )
		%
		fprintf('Computation of the sampled kernel finished!\n');
		%
	end;%
	%
	% check if there are some problems
	if( sum(sum( isnan(aafSampledKernel) )) )
		%
		warning('the sampled kernel contains some NaNs!!');
		%
	end;%
	%
	% ------------------------------------------------------------------------
	% compute the solution of the regularization problem
	%
	% start checking if the condition number is meaningful
	fConditionNumber = rcond(		aafSampledKernel											...
								+	fRegularizationParameter * eye( size( aafSampledKernel ) )	);
	%
	if( bBeVerbose )
		%
		fprintf('Starting solving the regularization problem: current condition number = %.20f\n', fConditionNumber);
		%
	end;%
	%
	afCoefficients =															...
		inv																		...
		(																		...
				aafSampledKernel												...
			+	fRegularizationParameter * eye( size( aafSampledKernel ) )		...
		)																		...
		*																		...
		aafOriginalXYZTriplets(:, 3);
	%
	if( bBeVerbose )
		%
		fprintf('finished\n');
		disp(afCoefficients');
		%
	end;%
	%
	% ------------------------------------------------------------------------
	% construct the actual regression map
	%
	if( bBeVerbose )
		%
		fprintf('Starting constructing the regression map...');
		%
	end;%
	%
	tRegularizedSignal = BidimensionalSignal();
	%
	% cycle on the samples of the dataset
	for iXIndex = 1:numel(afXAxis)
		%
		for iYIndex = 1:numel(afYAxis)
			%
			fX = afXAxis(iXIndex);
			fY = afYAxis(iYIndex);
			%
			% initialization
			fZ = 0;
			%
			% cycle on the samples of the dataset
			for iSample = 1:iNumberOfOriginalSamples;
				%
				% for readability
				fCurrentX = aafOriginalXYZTriplets(iSample, 1);
				fCurrentY = aafOriginalXYZTriplets(iSample, 2);
				%
				fCurrentKernelEvaluation =					...
					tKernelEvaluationFunctionHandle(		...
						[fX, fY],							...
						[fCurrentX, fCurrentY],				...
						afKernelParameters					);
				%
				fZ = fZ + afCoefficients(iSample) * fCurrentKernelEvaluation;
				%
			end;% cycle on the samples of the dataset
			%
			% insert the current value
			tRegularizedSignal.Insert( fZ, fX, fY );
			%
		end;%
		%
		if( bBeVerbose )
			%
			fprintf('%d / %d (%.4f %.4f %.4f)\n', iXIndex, numel(afXAxis), fZ, fX, fY );
			%
		end;%
		%
	end;% cycle on the samples
	%
	if( bBeVerbose )
		%
		fprintf('finished\n');
		%
	end;%
	% 
end % function

