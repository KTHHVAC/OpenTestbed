function tRegularizedSignal =						...
			RegularizeSignal(						...
				tOriginalSignal,					...
				tKernelEvaluationFunctionHandle,	...
				fRegularizationParameter,			...
				afKernelParameters					)
	%
	% get the triplets from the original signal
	aafOriginalXYDuplets = tOriginalSignal.GetXYDuplets();
	%
	% for readability
	iNumberOfOriginalSamples = size( aafOriginalXYDuplets, 1 );
	afXAxis = linspace(	min(aafOriginalXYDuplets(:, 1)),	...
						max(aafOriginalXYDuplets(:, 1)),	...
						100									);
	%
	% get the sampled kernel
	aafSampledKernel = EstimationAlgorithms.GetSampledKernel(	...
						aafOriginalXYDuplets(:, 1),				...
						tKernelEvaluationFunctionHandle,		...
						afKernelParameters						);
	%
	% compute the solution of the regularization problem
	afCoefficients =															...
		inv																		...
		(																		...
				aafSampledKernel												...
			+	fRegularizationParameter * eye( size( aafSampledKernel ) )		...
		)																		...
		*																		...
		aafOriginalXYDuplets(:, 2);
	%
	% construct the actual regression map
	tRegularizedSignal = Signal();
	%
	% cycle on the samples of the dataset
	for iXIndex = 1:numel(afXAxis)
		%
		fX = afXAxis(iXIndex);
		%
		% initialization
		fY = 0;
		%
		% cycle on the samples of the dataset
		for iSample = 1:iNumberOfOriginalSamples;
			%
			% for readability
			fCurrentX = aafOriginalXYDuplets(iSample, 1);
			%
			fCurrentKernelEvaluation =					...
				tKernelEvaluationFunctionHandle(		...
					fX,									...
					fCurrentX,							...
					afKernelParameters					);
			%
			fY = fY + afCoefficients(iSample) * fCurrentKernelEvaluation;
			%
		end;% cycle on the samples of the dataset
		%
		% insert the current value
		tRegularizedSignal.Insert( fY, fX );
		%
	end;% cycle on the samples
	% 
end % function

