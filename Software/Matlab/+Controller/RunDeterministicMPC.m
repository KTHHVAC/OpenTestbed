% 'src' and 'evt' are arguments passed automatically by the 'timer' objects, 
% thus they need to be handled even if not used
%
function Run( src, evt, tCO2Controller, tTemperatureController, tTCPConnection )
	%
	%
	try %
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Entering Run()\n');
			%
		end;%
		%
		%------------------------------------------------------------------
		% computing the inputs
		%
		%
		tCO2Controller.AcquireMeasurements( tTCPConnection );
		tCO2Controller.AcquireForecasts( tTCPConnection );
		tCO2Controller.ComputeControlInputs();
		%
		tTemperatureController.afLowerBoundForTheVentilation = tCO2Controller.afRequestedMassFlowOverPredictionHorizon;
		%
		% temperature controller
		tTemperatureController.AcquireMeasurements( tTCPConnection );
		tTemperatureController.AcquireForecasts( tTCPConnection );
		tTemperatureController.ComputeControlInputs();
		%
		%
		%------------------------------------------------------------------
		% calling the opportune PIs (for the cooling or for the radiator)
		%
		fVentilationPercentage = Controller.MassFlowToVentingPercentageLinearCase( tTemperatureController.fAirMassFlow ,'T');
		%
		if ( tTemperatureController.fAirConditionedTemperature > 0 )
			%
			fprintf('Start Cooling PI with Tac=%d and Vent=%d.', tTemperatureController.fAirConditionedTemperature , fVentilationPercentage );
			%
		end;%
		%
		%
		if ( tTemperatureController.fMeanRadiantTemperature > 0 )
			%
			fprintf('Start Cooling PI with Tmr=%d', tTemperatureController.fMeanRadiantTemperature , fVentilationPercentage );
			%
		end;%
		%
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Exiting Run()\n\n');
			%
		end;%
		%
		catch exception
		%
		disp( exception.message );
		warning('Unable to run the main control cycle');
		%
	end;% end catch
	%
end %

