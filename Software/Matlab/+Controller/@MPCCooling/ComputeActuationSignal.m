function fAc = ComputeActuationSignal(	fReference ,					...
										fTsa_current , fTsa_previous ,	...
										fTai_current ,					...
										fAc_previous ,					...
										fAv_current ,					...
										iPredictionOrizon ,				...
										iSampleTime )

% General parameters from the identified model
%
alpha	= 1.4937;
beta	= -0.5321;
gamma	= 10.5840 * 1e-06;
delta	= -1.9012 * 1e-03;
epsilon = 0.0371; 
%
%
theta = 1;%1e-07;
%
% only to semplify the notation
Av		= fAv_current;
Tai		= fTai_current;
%
%
%% Bounds setting
%
LB_PERCENTAGE	= 0;
UB_PERCENTAGE	= 100;
%
LB_TSA			= 16;	% could be modified to 16.5?? -> Change also Temperature MPC
UB_TSA			= 22;	% could be modified to 21??
%
iD				= 100;	% "delta_u", could be modified
LB_deltaU		= -iD;	
UB_deltaU		= +iD; 
%
%
%% Building the system
%
aafA	=[	alpha			beta		gamma*Av+delta	;	...
			1				0			0				;	...
			0				0			1				];
afB		=[	gamma*Av+delta								;	...
			0											;	...
			1											];
afE		=[	epsilon * Tai								;	...
			0											;	...
			0											];
afC		=[	1				0			0				];
afH		=[	0				0			1				];

afX0	=[	fTsa_current	fTsa_previous	fAc_previous	]'; 
% 
%% Building the constraint matrices
%
% 
iTotalNumberOfSamples = iPredictionOrizon / iSampleTime;
%
for iSample = 1:iTotalNumberOfSamples
	aafCoefficientForcedStateResponse(:,:,iSample)				= ForcedResponceCoefficients(aafA,afB,iTotalNumberOfSamples-iSample);
	aafCoefficientForcedStateResponseDisturbance(:,:,iSample)	= ForcedResponceCoefficients(aafA,afE,iTotalNumberOfSamples-iSample);
	aafCoefficientUnforcedStateResponse(:,:,iSample)			= UnforcedResponceCoefficients(aafA,iSample);
end
%
aafLastRowMatrixOfCoefficient_Cb = [];
aafLastRowMatrixOfCoefficient_Ce = [];
aafLastRowMatrixOfCoefficient_Hb = [];
aafLastRowMatrixOfCoefficient_He = [];
%
for iSample=1:iTotalNumberOfSamples
	aafLastRowMatrixOfCoefficient_Cb(:,iSample) = afC * aafCoefficientForcedStateResponse(:,iSample);
	aafLastRowMatrixOfCoefficient_Ce(:,iSample) = afC * aafCoefficientForcedStateResponseDisturbance(:,iSample);
	aafLastRowMatrixOfCoefficient_Hb(:,iSample) = afH * aafCoefficientForcedStateResponse(:,iSample);
	aafLastRowMatrixOfCoefficient_He(:,iSample) = afH * aafCoefficientForcedStateResponseDisturbance(:,iSample);
end
%
aafLastRowMatrixOfCoefficient_Cb =fliplr(aafLastRowMatrixOfCoefficient_Cb);
aafLastRowMatrixOfCoefficient_Hb =fliplr(aafLastRowMatrixOfCoefficient_Hb);
aafLastRowMatrixOfCoefficient_Ce =fliplr(aafLastRowMatrixOfCoefficient_Ce);
aafLastRowMatrixOfCoefficient_He =fliplr(aafLastRowMatrixOfCoefficient_He);
%
aafMatrixOfCoefficient_Cb = [];
aafMatrixOfCoefficient_Ca = [];
aafMatrixOfCoefficient_Ce = [];
aafMatrixOfCoefficient_Hb = [];
aafMatrixOfCoefficient_Ha = [];
aafMatrixOfCoefficient_He = [];
%
%
for iSample=1:iTotalNumberOfSamples
	
	aafMatrixOfCoefficient_Ca = [aafMatrixOfCoefficient_Ca; afC	* aafCoefficientUnforcedStateResponse(:,:,iSample)];
		
	aafNewRow = aafLastRowMatrixOfCoefficient_Cb(1:iTotalNumberOfSamples+1-iSample);
	aafMatrixOfCoefficient_Cb = [fliplr(aafNewRow)  zeros(	size(aafNewRow,1),...
								size(aafLastRowMatrixOfCoefficient_Cb,2)-size(aafNewRow,2)); aafMatrixOfCoefficient_Cb];
	
	aafNewRow = aafLastRowMatrixOfCoefficient_Ce(1:iTotalNumberOfSamples+1-iSample);
	aafMatrixOfCoefficient_Ce = [fliplr(aafNewRow)  zeros(	size(aafNewRow,1),...
								size(aafLastRowMatrixOfCoefficient_Ce,2)-size(aafNewRow,2)); aafMatrixOfCoefficient_Ce];
	
	aafMatrixOfCoefficient_Ha = [aafMatrixOfCoefficient_Ha; afH * aafCoefficientUnforcedStateResponse(:,:,iSample)];
		
	aafNewRow = aafLastRowMatrixOfCoefficient_Hb(1:iTotalNumberOfSamples+1-iSample);
	aafMatrixOfCoefficient_Hb =[ fliplr(aafNewRow)  zeros(	size(aafNewRow,1),...
								size(aafLastRowMatrixOfCoefficient_Hb,2)-size(aafNewRow,2)); aafMatrixOfCoefficient_Hb];
							
	aafNewRow = aafLastRowMatrixOfCoefficient_He(1:iTotalNumberOfSamples+1-iSample);
	aafMatrixOfCoefficient_He = [fliplr(aafNewRow)  zeros(	size(aafNewRow,1),...
								size(aafLastRowMatrixOfCoefficient_He,2)-size(aafNewRow,2)); aafMatrixOfCoefficient_He];
							
end
%
afH_LowerBound = zeros(size(aafMatrixOfCoefficient_Ha,1), 1) + LB_PERCENTAGE;
afH_UpperBound = zeros(size(aafMatrixOfCoefficient_Ha,1), 1) + UB_PERCENTAGE;
%
afC_LowerBound = zeros(size(aafMatrixOfCoefficient_Ca,1), 1) + LB_TSA;
afC_UpperBound = zeros(size(aafMatrixOfCoefficient_Ca,1), 1) + UB_TSA;
%
afDeltaU_LowerBound = zeros(size(aafMatrixOfCoefficient_Ca,1), 1) + LB_deltaU;
afDeltaU_UpperBound = zeros(size(aafMatrixOfCoefficient_Ca,1), 1) + UB_deltaU;
%
%
G	=	[	aafMatrixOfCoefficient_Hb													;
			-aafMatrixOfCoefficient_Hb													;
			aafMatrixOfCoefficient_Cb													;
			-aafMatrixOfCoefficient_Cb													;
			eye(size(aafMatrixOfCoefficient_Hb,1),size(aafMatrixOfCoefficient_Hb,1))	;
			-eye(size(aafMatrixOfCoefficient_Hb,1),size(aafMatrixOfCoefficient_Hb,1))	];
%
%
S	=	[	-aafMatrixOfCoefficient_Ha													;
			aafMatrixOfCoefficient_Ha													;
			-aafMatrixOfCoefficient_Ca													;
			aafMatrixOfCoefficient_Ca													;
			zeros(size(aafMatrixOfCoefficient_Ha,1),size(aafMatrixOfCoefficient_Ha,2))	;
			zeros(size(aafMatrixOfCoefficient_Ha,1),size(aafMatrixOfCoefficient_Ha,2))	];
%
%
W	=	[	- aafMatrixOfCoefficient_He * ones(size(aafMatrixOfCoefficient_He,1),1) + afH_UpperBound	;
			aafMatrixOfCoefficient_He * ones(size(aafMatrixOfCoefficient_He,1),1) - afH_LowerBound		;	
			- aafMatrixOfCoefficient_Ce * ones(size(aafMatrixOfCoefficient_Ce,1),1) + afC_UpperBound	;
			aafMatrixOfCoefficient_Ce * ones(size(aafMatrixOfCoefficient_Ce,1),1) - afC_LowerBound		;	
			afDeltaU_UpperBound																			;
			-afDeltaU_LowerBound																		];
%
%
%% Build the Cost Function Matrices
%
%
aafMatrixOfCoefficient_CeMinusR =	aafMatrixOfCoefficient_Ce * ones(size(aafMatrixOfCoefficient_Ce,1),1) - ...
									fReference * ones(size(aafMatrixOfCoefficient_Ce,1),1);
%
%
% Left	= G;
% Right	= S*afX0+W;
%
Omega	= 2 * ( afX0' * aafMatrixOfCoefficient_Ca' + aafMatrixOfCoefficient_CeMinusR' ) * aafMatrixOfCoefficient_Cb;
%
%
%
Phi		= aafMatrixOfCoefficient_Cb' * aafMatrixOfCoefficient_Cb + diag(theta); %* eye(size(aafMatrixOfCoefficient_Cb,1));
%
%
%%
	tOptions = cplexoptimset('cplex'); 
	
	[afOptimalX,fOptimum,exitflag,output,lambda] = cplexqp (	2*Phi,				...
													Omega',				...
													G ,					...
													S*afX0+W,			...
                                                    [],					...
                                                    [],					...
                                                    [],					...
                                                    [],					...
                                                    [],					...
                                                    tOptions );

% 	ops = sdpsettings('solver','quadprog','verbose',0);%'quadprog.diagnostics','on');
% 	du = sdpvar(size(aafMatrixOfCoefficient_Cb,1),1);
% 	F = set( G * du <= S*afX0+W );
% 	obj = Omega * du + du' * Phi * du;
% 	diagnostic = solvesdp(F,obj,ops);
% 	afOptimalX=double(du);
	
	if exitflag > 0
		%
		% compute the right values
		fAc = fAc_previous + afOptimalX(1);
		fAc = round( 10.* ( fAc ) )/10;
		%
		if fAc > 100
			fAc = 100;
		elseif fAc < 0
			fAc = 0;
		end
		%
	else%
		%
		Controller.ProcessCplexExitStatus(output.cplexstatus);
		%
		fAc = fAc_previous;
	end;%if
	%
end






