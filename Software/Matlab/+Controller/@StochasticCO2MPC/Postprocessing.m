% function tParameters = SetParameters( tController )
%
function Postprocessing( tController )
	%
	try %
		%
		%retriving the needed indexes
		%
		iAmountOfFreshAirNeededIndex		=	tController.tStatesSignalsIndexes.iAmountOfFreshAirNeeded;
		iLowerBoundOfFreshAirNeededIndex	=	tController.tStatesSignalsIndexes.iLowerBoundOfFreshAirNeeded;
		iForecastedOccupancyIndex			=	tController.tForecastsSignalsIndexes.iForecastedOccupancy;
		%
		%
		fCurrentJulianDate = Time.GetCurrentJulianDate();
		%
		tController.atStatesSignals(iAmountOfFreshAirNeededIndex).Insert(				...
				tController.afOptimizationProblemSolution(1), fCurrentJulianDate, true );
		%
		afInputOptimizationProblemSolution = tController.afOptimizationProblemSolution(1:tController.iPredictionHorizon);
		%
		%------------------------------------------------------------------
		% building the disturbances vector taking the mean of the scenatios
		%
% 		tController.tModel.afWW = round(mean(tController.aafOccupancyGeneratedScenarios,2));
		tController.tModel.afWW = max( tController.aafOccupancyGeneratedScenarios,[],2);
		%
		%------------------------------------------------------------------
		%
		%
		afStatesOverPredictionHorizon =		tController.tModel.aafAA * tController.tModel.afX0				...
										+	tController.tModel.aafAB * afInputOptimizationProblemSolution	...
										+	tController.tModel.aafAE * tController.tModel.afWW; 
		%
		%allocating space
		tController.afRequestedMassFlowOverPredictionHorizon	=		zeros(tController.iPredictionHorizon, 1);
		%
		tController.afRequestedMassFlowOverPredictionHorizon(1)	=		tController.afOptimizationProblemSolution(1) ...
																	/	tController.tModel.afX0;
		%
		% sottrazione
		for iTimeStep = 2 : tController.iPredictionHorizon
			%
			tController.afRequestedMassFlowOverPredictionHorizon(iTimeStep)	=		...	
							tController.afOptimizationProblemSolution(iTimeStep)	...
							/	afStatesOverPredictionHorizon(iTimeStep - 1);
			%
		end;% end for
		%
		for iTimeStep = 1 : numel(tController.afRequestedMassFlowOverPredictionHorizon)
			%
			if (		tController.afRequestedMassFlowOverPredictionHorizon(iTimeStep)		...
					>	tController.tInputsBounds.AirMassFlow.fUpperBound 		)
				%
						tController.afRequestedMassFlowOverPredictionHorizon(iTimeStep)		...
					=	tController.tInputsBounds.AirMassFlow.fUpperBound		;
				%
			elseif (	tController.afRequestedMassFlowOverPredictionHorizon(iTimeStep)		...
					<	tController.tInputsBounds.AirMassFlow.fLowerBound 		)
				%
						tController.afRequestedMassFlowOverPredictionHorizon(iTimeStep)		...
					=	tController.tInputsBounds.AirMassFlow.fLowerBound		;
				%
			end%;
			%
		end;%
		%
		tController.atStatesSignals(iLowerBoundOfFreshAirNeededIndex).Insert(		...
				tController.afRequestedMassFlowOverPredictionHorizon(1) , fCurrentJulianDate, true )
		%
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('The requested lower bound for the CO2 optimization problem is %4.2f\n',tController.afRequestedMassFlowOverPredictionHorizon(1) );
			%
		end;%
		%
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems setting in the post processing phase.');
		%
	end;% end catch
	%
end % end function