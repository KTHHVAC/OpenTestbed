function SetDisturbances( tController )
	% get the initial condition for the optimization problem from the server. 
	% In thiss simple version these are set to see if the optimization
	% problem is solved correctly.
	%
	try %
		%
		%------------------------------------------------------------------
		% preliminary operations
		%
		tDevicesIDs							= Signal.GetDevicesIDs();
		tSignalsIDs							= Signal.GetSignalsIDs();
		fCurrentJulianDate					= Time.GetCurrentJulianDate();
		%
		%------------------------------------------------------------------
		% retriving the needed indexes 
		iForecastedOccupancyIndex	=										...
				Signal.FindSignalIndex(										...
							tController.atForecastsSignals,					...
							tSignalsIDs.iForecastedOccupancy8h,				...
							tDevicesIDs.iA225LocalLookUpTableForecast	);
		%
		iCurrentOccupancyIndex		=										...
				Signal.FindSignalIndex(										...
							tController.atMeasurementsSignals,				...
							tSignalsIDs.iOccupancy,							...
							tDevicesIDs.iManualPeopleCounter				);
		%
		%------------------------------------------------------------------
		% setting the sampling time vector
		%
		fSamplingTimeInJulianDates =	Time.GetJulianSecond() * tController.fSamplingTimeInSeconds;
		%
		afTimesNeededForTheForecastedOccupancy =																...
				[		fCurrentJulianDate + fSamplingTimeInJulianDates											...
					:	fSamplingTimeInJulianDates																...
					:	fCurrentJulianDate + fSamplingTimeInJulianDates * ( tController.iPredictionHorizon - 1)	]';
		%
		%------------------------------------------------------------------
		% building the scenario matrix
		%
		aafOccupancyGeneratedScenarios = zeros( tController.iPredictionHorizon, tController.iNumberOfScenarios );
		%
		%
		afHourlyForecastedOccupancy			= tController.atForecastsSignals(iForecastedOccupancyIndex).afValues;
		afHourlyForecastedOccupancyTimes	= tController.atForecastsSignals(iForecastedOccupancyIndex).afTimes;
		%
		iCurrentOccupancy	= tController.atMeasurementsSignals(iCurrentOccupancyIndex).ExtractSamplesAt(fCurrentJulianDate);
		%
		for iScenario = 1 : numel( tController.aafOccupancyScenarios(: , 1) )
			%
% 			aiSingleOccupancyScenario	= afHourlyForecastedOccupancy + tCO2Controller.aafOccupancyScenarios(iScenario , :);
			aiSingleOccupancyScenario	= tController.aafOccupancyScenarios( iScenario , :);
			tController.atForecastsSignals(iForecastedOccupancyIndex).RemoveSamplesFrom( fCurrentJulianDate );
			tController.atForecastsSignals(iForecastedOccupancyIndex).Insert(	aiSingleOccupancyScenario ,			...
																				afHourlyForecastedOccupancyTimes,	...
																				true								);
			afSampledOccupancyForecasts																				...
				= tController.atForecastsSignals(iForecastedOccupancyIndex).ExtractSamplesAt(						...
								afTimesNeededForTheForecastedOccupancy,true);
			aafOccupancyGeneratedScenarios( : , iScenario ) = [ iCurrentOccupancy ; afSampledOccupancyForecasts ];
			%
		end;%
			
		aafOccupancyGeneratedScenarios
		%
		tController.tModel.afWW = xxxx
		%
		% % For more disturbances do:
		% %		tController.tModel.afWW = [ atDistubance1' ; atDistubance2' ];
		% %		tController.tModel.afWW = tController.tModel.afWW(:);
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems setting the disturbances vector for the optimization problem');
		%
	end;% end catch
	%
end %