function SetSoftConstraints( tController )
	%
	aafLConstrCoef = tController.tConstraints.aafLeftConstrCoef;
	afRConstrCoef = tController.tConstraints.afRightConstrCoef;

	%Soft constraints
 	%Checks for soft constraints and then augments the soft constraints to
 	%the previous ones
	if tController.bUseSoftConstraints == true
		%Left Side
		%
		aafLConstrCoef{1, 1} =   [aafLConstrCoef{1, 1} - eye(tController.iPredictionHorizon*tController.tModel.iNy)];
		%
		%
		if tController.ControlledVariable == Controller.Variables.Temperature
			%
			aafLConstrCoef{2, 1} =																	...
				[																					...
				aafLConstrCoef{2, 1} - eye(tController.iPredictionHorizon*tController.tModel.iNy);	...
				zeros(	tController.iPredictionHorizon*tController.tModel.iNy ,						...
						tController.iPredictionHorizon*tController.tModel.iNu)						...
				- eye( tController.iPredictionHorizon*tController.tModel.iNy)						...
				];
			%
			%
		elseif tController.ControlledVariable == Controller.Variables.CO2
			%
			aafLConstrCoef{2, 1} =																	...
				[																					...
				aafLConstrCoef{2, 1} zeros(tController.iPredictionHorizon*tController.tModel.iNy);	...
				zeros(	tController.iPredictionHorizon*tController.tModel.iNy ,						...
						tController.iPredictionHorizon*tController.tModel.iNu)						...
				-eye(	tController.iPredictionHorizon*tController.tModel.iNy)						...
				];
			%
		end%%
		%
		%
		aafLConstrCoef{3, 1} = [aafLConstrCoef{3, 1} zeros(tController.iPredictionHorizon*tController.tModel.iNu,tController.iPredictionHorizon*tController.tModel.iNy)];
		aafLConstrCoef{4, 1} = [aafLConstrCoef{4, 1} zeros(tController.iPredictionHorizon*tController.tModel.iNu,tController.iPredictionHorizon*tController.tModel.iNy)];

		aafLConstrCoef{5, 1} = [aafLConstrCoef{5, 1} zeros(size(aafLConstrCoef{5,1},1),tController.iPredictionHorizon*tController.tModel.iNy)];
		aafLConstrCoef{6, 1} = [aafLConstrCoef{6, 1} zeros(size(aafLConstrCoef{5,1},1),tController.iPredictionHorizon*tController.tModel.iNy)];
		%Right side
		%
		afRConstrCoef{2, 1} =												...									 
			[ afRConstrCoef{2, 1};														... 
			zeros( tController.iPredictionHorizon*tController.tModel.iNy, 1)]; % We augment the previous constraint
	end
	%
	
	aafLConstrCoef	= cell2mat(aafLConstrCoef);
	afRConstrCoef	= cell2mat(afRConstrCoef);
		
	tController.tConstraints.aafLeftConstrCoef = aafLConstrCoef;
	tController.tConstraints.afRightConstrCoef = afRConstrCoef;
	%
end