% Given the expression for the model X = Sx*Xo + Su*U + Se*W,
% matrixes Sx, Su and Se are generated (predicted) with the Batch Approach.
% This is, using the expression:
% Xn = A^N·X(0) + sum((A^N-1-i)·Bu(i)) + sum((A^N-1-i)·Ew(i))
function ModelGenerateConstantsBatch( tController )
    %===============================================================================
    % Authors:   Ferran Montes, KTH, Royal Institute of Technology
    % (26-02-2013: first implementation)
    %===============================================================================

    try

		aafSu = cell(tController.iPredictionHorizon, tController.iPredictionHorizon);
		for i = 1 : tController.iPredictionHorizon
			for j = 1 : tController.iPredictionHorizon
				aafSu{i, j} = cell (tController.tModel.iNx, tController.tModel.iNu);
			end
		end
		aafSe = cell(tController.iPredictionHorizon, tController.iPredictionHorizon);
		for i = 1 : tController.iPredictionHorizon
			for j = 1 : tController.iPredictionHorizon
				aafSe{i, j} = cell (tController.tModel.iNx, tController.tModel.iNw);
			end
		end

		% reference row and column
		row    = tController.iPredictionHorizon;
		column = 1;

        % Fill Sx
        for i=1:tController.iPredictionHorizon
            tController.tModel.aafSx{i, 1} = tController.tModel.aafA ^ (i);
        end

        % Initialize Su and Se
        for i=1:tController.iPredictionHorizon
            for j=1:tController.iPredictionHorizon
                aafSu{i, j} = zeros(tController.tModel.iNx, tController.tModel.iNu);
                aafSe{i, j} = zeros(tController.tModel.iNx, tController.tModel.iNw);
            end
        end
        % summatory. Fisrt row = 0
		for i=1:tController.iPredictionHorizon

            valueSu = (tController.tModel.aafA ^ (tController.iPredictionHorizon - 1 - (i - 1))) * tController.tModel.aafB;
            valueSe = (tController.tModel.aafA ^ (tController.iPredictionHorizon-1 - (i - 1))) * tController.tModel.aafE;
            % how many times I save the same value (j)
            for j=1:i
                % Su matrix
                aafSu{row + (j - 1), column + (j - 1)} = valueSu;
                aafSe{row + (j - 1), column + (j - 1)} = valueSe;
            end
            % refresh reference row
            row = row - 1;
		end
		tController.tModel.aafSu = aafSu;
		tController.tModel.aafSe = aafSe;


        % Fill Sc and Sh;
		for i=1:tController.iPredictionHorizon
			for j=1:tController.iPredictionHorizon
				tController.tModel.aafSc{i, j} = tController.tModel.aafC;
				%tController.tModel.aafSh{i, j} = tController.tModel.aafH;
			end
		end

		
		if tController.ControlledVariable == Controller.Variables.Temperature
			for i = 1 : tController.iPredictionHorizon
				tController.tModel.aafSx{i, 1} = tController.tModel.aafSc{i, 1} * tController.tModel.aafSx{i, 1};
				%tController.tModel.aafSh{i, 1} = tController.tModel.aafSh{i, 1} * tController.tModel.aafSx{i, 1};
				for j = 1 : tController.iPredictionHorizon
					tController.tModel.aafSu{i, j} = tController.tModel.aafSc{i, j} * tController.tModel.aafSu{i, j};
					tController.tModel.aafSe{i, j} = tController.tModel.aafSc{i, j} * tController.tModel.aafSe{i, j};
				end
			end
		end
		
    catch exception
        tController.AddError( strcat('MPControler.ModelGenerateConstantsBatch: ', exception.message ) );

    end
end