classdef MPController < Controller.Controller

    %===============================================================================
    % Authors:   Ferran Montes, KTH, Royal Institute of Technology
    % (25-02-2013: first implementation)
    %===============================================================================

    properties(GetAccess = 'public', SetAccess = 'public')
		
		strSolver;
		strConstraintsType;
        afTemperatureForecasts;
		afRadiationForecasts;
		afOccupancyForecasts;
		afForecastsJulianDates;
		tModel;
        % iNx;				% Number of model states.
        % iNu;				% Number of actuators.
        % iNw;				% Number of disturbances.
        % iSample;			% Sample time for the discrete model.
        % aafA;				% Dynamic Matrix multiplying the system variables at time t.
        % aafB;				% Input Matrix multilying the actuator variables at time t.
        % aafE;				% Disturbance Matrix multilying the actuator variables at time t.
        % aafC;				% Output Matrix multilying the actuator variables at time t.
		% aafH;				% State Matrix multilying the state variables at time t.
        % aafSx;			% Cell containing the system constants at time t.
        % aafSu;			% Cell containing the actuator constants at time t.
        % aafSe;			% Cell containing the disturbance constants at time t.
        % aafSc;			% Cell containing the output constants at time t.
		% aafSh;			% Cell containing the state constants at time t.
		% afW;				% [w]=transpose([Tamb,I1,Npeople])
		% tActuationBounds	% Bounds on the actions.
		% tComfortBounds	% Bounds on the plant output.
        % FirstLBUC         % Lower bound of the UC from the CO2 mpc.
        % FirstLBUH         % Lower bound of the UH from the CO2 mpc.
		afX0;
        fRoomCO2;
        fAirInletCO2;
        fAirInletTemperature; % Tai
		tConstraints;
        tCO2Bounds;
		% aafLeftConstrCoef;  % (m x n)Linear constraints coeficients, left side.
        % afRightConstrCoef;  % (m x 1)Linear constraints coeficients, right side.
        % aiEqConstrIndex;    % Indexes of the equality constraints.
		% aiStateCnstrIndex;  % Indexes of the state constraints.

		tCost;
		% aafQuadFunctCoef;   % (n x n)Quadratic cost function coeficients.
        % afCoefficientsOfLinearCostFunction;     % (n x 1)Linear cost function coeficients.
		% afLowerBound;       % (n x 1)Variables lower bounds.
        % afUpperBound;       % (n x 1)Variables upper bounds.
		% achCPLEXVarType;    % (n x 1)Variable type.

	    tSolverSettings;	%Settings realted to the solver used
		% Using CPLEX
		% tCPLEXParameters;     % User specified CPLEX parameters.
		% tCPLEXOptions;		% User specified, advanced, CPLEX parameters.            
        
		tSolver;
		% afXmin;           % Optimizer if OK, (n x 1) vector otherwise.               
        % fFmin;            % Optimum if OK, 0 otherwise. 
        % iSolstat;         % CPLEX result code.            
        % strDetails;       % CPLEX result string.
		fWeightSlackVariable;
 		fRiskLevelAlpha;
 		fUnreliabilityBeta;
		
		bUseSoftConstraints;
 		bUseScenarios;
		
		tData;
	end
	%
	%
	% ---------------------------------------------------------------------
	methods
		%
		function tController = MPController( tControlSettings, tConnection ) % TODO understand why tConnection is not used
			%
			tController = tController@Controller.Controller( tControlSettings );
			%
			tController.strSolver						= tControlSettings.strSolver;
			tController.strConstraintsType				= tControlSettings.strConstraintsType;
			tController.tModel.tActuationBounds			= tControlSettings.tActuationBounds;
			tController.tModel.tComfortBounds			= tControlSettings.tComfortBounds;
			tController.fWeightSlackVariable			= tControlSettings.fWeightSlackVariable;
 			tController.fRiskLevelAlpha					= tControlSettings.fRiskLevelAlpha;
 			tController.fUnreliabilityBeta				= tControlSettings.fUnreliabilityBeta;
			%
			tController.bUseScenarios 					= tControlSettings.bUseScenarios;
			tController.bUseSoftConstraints				= tControlSettings.bUseSoftConstraints;
			%
			tController.ModelInit( );
			try
				%
                if tController.ControlledVariable == Controller.Variables.Temperature                  
                    tController.ModelDiscretize( );
                end
                %
			catch exception
				tController.AddError(strcat('MPController: ', exception.message));
			end
			%
			%
		end;% default constructor
		%
	end %
	%
end % classdef

