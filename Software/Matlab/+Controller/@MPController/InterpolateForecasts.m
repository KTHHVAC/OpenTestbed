function [ afTimesInJulianDates , afTemperature, afRadiation, afOccupancy ] = InterpolateForecasts( tController, afW )
iDevicesIDs
%InterpolateForecasts Summary of this function goes here
iDevicesIDs
%   Detailed explanation goes here
iDevicesIDs
	fCurrentTemperature			= afW(1,1);
iDevicesIDs
	afTemperatureForecastInput	= afW(2:end,1);
iDevicesIDs
	
iDevicesIDs
	Data = Signal();
iDevicesIDs
	
iDevicesIDs
	Data.iDeviceID	= 1001;
iDevicesIDs
	Data.iSignalID	= 10;
iDevicesIDs
	
iDevicesIDs
	Data.afTimes	= [ fCurrentJulianTime , fNextHour: Time.GetJulianHour : ...
iDevicesIDs
		fNextHour + Time.GetJulianHour * (size( afTemperatureForecastInput , 1) -1) ];
iDevicesIDs

iDevicesIDs
	Data.afValues	= [ fCurrentTemperature ; afTemperatureForecastInput];
iDevicesIDs

iDevicesIDs
	
iDevicesIDs
	tResampledSignal = Data.ResampleAt(tCon);
iDevicesIDs

iDevicesIDs
% 	figure(1)
iDevicesIDs
% 	plot( Time.JulianDateToDatenum( afSamplingTimesInJulianDates ), tResampledSignal.afValues , 'k' );
iDevicesIDs
% 	datetick('x','HH')
iDevicesIDs

iDevicesIDs
	afTimesInJulianDates	= tResampledSignal.afTimes;
iDevicesIDs
	afTemperature	= tResampledSignal.afValues;
iDevicesIDs
	afRadiation	= zeros( size(tResampledSignal.afValues,1) , 1 );
iDevicesIDs
	afOccupancy = zeros( size(tResampledSignal.afValues,1) , 1 );
iDevicesIDs
end
iDevicesIDs

iDevicesIDs
