function GetWorstCaseScenario( tController )
	%
	length = tController.iPredictionHorizon;
	maximum = zeros(length, 1);
	minimum = zeros(length, 1);
	aafGe = zeros(length,tController.iNumberOfScenarios);
	for iIndex = 1:tController.iNumberOfScenarios
		%
		switch tController.ControlledVariable
			%
			case Controller.Variables.Temperature
				%
				tController.ReshapeForecasts();
				afTemperatureForecasts	= tController.afTemperatureForecasts +	...
						tController.aafGeneratedTemperature( iIndex, : )';
				afRadiationForecasts		= tController.afRadiationForecasts();
				aiOccupancyForecasts		= tController.aafGeneratedOccupancy(iIndex,:)';
				%

				afW = [afTemperatureForecasts afRadiationForecasts aiOccupancyForecasts]';

				afW = afW(:);
				%
				aafGe(1:length,iIndex) = cell2mat(tController.tModel.aafSe)*afW;
				%
				%
			case Controller.Variables.CO2
				%
				aiOccupancyForecasts		= tController.aafGeneratedOccupancy';
				afW							= aiOccupancyForecasts(:,iIndex);
				aafGe(:,iIndex)				= cell2mat(tController.tModel.aafSe)*afW;
				%
				%
			otherwise
				%
				tController.addError( 'MPController.ConstraintsSetInequality: Controlled variable not supported' );
				%
		end%TODO: this end is put only to check if forgotten
		%
	end

	for jIndex = 1:length
		%
		maximum(jIndex) = max( aafGe(jIndex,:) );
		minimum(jIndex) = min( aafGe(jIndex,:) );
		%
	end
	%
	tController.tModel.aafGeMax = maximum;
	tController.tModel.aafGeMin = minimum;
	%
end