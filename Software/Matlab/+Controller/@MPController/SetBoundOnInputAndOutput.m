function SetBoundOnInputAndOutput( tController )
	%
	switch tController.ControlledVariable
		case Controller.Variables.Temperature
			% Bounds for Temperature controller
			aiDate = fix(clock);%TODO: according to Npeople
			% as alternative use measuerements of the same day last
			% week
			if (aiDate(4) < tController.tModel.tComfortBounds.NightStartAt)
				tController.tModel.fUBy= tController.tModel.tComfortBounds.TemperatureDayMax;
				tController.tModel.fLBy = tController.tModel.tComfortBounds.TemperatureDayMin;
			else
				tController.tModel.fUBy= tController.tModel.tComfortBounds.TemperatureNightMax;
				tController.tModel.fLBy = tController.tModel.tComfortBounds.TemperatureNightMin;
			end

			%Bounds for the output
			tController.tModel.fUBu =										...
				[	tController.tModel.tActuationBounds.HeatingPowerMax;	...
					tController.tModel.tActuationBounds.CoolingPowerMax;	...
					tController.tModel.tActuationBounds.ThermalPowerMax];
			%
			tController.tModel.fLBu =										...
				[	tController.tModel.tActuationBounds.HeatingPowerMin;	...
					tController.tModel.tActuationBounds.CoolingPowerMin;	...
					tController.tModel.tActuationBounds.ThermalPowerMin];

		case Controller.Variables.CO2
			% Bounds for CO2 controller, we use the deltaCO2 in the model.
			tController.tModel.fUBy = tController.tModel.tComfortBounds.deltaCO2Max;
			tController.tModel.fLBy = tController.tModel.tComfortBounds.deltaCO2Min;

			% TODO: Implement upper and lower bounds switching
			tController.tModel.fUBu = repmat(tController.tModel.tActuationBounds.VentilationMax, [tController.tModel.iNu, 1]);
			tController.tModel.fLBu = repmat(tController.tModel.tActuationBounds.VentilationMin, [tController.tModel.iNu, 1]);

		otherwise
			tController.addError( 'MPController.ConstraintsSetInequality: Controlled variable not supported' );
		%
	end
	%
end