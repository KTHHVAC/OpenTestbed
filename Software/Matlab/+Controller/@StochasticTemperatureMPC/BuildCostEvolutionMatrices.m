% Prepare  cost matrices over the prediction orizon for deterministic MPC.
%
% function [	afExtendedLinearCostMatrixInput,				...
%				aafExtendedQuadraticCostMatrixInput   ] =	...
%					BuildCostEvolutionMatrices(			...
%						afLinearCostMatrix,				...
%						aafQuadraticCostMatrix,			...
%						tController.iPredictionHorizon					)
%
function BuildCostEvolutionMatrices( tController )
	%
	try %
		%
		iNumberOfOutput             = size(tController.tModel.aafC, 1); % number of outputs
		iNumberOfInput              = size(tController.tModel.aafB, 2); % number of inputs
        iNumberOfSoftedConstraints  = size(tController.tModel.aafC, 1);
		% Linear Contribution costruction 
		%
		%
		% Allocating space for afExtendedLinearCostMatrixInput
		afExtendedLinearCostMatrixInput =									...
				zeros(	1 , tController.iPredictionHorizon*iNumberOfInput);		
		%
		%
			%
			for iTimeStep = 1: tController.iPredictionHorizon
				%
				afExtendedLinearCostMatrixInput (:, (iTimeStep-1)*iNumberOfInput + 1:(iTimeStep)*iNumberOfInput)	...
												=																	...
													tController.afLinearCostFunctionMatrix(:,:,iTimeStep);
				%
			end;% end for, building afExtendedLinearCostMatrixInput for the variant case
		%
		% Soft constraints
		%
		afExtendedLinearCostMatrixSoftComfort =		tController.afRhoSoftConstraintsWeight                              	...		
													*	ones(1,         (iNumberOfOutput)		...
                                                                    *	tController.iPredictionHorizon);
        afExtendedLinearCostMatrixSoftConstraints =		tController.afRhoSoftConstraintsWeight                              	...		
													*	ones(1,         (+iNumberOfSoftedConstraints)		...
                                                                    *	tController.iPredictionHorizon);
		%
		%------------------------------------------------------------------
		% Merging the two matricies
		%
		tController.afExtendedLinearCostMatrix = [		afExtendedLinearCostMatrixInput,				...
														afExtendedLinearCostMatrixSoftComfort,afExtendedLinearCostMatrixSoftConstraints];		
		%
	catch exception
		%
		disp(exception.message)
		warning('Problems buildings the cost evolution matrices')
		%
	end;% end catch
	%
end % end function
