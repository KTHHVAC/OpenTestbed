% function SetConstraints( tController, tParameters )
%
function SetConstraints( tController )
	% Setting the actuation and comfort constraints to pass for the system
	% dynamic
	%
	try %
		%
		%
		fCurrentJulianDate					= Time.GetCurrentJulianDate();
		%
		% get the number of inputs and outputs
		%
		iNumberOfOutputs		= size( tController.tModel.aafC, 1 );
        iNumberOfInputs         = size( tController.tModel.aafB, 2 );
		%------------------------------------------------------------------
		%retriving the needed indexes
		%
		fTemperatureOfTheAirInlet	= tController.atMeasurementsSignals(tController.tMeasurementsSignalsIndexes.iTemperatureOfFreshAirInlet).ExtractSamplesAt(fCurrentJulianDate);
		%
		%------------------------------------------------------------------
		%
		tController.tInputsBounds.fMinCoolingTemperature = 0.32 * 16.5 + 0.68 * fTemperatureOfTheAirInlet;
		tController.tInputsBounds.fMaxHeatingTemperature = fTemperatureOfTheAirInlet;
		%
		tController.tInputsBounds.afInputsLowerBounds = ...
			[																...	
			tController.tInputsBounds.DeltaTh.fLowerBound ;					...
			tController.tInputsBounds.DeltaTc.fLowerBound ;					...
			tController.tInputsBounds.AdditionalHeating.fLowerBound ;		...
			tController.tInputsBounds.AdditionalCooling.fLowerBound ;		...
			tController.tInputsBounds.DeltaTrad.fLowerBound ;				...
			];
		%
		tController.tInputsBounds.afInputsUpperBounds =					...
			[															...	
			tController.tInputsBounds.DeltaTh.fUpperBound ;				...
			tController.tInputsBounds.DeltaTc.fUpperBound ;				...
			0 ;															...
			0 ;															...
			tController.tInputsBounds.DeltaTrad.fUpperBound ;			...
			0;															...
			0
			];
	% Initializing output vector constraints over prediction horizon
		%
		tController.tModel.aafBy = zeros(2*iNumberOfOutputs, tController.iPredictionHorizon);
		%
		% Setting output vector constraints over prediction horizon
		iInitialHour	= 7; %%% TO DO: move it in the parameters
		iFinalHour		= 19;	
		%
		for iStepTime = 1: tController.iPredictionHorizon
			%
			%
			if ( Time.IsBetweenHours( fCurrentJulianDate, iInitialHour, iFinalHour)) 
				%
				tController.tModel.aafBy(:, iStepTime) =		[ -		tController.tOutputsBounds.Temperature.fLowerBoundDay;		...
																		tController.tOutputsBounds.Temperature.fUpperBoundDay		...
																 ];
				%
			else
				tController.tModel.aafBy(:, iStepTime) =		[ -		tController.tOutputsBounds.Temperature.fLowerBoundNight,	...
																		tController.tOutputsBounds.Temperature.fUpperBoundNight		...
																 ];
				%
			end;%end if
				%
			fSamplingTimeInJulianDates	=	Time.GetJulianSecond() * tController.fSamplingTimeInSeconds;
			fCurrentJulianDate			=	fCurrentJulianDate + fSamplingTimeInJulianDates;
			%
		end;%end for
		%
		%
		fCurrentJulianDate					= Time.GetCurrentJulianDate();
		% initializing equality constraints matrix on inputs over prediction horizon
		%
		tController.tModel.aaafLe = zeros	(	iNumberOfInputs ,					...
												iNumberOfInputs ,					...
												tController.iPredictionHorizon		...
											);
		%
		% initializing right side of mixed constraints over prediction
		% horizon
		tController.tModel.aafR = zeros(	2 *	iNumberOfOutputs ,					...
												tController.iPredictionHorizon		...
											);
		% setting equality constraints matrices on inputs over prediction horizon
		%
		iInitialHour	= 7; %%% TO DO: move it in the parameters
		iFinalHour		= 16;	
		%
		for iStepTime = 1: tController.iPredictionHorizon
			%
			%
			if ( Time.IsBetweenHours( fCurrentJulianDate, iInitialHour, iFinalHour)) 
				%
				tController.tModel.aaafLe(:,:, iStepTime)	=	zeros(iNumberOfInputs);
				tController.tModel.aafR(:,iStepTime)		=	[	-	tController.tInputsBounds.fMinCoolingTemperature;		...
																		tController.tInputsBounds.fMaxHeatingTemperature	];  
				%
			else
				tController.tModel.aaafLe(:,:, iStepTime) =	diag([1,1,1,1,0],0);
				tController.tModel.aafR(:,iStepTime)		=	[	0;				...
																	1000	];  
				%
			end;%end if
				%
			fSamplingTimeInJulianDates	=	Time.GetJulianSecond() * tController.fSamplingTimeInSeconds;
			fCurrentJulianDate			=	fCurrentJulianDate + fSamplingTimeInJulianDates;
			%
		end;%end for
		%
		tController.tModel.afRe	= zeros	(		iNumberOfInputs					...   % Right side of equality matrix
											*	tController.iPredictionHorizon, 1);	
		%
		%
		% setting Gu 
		for iStepTime = 1 : tController.iPredictionHorizon
			%
			fDeltaAirMass = tController.tInputsBounds.AirMassFlow.fUpperBound	-	tController.afLowerBoundForTheVentilation(iStepTime);
			aafSumContribution =	[		 0				 0				 0		 0		0;	...
											 0				 0				 0		 0		0;	...
										-fDeltaAirMass	 fDeltaAirMass		 0		-1		0;	...
										 fDeltaAirMass	-fDeltaAirMass		-1		 0		0;	...
											 0				 0				 0		 0		0	...
									];
									
			tController.tModel.aaafGu(:,:,iStepTime) =	[	-	eye( size(tController.tModel.aafB,2 ) )						;	...
																eye( size(tController.tModel.aafB,2 ) )							...
															+	aafSumContribution											;	...
 																-fDeltaAirMass		0				1		0		0		;	...
 																0				-fDeltaAirMass		0		1		0			...	
														];
		end
		%
		tController.tModel.aafGxMixed = [		tController.tModel.aafC;	...
											-	tController.tModel.aafC ];
		%
		tController.tModel.aafGeMixed =										...
			repmat([1;1],[1,1,tController.iPredictionHorizon]); % set in this way to conform to abstract BuildConstraintsMatrices
		%								
		tController.tModel.aafGuMixed = [	-1	 1	0	0	0	;			...
											1	-1	0	0	0				...
										];  
		%
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems setting the constraints.')
		%
	end;% end catch
	%
end %



