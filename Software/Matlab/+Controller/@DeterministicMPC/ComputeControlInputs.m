function ComputeControlInputs( tController )
	%Setting all the matrices of the linear time inveriant discrete model
	%
	try %
		%
		tController.SetLinearModelMatrices();
		tController.SetCostParameters();
		tController.SetConstraints();
		tController.SetInitialConditions();
		tController.SetDisturbances();
		%
		%
		tController.BuildModelEvolutionMatrices();
		%
		tController.BuildConstraintsEvolutionMatrices( );
		%
		[	aafLeftSideInequalityOptimizationProblem,													...
			afRightSideInequalityOptimizationProblem		]											...
				= tController.GetInequalityLeftAndRightSidesSoftAndMixedConstraints();	
		%
		[	aafLeftSideEqualityOptimizationProblem,													...
			afRightSideEqualityOptimizationProblem		]											...
				= tController.GetEqualityLeftAndRightSides();		
		%
		tController.BuildCostEvolutionMatrices();
		%
		[	tController.afOptimizationProblemSolution,					...
			tController.fCostFunctionOptimalValue,						...
			tController.iSolverStatus					]				...
				= tController.SolveOptimizationProblem(					...
					tController.afExtendedLinearCostMatrix,				...
					tController.aafExtendedQuadraticCostMatrix,			...
					aafLeftSideInequalityOptimizationProblem,			...
					afRightSideInequalityOptimizationProblem,			...
					aafLeftSideEqualityOptimizationProblem,				...
					afRightSideEqualityOptimizationProblem				...
				);
		%
		tController.Postprocessing();
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems computing the control inputs.');
		%
	end;% end catch		
	%
end % end function