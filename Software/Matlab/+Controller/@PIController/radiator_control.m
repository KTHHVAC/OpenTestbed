function u_t = radiator_control(tController,y_vec,r_t,a,b)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% u_t = radiator_control(y_vec,r_t,a,b) returns the valve opening 
% percentage u_t (between 0-100%), based on the vector of measured
% temperatures y_vec (in C), the desired temperature r_t (in C), and the
% coefficients a, b in the PI transfer function
% 
% C_pi[z] = (a*z+b)/(z-1),
%
% Last update: May 30, 2014.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Authors:
% Afrooz Ebadat
% Niklas Everitt
% Patricio Valenzuela
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

persistent u_t_1 e_t_1;
if isempty(u_t_1) || isnan(u_t_1)
   u_t_1 = 0;
end
if isempty(e_t_1) || isnan(e_t_1)
   e_t_1 = 0;
end

% Obtaining the mean value for the temperature
y_t = mean(y_vec);

% Control
e_t = r_t -y_t;
u_t = a*e_t + b*e_t_1 + u_t_1;

% anti-windup
if u_t > 100 || u_t < 0
    u_t =  a*e_t + b*e_t_1;
    u_t = max(min(u_t,100),0);
end

% truncation
u_t = round(u_t*10)/10;

% save 
u_t_1 = u_t;
e_t_1 = e_t;
end