% Compute the inputs over the prediction horizon
%
% ALGORITHM
% - 
%
function ComputeControlInputs( tController )
	%
	%
	try %
		if( tController.bPrintDebugInformation )
			%
			fprintf('Entering ComputeControlInputs()\n');
			%
		end;%
		%
		%------------------------------------------------------------------
		%Initialization
		%
		TEMPERATURE_REFERENCE				= tController.fTemperatureReference;
		KP									= tController.fProportionalConstant;
		KI									= tController.fIntegralConstant;
		KD									= tController.fDerivativeConstant;
		SAT									= tController.fValueToDesaturateTheIntegralAction;
		%
		tDevicesIDs							= Signal.GetDevicesIDs();
		tSignalsIDs							= Signal.GetSignalsIDs();
		fCurrentJulianDate					= Time.GetCurrentJulianDate();
		%
		%
		%------------------------------------------------------------------
		%index research
		iTemperatureOfTheRoomIndex	= Signal.FindSignalIndex(	tController.atMeasurementsSignals ,						...
																tSignalsIDs.iTemperatureOfEnvironment ,					...
																tDevicesIDs.iMote1043);
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		%
		%													
		%													
		iTemperatureErrorIndex			= Signal.FindSignalIndex(	tController.atStatesSignals ,							...
																	tSignalsIDs.fTemperatureError ,							...
																	tDevicesIDs.iGenericPIDController);
		iTemperatureErrorIntegratorIndex = Signal.FindSignalIndex(	tController.atStatesSignals ,						...
																	tSignalsIDs.fIntegrationOfTheTemperatureError ,			...
																	tDevicesIDs.iGenericPIDController);													
		%
		%
		% -----------------------------------------------------------------
		% Computation of the commands
		%
		fTemperatureOfTheRoom		= tController.atMeasurementsSignals(iTemperatureOfTheRoomIndex).ExtractSamplesAt(fCurrentJulianDate);
		%
		fTemperatureError			= TEMPERATURE_REFERENCE - fTemperatureOfTheRoom;
		%
		fActuationCommand	=		KP * fTemperatureError											...
								+	KI * tController.fIntegrationOfTheTemperatureError				...
								+	KD * ( fTemperatureError * tController.fLastTemperatureError )	;
		%
		%--------------------------------------------------------------------------------------------------------------
		%--------------------------------------------------------------------------------------------------------------
		%
		%
		disp(fActuationCommand);
		%
		if ( fActuationCommand >= 0 )
			%
			if ( fActuationCommand > tController.tInputsBounds.fUpperBound )
				%
				fActuationCommand = tController.tInputsBounds.fUpperBound;
				%
			elseif ( fActuationCommand < tController.tInputsBounds.fLowerBound )
				%
				fActuationCommand = tController.tInputsBounds.fLowerBound;
				%
			end;% end bounding the input command
			%
			fActuationCommand = ceil( 10 * fActuationCommand ) / 10;
			%
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fActuationCommand,	fCurrentJulianDate, true );
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fActuationCommand,	fCurrentJulianDate, true );
			tController.atActuationsSignals(iACValveIndex).Insert(					0,					fCurrentJulianDate, true );
			%
			if ( tController.bUseRadiators )
				%
				tController.atActuationsSignals(iRadiatorValveIndex).Insert(		fActuationCommand,	fCurrentJulianDate, true );
				%
			else%
				%
				tController.atActuationsSignals(iRadiatorValveIndex).Insert(		0,					fCurrentJulianDate, true );
				%
			end;%
			%
		else%
			%
			fActuationCommand = - fActuationCommand;
			%
			if ( fActuationCommand > tController.tInputsBounds.fUpperBound )
				%
				fActuationCommand = tController.tInputsBounds.fUpperBound;
				%
			elseif ( fActuationCommand < tController.tInputsBounds.fLowerBound )
				%
				fActuationCommand = tController.tInputsBounds.fLowerBound;
				%
			end;% end bounding the input command
			%
			fActuationCommand = ceil( 10 * fActuationCommand ) / 10;
			%
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fActuationCommand,	fCurrentJulianDate, true )
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fActuationCommand,	fCurrentJulianDate, true )
			tController.atActuationsSignals(iACValveIndex).Insert(					fActuationCommand,	fCurrentJulianDate, true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			0,					fCurrentJulianDate, true );
			%
		end;% end calculation of the Actuation Commands
		%
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('\nActuation percentage calculated >>>> %3.1f \n',	fActuationCommand);
			fprintf('Error: \t\t\t\t %4.4f \n',						fTemperatureError);
			fprintf('Proportional part: \t %4.4f \n',				KP * fTemperatureError);
			fprintf('Integral part: \t\t %4.4f \n',					KI * tController.fIntegrationOfTheTemperatureError);
			fprintf('Integration value: \t %4.4f \n',				tController.fIntegrationOfTheTemperatureError);
			fprintf('Derivative part: \t %4.4f \n',					KD * ( fTemperatureError * tController.fLastTemperatureError ));
			%
		end;% end print debug information on the PI values
		%
		%		
		%--------------------------------------------------------------------------------------------------------------
		%--------------------------------------------------------------------------------------------------------------
		%
		tController.atStatesSignals(iTemperatureErrorIndex).Insert(				fTemperatureError,								fCurrentJulianDate, true );
		tController.atStatesSignals(iTemperatureErrorIntegratorIndex).Insert(	tController.fIntegrationOfTheTemperatureError,	fCurrentJulianDate, true );
		%
		tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError + fTemperatureError * tController.fSamplingTimeInSeconds;
		%
		if	( tController.fIntegrationOfTheTemperatureError >  SAT )	
				%
				tController.fIntegrationOfTheTemperatureError = SAT;
				%
		elseif  ( tController.fIntegrationOfTheTemperatureError <  -SAT )
				%
				tController.fIntegrationOfTheTemperatureError = - SAT;
				%
		end;%%%%% desaturation
		%
		%
		tController.fLastTemperatureError = fTemperatureError;
		%
		%
		%------------------------------------------------------------------
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Exiting ComputeControlInputs()\n');
			%
		end;%
		%
	catch exception
		%
		disp(exception.message);
		warning( strcat('Error in ComputeControlInputs for  ', tController.strControllerID) );
		%
	end;% catch
	%
end % function

