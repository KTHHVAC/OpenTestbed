% function SetConstraints( tController, tParameters )
%
function SetConstraints( tController )
	% Setting the actuation and comfort constraints to pass for the system
	% dynamic
	%
 	try %
		%
		% retreiving the needed data
		fCurrentJulianDate			=	Time.GetCurrentJulianDate();
		fSamplingTimeInJulianDates	=	Time.GetJulianSecond() * tController.fSamplingTimeInSeconds;
		iNumberOfOutputs			=	size( tController.tModel.aafC, 1 );
		iNumberOfInputs				=	size( tController.tModel.aafB, 2 );
		%------------------------------------------------------------------
		% Retriving the needed indexes
		%
		iTemperatureOfTheAirInletIndex	=	tController.tMeasurementsSignalsIndexes.iTemperatureOfFreshAirInlet;
		fTemperatureOfTheAirInlet		=	tController.atMeasurementsSignals(iTemperatureOfTheAirInletIndex).ExtractSamplesAt(fCurrentJulianDate);
		%
		%------------------------------------------------------------------
		%
		tController.tInputsBounds.fMinCoolingTemperature = 0.32 * 16.5 + 0.68 * fTemperatureOfTheAirInlet;
		tController.tInputsBounds.fMaxHeatingTemperature = fTemperatureOfTheAirInlet;
		%
		tController.tInputsBounds.afInputsLowerBounds = ...
			[																...	
			tController.tInputsBounds.DeltaTh.fLowerBound ;					...
			tController.tInputsBounds.DeltaTc.fLowerBound ;					...
			tController.tInputsBounds.AdditionalHeating.fLowerBound ;		...
			tController.tInputsBounds.AdditionalCooling.fLowerBound ;		...
			tController.tInputsBounds.DeltaTrad.fLowerBound ;				...
			];
		%
		tController.tInputsBounds.afInputsUpperBounds =						...
			[																...	
			tController.tInputsBounds.DeltaTh.fUpperBound ;					...
			tController.tInputsBounds.DeltaTc.fUpperBound ;					...
			0 ;																...
			0 ;																...
			tController.tInputsBounds.DeltaTrad.fUpperBound ;				...
			];
		%
		% -----------------------------------------------------------------
		% -----------------------------------------------------------------
		% Initializing output vector constraints over prediction horizon
		%
		aafGuMixed = [	-1	 1	0	0	0	;			...
						 1	-1	0	0	0				...
					];  
		afBu	= vertcat( -	tController.tInputsBounds.afInputsLowerBounds ,		...
								tController.tInputsBounds.afInputsUpperBounds		...
						 );
		%
		tController.tModel.aaafBy		= zeros(	2 * iNumberOfOutputs, 1,			...
													tController.iPredictionHorizon);
		%
		tController.tModel.aaafLe		= zeros(	iNumberOfInputs ,					...
													iNumberOfInputs ,					...
													tController.iPredictionHorizon);
		%
		tController.tModel.aaafBMixed	= zeros(	2 *	iNumberOfOutputs , 1,			...
													tController.iPredictionHorizon);
		%
		% Setting output vector constraints over prediction horizon
		%
		iInitialHour	= 7; 
		iFinalHour		= 19;	
		%
		for iStepTime = 1: tController.iPredictionHorizon
			%
			%
			if ( Time.IsBetweenHours( fCurrentJulianDate, iInitialHour, iFinalHour)) 
				%
				tController.tModel.aaafBy(:,:, iStepTime) =		[ -		tController.tOutputsBounds.Temperature.fLowerBoundDay;		...
																		tController.tOutputsBounds.Temperature.fUpperBoundDay		...
																 ];
				%
			else
				tController.tModel.aaafBy(:,:, iStepTime) =		[ -		tController.tOutputsBounds.Temperature.fLowerBoundNight,	...
																		tController.tOutputsBounds.Temperature.fUpperBoundNight		...
																 ];
				%
			end;%end if
			%
			fCurrentJulianDate = fCurrentJulianDate + fSamplingTimeInJulianDates;
			%
		end;%end for
		%
		fCurrentJulianDate	= Time.GetCurrentJulianDate();
		% 
		%
		iInitialHour	= 7; 
		iFinalHour		= 16;	
		%
		%
		for iStepTime = 1: tController.iPredictionHorizon
			%
			%
			if ( Time.IsBetweenHours( fCurrentJulianDate, iInitialHour, iFinalHour)) 
				%
				tController.tModel.aaafLe(:, :, iStepTime)			=	zeros(iNumberOfInputs);
				tController.tModel.aaafBMixed (:, :, iStepTime)		=	[	-	tController.tInputsBounds.fMinCoolingTemperature;		...
																			tController.tInputsBounds.fMaxHeatingTemperature	];  
				%
			else
				tController.tModel.aaafLe(:,:, iStepTime)		=	diag([1,1,1,1,0],0);
				tController.tModel.aaafBMixed (:, :, iStepTime)	=	[	0;				...
																		1000	];  
				%
			end;%end if
			%
			fCurrentJulianDate			=	fCurrentJulianDate + fSamplingTimeInJulianDates;
			%
		end;%end for
		%
		tController.tModel.afRe	= zeros	(		iNumberOfInputs						...
											*	tController.iPredictionHorizon, 1);	
		%
		% Setting Gu
		%
		for iStepTime = 1 : tController.iPredictionHorizon
			%
			fDeltaAirMass = tController.tInputsBounds.AirMassFlow.fUpperBound	-	tController.afLowerBoundForTheVentilation(iStepTime);
			%
			aafSumContribution =	[		 0				 0				 0		 0		0;	...
											 0				 0				 0		 0		0;	...
										-fDeltaAirMass	 fDeltaAirMass		 0		-1		0;	...
										 fDeltaAirMass	-fDeltaAirMass		-1		 0		0;	...
											 0				 0				 0		 0		0	...
									];
			%						
			tController.tModel.aaafGu(:,:,iStepTime) =	[	-	eye( size(tController.tModel.aafB,2 ) )	;	...
																eye( size(tController.tModel.aafB,2 ) )		...
															+	aafSumContribution						;	...

														];
			%
		end;%end for
		%
		tController.tModel.aaafBu		= repmat( afBu,			[1, 1, tController.iPredictionHorizon]	);
		tController.tModel.aaafGy		= repmat( [-1 ; 1 ],	[1, 1, tController.iPredictionHorizon]	);
		tController.tModel.aaafGuMixed	= repmat( aafGuMixed,	[1, 1, tController.iPredictionHorizon]	);
		tController.tModel.aaafGe		= repmat( [ 1 ; 1 ],	[1, 1, tController.iPredictionHorizon]	);
		tController.tModel.aaafGeMixed	= repmat( [ 1 ; 1 ],	[1, 1, tController.iPredictionHorizon]	); 
		tController.tModel.aaafGxMixed	= repmat([	 tController.tModel.aafC;											...
													-tController.tModel.aafC ],[1, 1, tController.iPredictionHorizon]);
		%
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems setting the constraints.')
		%
	end;% end catch
	%
end %



