% function tParameters = SetParameters( tController )
%
function Postprocessing( tController )
	%
	try %
		%
		%retriving the needed indexes
		tDevicesIDs						= Signal.GetDevicesIDs();
		tSignalsIDs						= Signal.GetSignalsIDs();
		fCurrentJulianDate				= Time.GetCurrentJulianDate();
		%
		fDeltaHeatingTemperature		= tController.afOptimizationProblemSolution(1); 
		fDeltaCoolingTemperature		= tController.afOptimizationProblemSolution(2);
		fDeltaHeatingPower				= tController.afOptimizationProblemSolution(3);
		fDeltaCoolingPower				= tController.afOptimizationProblemSolution(4);
		fDeltaMeanRadiantTemperature	= tController.afOptimizationProblemSolution(5);
		fLowerBoundAirMassFlow			= tController.afLowerBoundForTheVentilation(1);
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('The output of the Temperature optimization problem are \n%4.2f dTH\n%4.2f dTC\n%4.2f duH\n%4.2f duC\n%4.2f dTrad\n',	...
						fDeltaHeatingTemperature, fDeltaCoolingTemperature, fDeltaHeatingPower, fDeltaCoolingPower, fDeltaMeanRadiantTemperature);
			%
		end;%
		%
		%------------------------------------------------------------------
		% retriving the needed indexes of needed measurements
		%
		% temperature of the room
		iTemperatureOfTheRoomIndex	=									...
				Signal.FindSignalIndex(									...
							tController.atMeasurementsSignals,			...
							tSignalsIDs.iTemperatureOfEnvironment,		...
							tDevicesIDs.iMote1035				);
		%
		% temperature of the air inlet
		iAirInletTemperatureIndex	=									...
				Signal.FindSignalIndex(									...
							tController.atMeasurementsSignals,			...
							tSignalsIDs.iTemperatureOfFreshAirInlet,	...
							tDevicesIDs.iMote1004				);
				
						
		iHeatingDifferrenceOfTemperatureForVentilationIndex		=							...
				Signal.FindSignalIndex(														...
							tController.atStatesSignals,									...
							tSignalsIDs.iHeatingDifferrenceOfTemperatureForVentilation,		...
							tDevicesIDs.iTemperatureMPCController				);
		
		iCoolingDifferrenceOfTemperatureForVentilationIndex		=							...
				Signal.FindSignalIndex(														...
							tController.atStatesSignals,									...
							tSignalsIDs.iCoolingDifferrenceOfTemperatureForVentilation,		...
							tDevicesIDs.iTemperatureMPCController				);
						
		iDifferenceAmountOfVentilationHeatingPowerNeededIndex	=							...
				Signal.FindSignalIndex(														...
							tController.atStatesSignals,									...
							tSignalsIDs.iDifferenceAmountOfVentilationHeatingPowerNeeded,	...
							tDevicesIDs.iTemperatureMPCController				);
		
		iDifferenceAmountOfVentilationCoolingPowerNeededIndex	=							...
				Signal.FindSignalIndex(														...
							tController.atStatesSignals,									...
							tSignalsIDs.iDifferenceAmountOfVentilationCoolingPowerNeeded,	...
							tDevicesIDs.iTemperatureMPCController				);
						
		
		iAirMassFlowAfterPostProcessingIndex		=										...
				Signal.FindSignalIndex(														...
							tController.atStatesSignals,									...
							tSignalsIDs.iAirMassFlowAfterPostProcessing,					...
							tDevicesIDs.iTemperatureMPCController				);
						
		iRadiantTemperatureAfterPostProcessingIndex	=										...
				Signal.FindSignalIndex(														...
							tController.atStatesSignals,									...
							tSignalsIDs.iRadiantTemperatureAfterPostProcessing,				...
							tDevicesIDs.iTemperatureMPCController				);
		
		iAirConditionedTempertureRequestedIndex	=										...
				Signal.FindSignalIndex(														...
							tController.atStatesSignals,									...
							tSignalsIDs.iAirConditionedTempertureRequested,					...
							tDevicesIDs.iTemperatureMPCController				);
		
		%
		%------------------------------------------------------------------
		% store the states variables
		%
		tController.atStatesSignals(iHeatingDifferrenceOfTemperatureForVentilationIndex).Insert( fDeltaHeatingTemperature , fCurrentJulianDate, true );
		%
		tController.atStatesSignals(iCoolingDifferrenceOfTemperatureForVentilationIndex).Insert( fDeltaCoolingTemperature , fCurrentJulianDate, true );
		%
		tController.atStatesSignals(iDifferenceAmountOfVentilationHeatingPowerNeededIndex).Insert( fDeltaHeatingPower , fCurrentJulianDate, true );
		%
		tController.atStatesSignals(iDifferenceAmountOfVentilationCoolingPowerNeededIndex).Insert( fDeltaCoolingPower , fCurrentJulianDate, true );
		%
		% TODO: add also mean radiant temperature
		%
		%
		%------------------------------------------------------------------
		% get the needed values
		%
		fRoomTemperature		= tController.atMeasurementsSignals(iTemperatureOfTheRoomIndex).ExtractSamplesAt(fCurrentJulianDate);
		fAirInletTemperature	= tController.atMeasurementsSignals(iAirInletTemperatureIndex).ExtractSamplesAt(fCurrentJulianDate);
		%
		%------------------------------------------------------------------
		% check the optimality of the solution
		%
		if ( fDeltaHeatingTemperature ~= 0 ) && ( fDeltaCoolingTemperature ~= 0 )
			%
			if ( fDeltaHeatingTemperature > fDeltaCoolingTemperature )
				%
				fDeltaHeatingTemperature = fDeltaHeatingTemperature - fDeltaCoolingTemperature;
				fDeltaCoolingTemperature = 0;
				%
				warning('The solution is not optimal. The DeltaTh is greater than DeltaTc and are both greather than zero.');
				%
			else%
				%
				fDeltaCoolingTemperature =  fDeltaCoolingTemperature - fDeltaHeatingTemperature;
				fDeltaHeatingTemperature = 0;
				%
				warning('The solution is not optimal. The DeltaTc is greater than DeltaTh and are both greather than zero.');
				%
			end;%
			%
		end;%
		%
		%
		if ( fDeltaHeatingPower ~= 0 ) && ( fDeltaCoolingPower ~= 0 )
			%
			if ( fDeltaHeatingPower > fDeltaCoolingPower )
				%
				fDeltaHeatingPower = fDeltaHeatingPower - fDeltaCoolingPower;
				fDeltaCoolingPower = 0;
				%
				warning('The solution is not optimal. The DeltaTh is greater than DeltaTc and are both greather than zero.');
				%
			else%
				%
				fDeltaCoolingPower =  fDeltaCoolingPower - fDeltaHeatingPower;
				fDeltaHeatingPower = 0;
				%
				warning('The solution is not optimal. The DeltaTc is greater than DeltaTh and are both greather than zero.');
				%
			end;%
			%
		end;%
		%
		%------------------------------------------------------------------
		% actual post processing phase
		%
		tController.fAirConditionedTemperature	= 0;
		tController.fMeanRadiantTemperature		= 0;	
		tController.fAirMassFlow				= fLowerBoundAirMassFlow;
		%
		%
		if ( fDeltaHeatingTemperature > 0 )
			%
			% % no need to calculate fAirSupplyTemperature
			%
			%
			if ( fDeltaHeatingPower > 0 )
				%
				tController.fAirMassFlow = tController.fAirMassFlow + ( fDeltaHeatingPower / fDeltaHeatingTemperature );
				%
			end;% end checking for more ventilation heating
			%
		end;% end setting ventilation values for heating 
		%
		%
		if ( fDeltaCoolingTemperature > 0 )
			%
			fAirSupplyTemperature					= fRoomTemperature - fDeltaCoolingTemperature;
			tController.fAirConditionedTemperature	= ( 1/0.32 ) * ( fAirSupplyTemperature - 0.68 * fAirInletTemperature ); 
			%
			%
			if( tController.bPrintDebugInformation )
				%
				fprintf('Tsa = %d ; Tac = %4.2f', fAirSupplyTemperature, tController.fAirConditionedTemperature);
				%
			end;%
			%
			%
			if ( tController.fAirConditionedTemperature < 16.5 )
				%
				warning('The Tac requested is lower of the lower possible. So, it has been set to 16.5C.');
				tController.fAirConditionedTemperature = 16.5;
				%
			end;% check on the Tac
			%
			if ( fDeltaCoolingPower > 0 )
				%
				tController.fAirMassFlow = tController.fAirMassFlow + ( fDeltaCoolingPower / fDeltaCoolingTemperature );
				%
			end;% end checking for more ventilation cooling
			%
		end;% end setting ventilation values for cooling 
		%
		%
		if ( fDeltaMeanRadiantTemperature > 0 )
			%
			tController.fMeanRadiantTemperature = fRoomTemperature + fDeltaMeanRadiantTemperature;
			%
		end;% end setting the mean radiant temperature for the radiator
		%
		%
		%
		%------------------------------------------------------------------
		% store the states variables
		%
		tController.atStatesSignals(iAirMassFlowAfterPostProcessingIndex).Insert( tController.fAirMassFlow , fCurrentJulianDate, true );
		%
		tController.atStatesSignals(iRadiantTemperatureAfterPostProcessingIndex).Insert( tController.fMeanRadiantTemperature , fCurrentJulianDate, true );
		%
		tController.atStatesSignals(iAirConditionedTempertureRequestedIndex).Insert( tController.fAirConditionedTemperature , fCurrentJulianDate, true );
		%		
		%
		%------------------------------------------------------------------
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems setting in the post processing phase.');
		%
	end;% end catch
	%
end % end function