% Compute the inputs of the PI controller
%
function ComputeControlInputs( tController )
	%
	try %
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Entering ComputeControlInputs()\n');
			%
		end;%
		%
		%
		fVentilationPercentage	= tController.fVentilationInput;
		fRadiatorPercentage		= tController.fRadiatorInput;		% TODO: implement a dedicated controller
		fCurrentJulianTime		= Time.GetCurrentJulianDate();
		%
		% -----------------------------------------------------------------
		% index research
		iACTemperatureIndex					= tController.tMeasurementsSignalsIndexes.iTemperatureOfAC;												
		iTemperatureErrorIndex				= tController.tStatesSignalsIndexes.iTemperatureError;
		iTemperatureErrorIntegratorIndex	= tController.tStatesSignalsIndexes.iIntegrationOfTheTemperatureError;													
		iFreshAirInletValveIndex			= tController.tActuationsSignalsIndexes.iFreshAirInletValveOpeningPercentage;
		iExhaustAirValveOutletIndex			= tController.tActuationsSignalsIndexes.iExhaustAirOutletValveOpeningPercentage;
		iACValveIndex						= tController.tActuationsSignalsIndexes.iACValveOpeningPercentage;
		iRadiatorValveIndex					= tController.tActuationsSignalsIndexes.iRadiatorValveOpeningPercentage;
		%
		%
		% -----------------------------------------------------------------
		% Computation of the command action
		%
		if( tController.bHasToWork )
			%
			%
			% Initialization of the fundamental parameters
			%
			TEMPERATURE_REFERENCE	= tController.fTemperatureReference;
			KP						= tController.fProportionalConstant;
			KI						= tController.fIntegralConstant;
			KD						= tController.fDerivativeConstant;
			%
			UMAN					= 60; % value used to tune the PI controller
			%
			%
			fACTemperature		= tController.atMeasurementsSignals(iACTemperatureIndex).ExtractSamplesAt(fCurrentJulianTime);
			%
			fTemperatureError	= - ( TEMPERATURE_REFERENCE - fACTemperature );
			%
			fActuationCommand	= UMAN + KP * fTemperatureError + KI * tController.fIntegrationOfTheTemperatureError + KD * ( fTemperatureError * tController.fLastTemperatureError );
			%
			if ( fActuationCommand < tController.tInputsBounds.fLowerBound )
				%
				fActuationCommand = tController.tInputsBounds.fLowerBound;
				%
			elseif ( fActuationCommand > tController.tInputsBounds.fUpperBound )
				%
				fActuationCommand = tController.tInputsBounds.fUpperBound;
				%
			end;% end bounding the input command
			%
			fActuationCommand = ceil( 10 * fActuationCommand ) / 10;
			%
% 			if( tController.bPrintDebugInformation )
				%
				fprintf('\nActuation percentage calculated >>>> %3.1f \n',	fActuationCommand);
				fprintf('Error: \t\t\t\t %4.4f \n',						fTemperatureError);
				fprintf('Proportional part: \t %4.4f \n',				KP * fTemperatureError);
				fprintf('Integral part: \t\t %4.4f \n',					KI * tController.fIntegrationOfTheTemperatureError);
				fprintf('Integration value: \t %4.4f \n',				tController.fIntegrationOfTheTemperatureError);
				fprintf('Derivative part: \t %4.4f \n',					KD * ( fTemperatureError * tController.fLastTemperatureError ));
				%
% 			end;% end print debug information on the PI values
			%
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fVentilationPercentage,	fCurrentJulianTime, true );
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fVentilationPercentage,	fCurrentJulianTime, true );
			tController.atActuationsSignals(iACValveIndex).Insert(					fActuationCommand,		fCurrentJulianTime, true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			fRadiatorPercentage,	fCurrentJulianTime, true );
			%
			%
			%------------------------------------------------------------------
			% Saving the states variables, calculating the integral part and
			% desaturate the integral action
			%
			tController.atStatesSignals(iTemperatureErrorIndex).Insert(				fTemperatureError,								fCurrentJulianTime, true );
			tController.atStatesSignals(iTemperatureErrorIntegratorIndex).Insert(	tController.fIntegrationOfTheTemperatureError,	fCurrentJulianTime, true );
			%
			%
			%
			if		(		( fActuationCommand ==  tController.tInputsBounds.fUpperBound )		...
						&&	( -fTemperatureError <= tController.tInputsBounds.fLowerBound ) )	...
					||																			...
					(		( fActuationCommand ==  tController.tInputsBounds.fLowerBound )		...
						&&	( -fTemperatureError >= tController.tInputsBounds.fLowerBound ) )	
				%
				tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError ;
				%
			elseif  (		( fActuationCommand ==  tController.tInputsBounds.fUpperBound )		...
						&&	( -fTemperatureError >  tController.tInputsBounds.fLowerBound ) )	...
					||																			...
					(		( fActuationCommand ==  tController.tInputsBounds.fLowerBound )		...
						&&	( -fTemperatureError <  tController.tInputsBounds.fLowerBound ) )	
				%
				tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError + fTemperatureError * tController.fSamplingTimeInSeconds;
				%
			else%
				%
				tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError + fTemperatureError * tController.fSamplingTimeInSeconds;
				%
			end;% end of the desaturation of the integral part managing
			%
			tController.fLastTemperatureError = fTemperatureError;
			%
			%
			% end tController.bHasToWork== true
			%
			%
		else%
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fVentilationPercentage,	fCurrentJulianTime, true );
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fVentilationPercentage,	fCurrentJulianTime, true );
			tController.atActuationsSignals(iACValveIndex).Insert(					0,						fCurrentJulianTime, true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			fRadiatorPercentage,	fCurrentJulianTime, true );
			%
			tController.fIntegrationOfTheTemperatureError = 0;
			%
		end;% if( tController.bHasToWork );
		%
		%------------------------------------------------------------------
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Exiting ComputeControlInputs()\n');
			%
		end;%
		%
	catch exception
		%
		disp(exception.message);
		warning( strcat('Error in ComputeControlInputs for %s', tController.strControllerID) );
		%
	end;% catch
	%
end % function

