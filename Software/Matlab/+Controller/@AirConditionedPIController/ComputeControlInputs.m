% Compute the inputs over the prediction horizon
%
% ALGORITHM
% - 
%
function ComputeControlInputs( tController , tParameters )
	%
	%
	try %
		if( tController.bPrintDebugInformation )
			%
			fprintf('Entering ComputeControlInputs()\n');
			%
		end;%
		%
		%------------------------------------------------------------------
		% Initialization of the fundamental parameters
		%
		TEMPERATURE_REFERENCE					= tController.fTemperatureReference;
		KP										= tController.fIntegralConstant;
		KI										= tController.fIntegralConstant;
		tDevicesIDs								= Signal.GetDevicesIDs();
		tSignalsIDs								= Signal.GetSignalsIDs();
		tControllerParameters.fVentilationInput	= 100;
		tControllerParameters.fRadiatorInput	= 0;
		fVentilationPercentage					= tController.fVentilationInput;
		fRadiatorPercentage						= tController.fRadiatorInput;
		%
		% -----------------------------------------------------------------
		% index research
		%
		iACTemperatureIndex			= Signal.FindSignalIndex(	tController.atMeasurementsSignals ,						...
																tSignalsIDs.iTemperatureOfAC ,							...
																tDevicesIDs.iMote1012);
		%													
		%													
		iTemperatureErrorIndex		= Signal.FindSignalIndex(	tController.atStatesSignals ,							...
																tSignalsIDs.fTemperatureError ,							...
																tDevicesIDs.iGenericPIDController);
		iTemperatureErrorIntegratorIndex = Signal.FindSignalIndex(	tController.atStatesSignals ,						...
																tSignalsIDs.fIntegrationOfTheTemperatureError ,			...
																tDevicesIDs.iGenericPIDController);													
															
		%													
		%	
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		%
		%
		% -----------------------------------------------------------------
		% Computation of the command action
		%
		fACTemperature		= tController.atMeasurementsSignals(iACTemperatureIndex).ExtractSamplesAt(Time.GetCurrentJulianDate());
		%
		fTemperatureError			= - ( TEMPERATURE_REFERENCE - fACTemperature );
		%
		fActuationCommand			= KP * fTemperatureError + KI * tController.fIntegrationOfTheTemperatureError;
		%
		if ( fActuationCommand < tParameters.tInputBounds.fLowerBound )
			%
			fActuationCommand = tParameters.tInputBounds.fLowerBound;
			%
		elseif ( fActuationCommand > tParameters.tInputBounds.fUpperBound )
			%
			fActuationCommand = tParameters.tInputBounds.fUpperBound;
			%
		end;% end bounding the input command
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('\nActuation percentage calculated >>>> %d \n',		fActuationCommand);
			fprintf('Proportional part %d \n',							KP * fTemperatureError);
			fprintf('Integral part %d \n',								KI * tController.fIntegrationOfTheTemperatureError);
			fprintf('Integration value %d \n',							tController.fIntegrationOfTheTemperatureError);
			%
		end;%
		%
		tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fVentilationPercentage,	Time.GetCurrentJulianDate(), true )
		tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fVentilationPercentage,	Time.GetCurrentJulianDate(), true )
		tController.atActuationsSignals(iACValveIndex).Insert(					fActuationCommand,		Time.GetCurrentJulianDate(), true );
		tController.atActuationsSignals(iRadiatorValveIndex).Insert(			fRadiatorPercentage,	Time.GetCurrentJulianDate(), true );
		%
		%
		%------------------------------------------------------------------
		% Saving the states variables, calculating the integral part and
		% desaturate the integral action
		%
		tController.atStatesSignals(iTemperatureErrorIndex).Insert(				fTemperatureError,								Time.GetCurrentJulianDate(), true );
		tController.atStatesSignals(iTemperatureErrorIntegratorIndex).Insert(	tController.fIntegrationOfTheTemperatureError,	Time.GetCurrentJulianDate(), true );
		%
		tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError + fTemperatureError * tController.fSamplingTimeInSeconds;
		%
		if ( tController.fIntegrationOfTheTemperatureError > tController.fValueToDesaturateTheIntegralAction )
			%
			tController.fIntegrationOfTheTemperatureError > tController.fValueToDesaturateTheIntegralAction;
			%
		end;%
		%
		% TODO: Improve the desaturation action!!!
		%
		%------------------------------------------------------------------
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Exiting ComputeControlInputs()\n');
			%
		end;%
		%
	catch exception
		%
		disp(exception.message);
		warning( strcat('Error in ComputeControlInputs for  ', tController.strControllerID) );
		%
	end;% catch
	%
end % function

