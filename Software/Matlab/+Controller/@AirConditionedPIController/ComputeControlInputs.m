% Compute the inputs of the PI controller
%
function ComputeControlInputs( tController , tParameters )
	%
	%
	try %
		if( tController.bPrintDebugInformation )
			%
			fprintf('Entering ComputeControlInputs()\n');
			%
		end;%
		%
		%------------------------------------------------------------------
		% Initialization of the fundamental parameters
		%
		TEMPERATURE_REFERENCE					= tController.fTemperatureReference;
		KP										= tController.fProportionalConstant;
		KI										= tController.fIntegralConstant;
		tDevicesIDs								= Signal.GetDevicesIDs();
		tSignalsIDs								= Signal.GetSignalsIDs();
		
		tController.fRadiatorInput				TODO to set outside or elsewhere
		
		UMAN									= 60; % value used to tune the PI controller
		
		fVentilationPercentage					= tController.fVentilationInput;
		fRadiatorPercentage						= tController.fRadiatorInput;
		%
		% -----------------------------------------------------------------
		% index research
		%
		iACTemperatureIndex			= Signal.FindSignalIndex(	tController.atMeasurementsSignals ,						...
																tSignalsIDs.iTemperatureOfAC ,							...
																tDevicesIDs.iMote1012);
		%													
		%													
		iTemperatureErrorIndex		= Signal.FindSignalIndex(	tController.atStatesSignals ,							...
																tSignalsIDs.fTemperatureError ,							...
																tDevicesIDs.iGenericPIDController);
		iTemperatureErrorIntegratorIndex = Signal.FindSignalIndex(	tController.atStatesSignals ,						...
																tSignalsIDs.fIntegrationOfTheTemperatureError ,			...
																tDevicesIDs.iGenericPIDController);													
															
		%													
		%	
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		%
		%
		% -----------------------------------------------------------------
		% Computation of the command action
		%
		if ( tController.bHasToWork )
			%
			%
			fACTemperature		= tController.atMeasurementsSignals(iACTemperatureIndex).ExtractSamplesAt(Time.GetCurrentJulianDate());
			%
			fTemperatureError	= - ( TEMPERATURE_REFERENCE - fACTemperature );
			%
			fActuationCommand	= UMAN + KP * fTemperatureError + KI * tController.fIntegrationOfTheTemperatureError + KD * ( fTemperatureError * tController.fLastTemperatureError );
			%
			if ( fActuationCommand < tParameters.tInputsBounds.fLowerBound )
				%
				fActuationCommand = tParameters.tInputsBounds.fLowerBound;
				%
			elseif ( fActuationCommand > tParameters.tInputsBounds.fUpperBound )
				%
				fActuationCommand = tParameters.tInputsBounds.fUpperBound;
				%
			end;% end bounding the input command
			%
			fActuationCommand = ceil( 10 * fActuationCommand ) / 10;
			%
			if( tController.bPrintDebugInformation )
				%
				fprintf('\nActuation percentage calculated >>>> %d \n',	fActuationCommand);
				fprintf('Error: \t\t\t\t %d \n',						fTemperatureError);
				fprintf('Proportional part: \t %d \n',					KP * fTemperatureError);
				fprintf('Integral part: \t\t %d \n',					KI * tController.fIntegrationOfTheTemperatureError);
				fprintf('Integration value: \t %d \n',					tController.fIntegrationOfTheTemperatureError);
				fprintf('Derivative part: \t %d \n',					KD * ( fTemperatureError * tController.fLastTemperatureError ));
				%
			end;%
			%
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fVentilationPercentage,	Time.GetCurrentJulianDate(), true )
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fVentilationPercentage,	Time.GetCurrentJulianDate(), true )
			tController.atActuationsSignals(iACValveIndex).Insert(					fActuationCommand,		Time.GetCurrentJulianDate(), true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			fRadiatorPercentage,	Time.GetCurrentJulianDate(), true );
			%
			%
			%------------------------------------------------------------------
			% Saving the states variables, calculating the integral part and
			% desaturate the integral action
			%
			tController.atStatesSignals(iTemperatureErrorIndex).Insert(				fTemperatureError,								Time.GetCurrentJulianDate(), true );
			tController.atStatesSignals(iTemperatureErrorIntegratorIndex).Insert(	tController.fIntegrationOfTheTemperatureError,	Time.GetCurrentJulianDate(), true );
			%
			%
			%
			if		(		( fActuationCommand ==  tParameters.tInputsBounds.fUpperBound )		...
						&&	( -fTemperatureError <= tParameters.tInputsBounds.fLowerBound ) )	...
					||																			...
					(		( fActuationCommand ==  tParameters.tInputsBounds.fLowerBound )		...
						&&	( -fTemperatureError >= tParameters.tInputsBounds.fLowerBound ) )	
				%
				tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError ;
				%
			elseif  (		( fActuationCommand ==  tParameters.tInputsBounds.fUpperBound )		...
						&&	( -fTemperatureError >  tParameters.tInputsBounds.fLowerBound ) )	...
					||																			...
					(		( fActuationCommand ==  tParameters.tInputsBounds.fLowerBound )		...
						&&	( -fTemperatureError <  tParameters.tInputsBounds.fLowerBound ) )	
				%
				tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError + fTemperatureError * tController.fSamplingTimeInSeconds;
				%
			else%
				%
				tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError + fTemperatureError * tController.fSamplingTimeInSeconds;
				%
			end;%
			%
			tController.fLastTemperatureError = fTemperatureError;
			%
			%
			%
			%
			% end tController.bHasToWork== true
			%
			%
		else%
			%
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fVentilationPercentage,	Time.GetCurrentJulianDate(), true )
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fVentilationPercentage,	Time.GetCurrentJulianDate(), true )
			tController.atActuationsSignals(iACValveIndex).Insert(					0,						Time.GetCurrentJulianDate(), true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			fRadiatorPercentage,	Time.GetCurrentJulianDate(), true );
			%
			tController.fIntegrationOfTheTemperatureError = 0;
			%
		end;% end tController.bHasToWork== false;
		%
		%------------------------------------------------------------------
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Exiting ComputeControlInputs()\n');
			%
		end;%
		%
	catch exception
		%
		disp(exception.message);
		warning( strcat('Error in ComputeControlInputs for %s', tController.strControllerID) );
		%
	end;% catch
	%
end % function

