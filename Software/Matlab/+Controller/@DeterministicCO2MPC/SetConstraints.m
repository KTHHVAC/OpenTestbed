% function SetConstraints( tController, tParameters )
%
function SetConstraints( tController )
	% Setting the actuation and comfort constraints to pass for the system
	% dynamic
	%
	try %
		%
		fCurrentJulianDate					= Time.GetCurrentJulianDate();
		%
		% get the number of inputs and outputs
		%
		iNumberOfInputs		= size( tController.tModel.aafB, 2 );
		iNumberOfOutputs	= size( tController.tModel.aafC, 1 );
		%------------------------------------------------------------------
		%	
		tController.tOutputsBounds.afOutputsLowerBounds		=	0;
		%	
		tController.tOutputsBounds.afOutputsUpperBounds		=		...
					tController.tOutputsBounds.CO2.fUpperBound		...
				-	tController.fLowestCO2ConcentrationPossible;
		%
		tController.tInputsBounds.afInputsLowerBounds = 0;
		%
		tController.tInputsBounds.afInputsUpperBounds = 450 * tController.tInputsBounds.AirMassFlow.fUpperBound;
		%
		% initializing equality constraints matrix on inputs over prediction horizon
		%
		tController.tModel.aaafLe		= zeros	(	iNumberOfInputs ,					...
													iNumberOfInputs ,					...
													tController.iPredictionHorizon		...
												);
		% initializing soft constraints matrix for Mixed constraints over
		% prediction horizon. 
		tController.tModel.aaafGeMixed	= zeros	(	2*	iNumberOfInputs ,					...
														iNumberOfInputs ,					...
														tController.iPredictionHorizon		...
												);
		tController.tModel.aaafGxMixed = zeros	(	2*	iNumberOfInputs ,					...
														iNumberOfInputs ,					...
														tController.iPredictionHorizon		...
												);	
		% setting equality constraints matrices on inputs over prediction
		% horizon depending on the central fan
		%
		iInitialHour	= 7; %%% TO DO: move it in the parameters
		iFinalHour		= 16;	
		%
		for iStepTime = 1: tController.iPredictionHorizon
			%
			%
			if ( Time.IsBetweenHours( fCurrentJulianDate, iInitialHour, iFinalHour)) 
				%
				tController.tModel.aaafLe(:,:, iStepTime)		=	zeros(iNumberOfInputs);
				%
				tController.tModel.aaafGeMixed(:,:,iStepTime)	=					...
					[	tController.tInputsBounds.AirMassFlow.fLowerBound ;			...
						tController.tInputsBounds.AirMassFlow.fUpperBound	];	% soft constraints on mixed input constraints 
				%
				tController.tModel.aaafGxMixed(:,:, iStepTime)	=					...
					[	-	tController.tInputsBounds.AirMassFlow.fLowerBound;		...
							tController.tInputsBounds.AirMassFlow.fUpperBound ] ;
				%
			else
				%
				tController.tModel.aaafLe(:,:, iStepTime)		=	eye(iNumberOfInputs);
				%
				tController.tModel.aaafGeMixed(:,:,iStepTime)	=					...
					[	0 ;															...
						0	];	% soft constraints on mixed input constraints 
				%
				tController.tModel.aaafGxMixed(:,:, iStepTime)	=					...
					[	0;															...
						0 ] ;
			end;%end if
				%
			fSamplingTimeInJulianDates	=	Time.GetJulianSecond() * tController.fSamplingTimeInSeconds;
			fCurrentJulianDate			=	fCurrentJulianDate + fSamplingTimeInJulianDates;
			%
		end;%end for
		%
		%
		tController.tModel.afRe	= zeros	(		iNumberOfInputs							...
											*	tController.iPredictionHorizon, 1);	
		%
		tController.tModel.afBy		= vertcat( -	tController.tOutputsBounds.afOutputsLowerBounds,		...
													tController.tOutputsBounds.afOutputsUpperBounds			...
											 );
		tController.tModel.aafBy = repmat(tController.tModel.afBy, 1, tController.iPredictionHorizon);
		%
		tController.tModel.aafGu =  [-1 ; 1];
		%
		tController.tModel.aafGuMixed = [ -	1 ; 1	];  % TO DO:remove numbers
		tController.tModel.aafR		  = repmat([0 ; 0],1 ,tController.iPredictionHorizon);  % TO DO:remove numbers
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems setting the constraints.')
		%
	end;% end catch
	%
end %



