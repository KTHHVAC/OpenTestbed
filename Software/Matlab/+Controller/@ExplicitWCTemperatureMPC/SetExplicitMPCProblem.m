	function SetExplicitMPCProblem( tController )
	%Setting all the matrices of the linear time inveriant discrete model
	%
	try %
		%
		iNumberOfInputs		= size(tController.tModel.aafB,2);
		iNumberOfOutputs	= size(tController.tModel.afC,1);
		iHorizonLength		= tController.iPredictionHorizon;		
		%------------------------------------------------------------------
		% setup the problem
		%
		x0  = sdpvar(2,1);
		u	= sdpvar(repmat(iNumberOfInputs,	iHorizonLength, 1), ones(iHorizonLength,1));
		eps = sdpvar(repmat(iNumberOfOutputs,	iHorizonLength, 1), ones(iHorizonLength,1));
		%
		aafA		=	tController.tModel.aafA;
		aafB		=	tController.tModel.aafB;
		afC			=	tController.tModel.afC;
		%
		afBMix		=	tController.tModel.afBMixed;
		afBuMin		=	tController.tInputsBounds.afBuMin;
		afBuMax		=	tController.tInputsBounds.afBuMax;
		afByMin		=	tController.tOutputsBounds.fLowerBound;
		afByMax		=	30;
		aafGu		=	tController.tModel.aafGu;
		aafGuMix	=	tController.tModel.aafGuMix;
		aafGxMix	=	tController.tModel.aafGxMix;
		aafW1		=	tController.tModel.afMixedDisturbancesStocastic;
		aafW2		=	tController.tModel.afOutputDisturbancesStocastic;
		aafGy		=	[-afC;afC];
		aafGe		=	[-1;-1];
		afByMinMax	=	[-afByMin;afByMax];
		%
		afLinCost	=	tController.afLinearCostMatrix;
		%
		frho		=	10^4;
		%
		constraints = [];
		objective = 0;
		x = x0;
		%
		for k = 1:iHorizonLength
				x			=	aafA * x	+ aafB		* u{k}	 ;
				objective	=	objective	+ afLinCost * u{k}	+ frho	*	eps{k};
				constraints =	[	constraints,																						...
									13																<= x0		<= 27,					... 
									aafGy * x + aafW2(:,k) + aafGe * eps{k}							<= 	afByMinMax,						...
									afBuMin															<= u{k}		<= afBuMax ,			...
									aafGu*u{k}														<= zeros(2,1),						...
									aafGuMix * u{k} + aafGxMix * x + aafW1(:,k)						<= afBMix,							...
									eps{k}															>= 0 ];
		end
		%
		tController.tConstraints	=	constraints;
		tController.tObjective		=	objective;
		tController.tx0				=	x0;
		tController.u				=	u;
		%
		%
	catch exception
		%
		disp(exception.message);
		warning('Problems computing the control inputs.');
		%
	end;% end catch		
	%
end % end function

		