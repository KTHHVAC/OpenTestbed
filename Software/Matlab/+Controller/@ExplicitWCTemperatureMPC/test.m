% From CO2 optimization problem
	m_dot= 0.14;

% Obtaining the model
        [A13,B13,C13,E13] = LoadBuildingParametersAndBuildTemperatureMatrices(m_dot);
	
        iNumberOfInputs			=	size(B13,2);
        iNumberOfDisturbances	=	size(E13,2);
% Matrix Definition
        
		Cf = 9.14 * 10^4;
        Cs = 1.62 * 10^7;
        R = 0.0011;
        
        A = zeros(2,2);
        A(1,1) = -1/Cf;
        A(1,2) =  1/Cf;
        A(2,1) =  1/Cs;
        A(2,2) = -1/Cs;
        A = 1/R*A;
       
        C = zeros(1,2);
        C(1,1) = 1;
        
        B = B13(1:2,:);
        E = zeros(2,iNumberOfDisturbances);
        E(1,:) = E13(1,:);
    % Discritize the model
		BB = [ B E ];
		
		dT = 1800; % 30 min
		% zoh
		sys  = ss( A, BB, C, 0 );
        sysd = c2d( sys, dT );
        [A, Bd, C, D] = ssdata( sysd );
		%
		%
		%
		
		%
		% Matrix definition
        E = Bd( :, iNumberOfInputs + 1 : end );
		B = Bd( :, 1 : iNumberOfInputs );
        %
        
        
% Valori massimi e minimi per uscita
		ymax	= 23;
		ymin	= 21;
% Setting Cost Matrix		
		C_PA	= 1006;
		A_RAD	= 50;
		H_RAD	= 8;
		alpha	= 4;
		Cost	= [		alpha * C_PA	* m_dot,												...
						alpha * C_PA	* m_dot,												...
						alpha * C_PA,															...
						alpha * C_PA,															...
						A_RAD * H_RAD ];
% 	
	%% Valori massimi e minimi per ingressi
		%MAX
		DeltaTHmax		= 15;
		DeltaTCmax		= 15;
		UaddHMax		= 10^30;
		UaddCMax		= 10^30;
		DeltaTRadMax	= 35;
		%MIN
		DeltaTHmin		= 0;
		DeltaTCmin		= 0;
		UaddHMin		= 0;
		UaddCMin		= 0;
		DeltaTRadMin	= 0;
		%
		Umax = [DeltaTHmax, DeltaTCmax, UaddHMax, UaddCMax, DeltaTRadMax]';
		Umin = [DeltaTHmin, DeltaTCmin, UaddHMin, UaddCMin, DeltaTRadMin]';
		%
		% Valori massimi e minimi indicativi per i disturbi
		%MAX
		TempExtMax		= 8;
		TempRoom2Max	= 22;
		TempCorrMax		= 22;
		TempRoom3Max	= 22;
		TempCeilMax		= 22;
		TempSRadMax		= 12;
		OccupancyMax	= 4;
		%MIN
		TempExtMin		= -4;
		TempRoom2Min	= 18;
		TempCorrMin		= 18;
		TempRoom3Min	= 18;
		TempCeilMin		= 18;
		TempSRadMin		= 0;
		OccupancyMin	= 0;
		
		Wmax = [	TempExtMax			...
					TempRoom2Max		...
					TempCorrMax			...
					TempRoom3Max		...
					TempCeilMax			...
					TempSRadMax			...
					OccupancyMax	]';
		Wmin = [	TempExtMin			...
					TempRoom2Min		...
					TempRoom3Min		...
					TempCorrMin			...
					TempCeilMin			...
					TempSRadMin			...
					OccupancyMin	]';
		
		DeltaMv = 0.34-m_dot;	
		% Soft constraints
		rho = 10000;
		% Orizzonte predizione
		N = 8;
		% Obtaining number of parameters
		nu = size(B,2);
		nw = size(E,2);
		ny = size(C,1);
		% setup the problem
		x0  = sdpvar(2,1);
		u	= sdpvar(repmat(nu, N, 1), ones(N,1));
		W	= sdpvar(nw,N);
		eps = sdpvar(repmat(ny, N, 1), ones(N,1));
		%
		%Setting Constraints matrices
		
		bMix	= [-(0.32 * 16.5 + 0.68 * 21); 21];
		by		= [ -ymin ; ymax];
		L		=	[	-DeltaMv		0		 1		 0		0;		...
							0		-DeltaMv	 0		 1		0;		...
						-DeltaMv	 DeltaMv	 1		-1		0;		...
						 DeltaMv	-DeltaMv	-1		 1		0;		...
					];
		GuMix = [	-1   1 0 0 0;
					 1 	-1 0 0 0 ];
		GxMix =	[ -C ; C ];
		
		
		constraints = [];
		objective = 0;
		x = x0;

for k = 1:N
			x			=	A*x + B*u{k} + E*W(:,k) ;
			objective	=	objective + Cost*u{k} + rho * eps{k};
			constraints =	[	constraints, ymin - eps{k} <= C*x <= ymax + eps{k},			...
								Umin <= u{k} <= Umax , L*u{k} <= zeros(4,1),				...
								GuMix*u{k} + GxMix * x <= bMix, eps{k} >= 0 ];
end
G1 = [Wmin(1) <= W(1,:) <= Wmax(1)];
G2 = [Wmin(2) <= W(2,:) <= Wmax(2)];
G3 = [Wmin(3) <= W(3,:) <= Wmax(3)];
G4 = [Wmin(4) <= W(4,:) <= Wmax(4)];
G5 = [Wmin(5) <= W(5,:) <= Wmax(5)];
G6 = [Wmin(6) <= W(6,:) <= Wmax(6)];
G7 = [Wmin(7) <= W(7,:) <= Wmax(7)];
G  = [G1+G2+G3+G4+G5+G6+G7];
% Obtaining solution
		[constraints, objective] = robustify(constraints + G, objective, [], W);
		[sol, diagn, Z, Valuefcn, Optimizer] = solvemp(constraints, objective, [],x0);
		
		x0 = [24;24];
		assign(x,x0);
		solution = double(Optimizer);
		u_sol	= zeros(nu,N);
		eps_sol = zeros(ny,N);
for k =  1:N 
		u_sol(:,k)		= solution(1+(k-1)*nu : nu*k);
		eps_sol(:,k)	= solution(nu*N+1+(k-1)); 
end


usc = zeros(2,N+1);
usc(:,1)= x0;
% 	% Simulation
for k = 1:N
	usc(:,k+1)	=	A*usc(:,k) + B*u_sol(:,k)  ;
end

y	= C*usc;
u1 = u_sol(1,:)';
u2 = u_sol(2,:)';
u3 = u_sol(3,:)';
u4 = u_sol(4,:)';
u5 = u_sol(5,:)';

subplot(3,2,1)
plot(0:N,y);
title('y')
subplot(3,2,2)
plot(0:N-1,u5);
title('DeltaTrad')
subplot(3,2,3)
plot(0:N-1,u1);
title('DeltaTh')
subplot(3,2,4)
plot(0:N-1,u3);
title('u_h')
subplot(3,2,5)
plot(0:N-1,u2);
title('DeltaTc')
subplot(3,2,6)
plot(0:N-1,u4);
title('u_c')

%Simulation 2

x0 = [20;20];
		assign(x,x0);
		solution = double(Optimizer);
		u_sol	= zeros(nu,N);
		eps_sol = zeros(ny,N);
for k =  1:N 
		u_sol(:,k)		= solution(1+(k-1)*nu : nu*k);
		eps_sol(:,k)	= solution(nu*N+1+(k-1)); 
end


usc = zeros(2,N+1);
usc(:,1)= x0;


for k = 1:N
	usc(:,k+1)	=	A*usc(:,k) + B*u_sol(:,k)  ;
end

y	= C*usc;
u1 = u_sol(1,:)';
u2 = u_sol(2,:)';
u3 = u_sol(3,:)';
u4 = u_sol(4,:)';
u5 = u_sol(5,:)';

figure(2)

subplot(3,2,1)
plot(0:N,y);
title('y')
subplot(3,2,2)
plot(0:N-1,u5);
title('DeltaTrad')
subplot(3,2,3)
plot(0:N-1,u1);
title('DeltaTh')
subplot(3,2,4)
plot(0:N-1,u3);
title('u_h')
subplot(3,2,5)
plot(0:N-1,u2);
title('DeltaTc')
subplot(3,2,6)
plot(0:N-1,u4);
title('u_c')
