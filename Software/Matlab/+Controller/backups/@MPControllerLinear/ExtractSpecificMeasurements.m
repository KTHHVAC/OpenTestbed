function ExtractSpecificMeasurements( tController )
	%
	for iSignal = 1:numel( tController.atMeasurementsSignals );
			%
			tController.tModel.MeasurementValues(iSignal) =									...
				tController.atMeasurementsSignals(iSignal).ExtractSamplesAt( Time.GetCurrentJulianDate() );
			%
		%
	end
	tController.tModel.MeasurementValues = tController.tModel.MeasurementValues';
	
	if tController.ControlledVariable == Controller.Variables.Temperature
		%
		tController.tModel.fRoomTemp	= tController.tModel.MeasurementValues(1);
		tController.tModel.fTai			= tController.tModel.MeasurementValues(end - 1);
		tController.tModel.fTsa			= tController.tModel.MeasurementValues( end );
		tController.tModel.afX0			= tController.tModel.MeasurementValues(1:end - 2);
		%
	end
	if tController.ControlledVariable == Controller.Variables.CO2
		%First value in afX0 is the Current CO2 Concentration and the
		%second one is the air inlet CO2. We use the delta for the CO2
		%model. We also have to change the bounds based on the delta.
		tController.tModel.tComfortBounds.deltaCO2Max =					...
				tController.tModel.tComfortBounds.CO2Max - tController.tModel.MeasurementValues(2);
		%
		tController.tModel.tComfortBounds.deltaCO2Min =					...
				tController.tModel.tComfortBounds.CO2Min; % We can not have values smaller than zero
		%
		tController.tModel.tActuationBounds.VentilationMax =			...
				tController.tModel.tActuationBounds.MVentMax * tController.tModel.tComfortBounds.deltaCO2Max;
		%													
		tController.tModel.tActuationBounds.VentilationMin =			...
				tController.tModel.tActuationBounds.MVentMin * tController.tModel.tComfortBounds.deltaCO2Min;
		%													
		tController.tModel.afX0 = tController.tModel.MeasurementValues(1) - tController.tModel.MeasurementValues(2); 
		%
	end
end