function PostProcessingPhase( tController, tConnection )
		%
		if( ~isfield( tController.tData, 'fPostTsa' ) ) 
			tController.tData.fPostTsa = 20.5;
			warning('there is no fPostTsa!!');
		end;
		
		if( ~isfield( tController.tData, 'fVentingPercentage' ) ) 
			tController.tData.fVentingPercentage = 0;
			warning('there is no fVentingPercentage!!');
		end;
		
		if( ~isfield( tController.tModel, 'fTempTsa' ) ) 
			tController.tModel.fTempTsa = 20.5;
			warning('there is no fTempTsa!!');
		end;
		
		if( ~isfield( tController.tModel, 'fTempCalculatedACPercentage' ) ) 
			tController.tModel.fTempCalculatedACPercentage = 0;
			warning('there is no fTempCalculatedACPercentage!!');
		end;
		
			tParametersMPCCooling			= Controller.LoadMPCCoolingParameters();
			tParametersMPCCooling.bFirstRun = tController.tModel.first;	
			tController.tModel.first		= false;
			%
			tControllerMPCCooling			= Controller.MPCCooling ( tParametersMPCCooling, tConnection );
			%Sets the postTsa,fVentingPercentage to the MPCCooling
			tControllerMPCCooling.tData.fPostTsa				= tController.tData.fPostTsa;
			tControllerMPCCooling.tData.fVentingPercentage		= tController.tData.fVentingPercentage;
			tControllerMPCCooling.tModel.fTsa					= tController.tModel.fTempTsa;
			tControllerMPCCooling.tData.fCalculatedACPercentage	= tController.tModel.fTempCalculatedACPercentage;
			%Timer goes here 
			tControlTimerMPCCooling			= timer(	'TimerFcn',						{@Controller.Run,		tControllerMPCCooling, tConnection},	...
														'ErrorFcn',						{@Controller.OnError,	tControllerMPCCooling},					...
														'StartFcn',						{@Controller.OnStart,	tControllerMPCCooling},					...
														'StopFcn',						{@Controller.OnExitNoTCPClose,	tControllerMPCCooling, tConnection},	...
														'Period',						tControllerMPCCooling.fSamplingTimeInSeconds,						...
														'TasksToExecute',				tControllerMPCCooling.iNumberOfRunsToBeExecuted,					...
														'ExecutionMode',				'fixedRate',												...
														'BusyMode',						'drop'	);
			%
			start( tControlTimerMPCCooling );
			disp('ControlTimer Started');
			%
			while( tControlTimerMPCCooling.TasksExecuted < tControlTimerMPCCooling.TasksToExecute )

				disp('Actuations have been made. Sleeping...');
				pause( 5 );
				tController.tModel.fTempTsa = tControllerMPCCooling.tModel.fTsa;
				tController.tModel.fTempCalculatedACPercentage = tControllerMPCCooling.tData.fCalculatedACPercentage;
			end;%
			%Temp files required when MPCCooling resets
		%	tController.tModel.tempTsa = tControllerMPCCooling.tModel.fTsa;
			%
			delete( tControlTimerMPCCooling );
			%
		end