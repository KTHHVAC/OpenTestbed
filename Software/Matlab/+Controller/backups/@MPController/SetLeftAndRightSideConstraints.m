function SetLeftAndRightSideConstraints(tController)
	%
	try %
		%
		fUBy = tController.tModel.fUBy;
		fLBy = tController.tModel.fLBy;
		fUBu = tController.tModel.fUBu;
		fLBu = tController.tModel.fLBu;
		%
		% Set the constraints
		tController.tModel.afX0 = reshape(tController.tModel.afX0,length(tController.tModel.afX0),1);
		aafGx = cell2mat(tController.tModel.aafSx) * tController.tModel.afX0; % Gx*x0
		aafGu = cell2mat(tController.tModel.aafSu);						% Gu
		aafGe = cell2mat(tController.tModel.aafSe) * tController.tModel.afW;    % Ge*W
		%
		%
		if tController.bUseScenarios == true
			%
			%Find the maximum Ge
			tController.GetWorstCaseScenario();
			%
			aafGeMin = tController.tModel.aafGeMin;
			aafGeMax = tController.tModel.aafGeMax;
			%
			size( tController.tModel.aafGeMin)
		else
			%
			aafGeMin = aafGe;
			aafGeMax = aafGe;
			%
		end;% end if
		%
		% Left-side constraint aafMatrix:
		%[(2*iN*iNx + 2*iN*iNu) x iN*iNu]
		aafPositiveGu = aafGu;
		%
		aafLConstrCoef = cell(4, 1);
		aafLConstrCoef{1, 1} =   aafPositiveGu;
		aafLConstrCoef{2, 1} = - aafPositiveGu;
		aafLConstrCoef{3, 1} =   eye(tController.iPredictionHorizon * tController.tModel.iNu);
		aafLConstrCoef{4, 1} = - eye(tController.iPredictionHorizon * tController.tModel.iNu);
		%
		%
		if tController.ControlledVariable == Controller.Variables.CO2
			%
			% Add extra constraint for the CO2 model
			aafLConstrCoef{5, 1} = - tController.tModel.tActuationBounds.MVentMax * aafGu + eye(tController.iPredictionHorizon);
			aafLConstrCoef{6, 1} =   tController.tModel.tActuationBounds.MVentMin * aafGu - eye(tController.iPredictionHorizon);
		elseif tController.ControlledVariable == Controller.Variables.Temperature
			aafMatrix				= zeros(1,tController.iPredictionHorizon*tController.tModel.iNu);
			aafMatrix(1,1)			= -1;
			aafLConstrCoef{5, 1}	= aafMatrix;
			aafMatrix				= zeros(1,tController.iPredictionHorizon*tController.tModel.iNu);
			aafMatrix(1,2)			= -1;
			aafLConstrCoef{6, 1}	= aafMatrix;
			%
		end;% end if
		%
		%
		% Right-side constraint aafMatrix (m x 1)
		aafMaxY = cell(tController.iPredictionHorizon, 1);
		aafMinY = cell(tController.iPredictionHorizon, 1);
		%
		%
		for i = 1 : tController.iPredictionHorizon
			%
			aafMaxY{i, 1} =   fUBy - aafGx(i, 1) - aafGeMax(i, 1);
			aafMinY{i, 1} = - fLBy + aafGx(i, 1) + aafGeMin(i, 1);
			%
		end;% end for
		%
		%
		aafMaxY = cell2mat(aafMaxY);
		aafMinY = cell2mat(aafMinY);
		%
		afRConstrCoef = cell(4, 1);
		afRConstrCoef{1, 1} = aafMaxY;
		afRConstrCoef{2, 1} = aafMinY;
		afRConstrCoef{3, 1} = repmat(fUBu, [tController.iPredictionHorizon, 1]);
		afRConstrCoef{4, 1} = repmat(-fLBu, [tController.iPredictionHorizon, 1]);
		%
		%
		if tController.ControlledVariable == Controller.Variables.CO2
			%
			% Add extra constraint for the CO2 model
			afRConstrCoef{5, 1} = - tController.tModel.tActuationBounds.MVentMax * ( - aafGx - aafGeMin); %TODO: Check if it is extra coding!
			afRConstrCoef{6, 1} =	 tController.tModel.tActuationBounds.MVentMin * ( - aafGx - aafGeMax);
			%
			%
		elseif tController.ControlledVariable == Controller.Variables.Temperature
			%
			afRConstrCoef{5, 1} = -tController.tModel.FirstLBUH;
			afRConstrCoef{6, 1} = -tController.tModel.FirstLBUC;
			%
		end;% end if
		%
		%
		% Set the bounds. Included in the constraints
		lBound = [];
		uBound = [];
		% Set function outputs for the linear MPC
		tController.tCost.afLowerBound = lBound;
		tController.tCost.afUpperBound = uBound;
		%
		tController.tConstraints.aafLeftConstrCoef = aafLConstrCoef;
		tController.tConstraints.afRightConstrCoef = afRConstrCoef;
		tController.tConstraints.aiEqConstrIndex = [];	
		%
		%
	catch exception
		%
		tController.AddError( strcat('MPController.SetLeftAndRightSideConstraints: ', exception.message ));
		warning('Problems with SetLeftAndRightSideConstraints()');
		%
	end;% end try
	%
	%
end % end function