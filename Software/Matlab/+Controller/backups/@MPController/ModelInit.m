% Initialization function for the MPC controller.
% Reads data from the room model and sets matrixes A, B, E, C.
% Initializes the matrixes of used in the mathematical model.
function ModelInit( tController )
    %===============================================================================
    % Authors:   Ferran Montes, KTH, Royal Institute of Technology
    % (26-02-2013: first implementation)
    %===============================================================================

    try

		switch tController.ControlledVariable
			% TODO: load the bounds here
			case Controller.Variables.Temperature
				% Loads temperature model
				BuildingTemperatureSystemMatrix
% 				Building_Matrix_complete_corrected
				tController.tModel.aafA  = Ac_room; % Dynamic matrix
				tController.tModel.aafB  = Bc_room; % Input matrix
				tController.tModel.aafE  = Ec_room; % Disturbance matrix

			case Controller.Variables.CO2
				% Loads CO2 model
				BuildingCO2SystemMatrix
% 				Building_Matrix_complete_CO2New
				tController.tModel.aafA =	Ac_CO2;	% Dynamic matrix
				tController.tModel.aafB =	Bc_CO2; % Input matrix
				tController.tModel.aafE = 	Ec_CO2; % Disturbance matrix

			otherwise
				tController.addError( 'MPController.ConstraintsSetInequality: Controlled variable not supported' );

		end

		tController.tModel.aafC  = [1 zeros(1, size(tController.tModel.aafA, 1) - 1)]; % Output matrix
		tController.tModel.aafH  = [zeros(1, size(tController.tModel.aafA, 1) - 1) 1]; % State matrix
		
		tController.tModel.iNx = size(tController.tModel.aafA, 1);
		tController.tModel.iNu = size(tController.tModel.aafB, 2);
		tController.tModel.iNw = size(tController.tModel.aafE, 2);
		tController.tModel.afW = size(tController.iPredictionHorizon * tController.tModel.iNw, 1);
		tController.tModel.iNy = length( find(tController.tModel.aafC) ); %Gets the number of output variables

		% A  = iNx * iNx
		% Sx = iPredictionHorizon*iNx * iNx
		[iNx1, iNx2] = size(tController.tModel.aafA);
		if (iNx1 ~= iNx2)
			tController.addError( 'MPControler.ModelInit: Wrong size of Dynamic matrix' );
		end
		tController.tModel.aafSx = cell(tController.iPredictionHorizon, 1);

		% B  = iNx * iNu
		% Su = iPredictionHorizon*iNx * iNu
		[iNu1] = size(tController.tModel.aafB, 1);
		if (iNu1 ~= tController.tModel.iNx)
			tController.addError( 'MPControler.ModelInit: Wrong size of Input matrix' );
		end
		tController.tModel.aafSu = cell(tController.iPredictionHorizon, tController.iPredictionHorizon);

		% E  = iNx * iNw
		% Se = iPredictionHorizon*iNx * iNw
		[iNw1] = size(tController.tModel.aafE, 1);
		if (iNw1 ~= tController.tModel.iNx)
			tController.addError( 'MPControler.ModelInit: Wrong size of Disturbance matrix' );
		end
		tController.tModel.aafSe = cell(tController.iPredictionHorizon, tController.iPredictionHorizon);

		% C  = iNx * iNx
		% Sc = iNx * iPredictionHorizon * iNx = diag(aafC)
		[iNc1] = size(tController.tModel.aafC, 2);
		if (iNc1 ~= tController.tModel.iNx)
			tController.addError( 'MPControler.ModelInit: Wrong size of Output matrix' );
		end
		tController.tModel.aafSc = cell(tController.iPredictionHorizon, tController.iPredictionHorizon);

		% H  = iNx * iNx
		% Sh = iNx * iPredictionHorizon * iNx = diag(aafC)
		[iNh1] = size(tController.tModel.aafA, 2);
		if (iNh1 ~= tController.tModel.iNx)
			tController.addError( 'MPControler.ModelInit: Wrong size of State matrix' );
		end
		tController.tModel.aafSh = cell(tController.iPredictionHorizon, 1);
		
		% Initialize value cells
		tController.tData.afMeasuredValues = cell(1,1);											% Array with the measured values
		tController.tData.afMeasuredValues{1, 1} = zeros(1, tController.tModel.iNx);

		% size: [iterations, tController.iPredictionHorizon * tController.tModel.iNu]
		tController.tData.afOutputVariable = cell(1, tController.iPredictionHorizon);	% Array with the computed output variable
		tController.tData.afOutputVariable{1, 1} = zeros(1, tController.tModel.iNu);

		% size: [iterations, tController.iPredictionHorizon * tController.tModel.iNu]
		tController.tData.afActuations = cell(1, 1);		% Array with the actuation values
		tController.tData.afActuations{1, 1} = zeros(1, tController.tModel.iNu);
		
		% size: [iterations, tController.iPredictionHorizon * tController.tModel.iNu]
		tController.tData.afForecast = cell(1, 1);		% Array with the values of the forecast
		tController.tData.afForecast{1, 1} = zeros(1, tController.tModel.iNw);	

	catch exception
        tController.AddError( strcat('MPControler.ModelInit: ', exception.message ));
    end

end