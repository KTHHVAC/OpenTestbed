% Compute the inputs over the prediction horizon
%
% ALGORITHM
% - 
%
function ComputeControlInputs( tController , tParameters )
	%
	%
	try %
		if( tController.bPrintDebugInformation )
			%
			fprintf('Entering ComputeControlInputs()\n');
			%
		end;%
		%
		%------------------------------------------------------------------
		%Initialization
		%
		tDevicesIDs							= Signal.GetDevicesIDs();
		tSignalsIDs							= Signal.GetSignalsIDs();
		fCurrentJulianDate					= Time.GetCurrentJulianDate();
		%
		%index research
		iTemperatureOfTheRoomIndex	= Signal.FindSignalIndex(	tController.atMeasurementsSignals ,						...
																tSignalsIDs.iTemperatureOfEnvironment ,					...
																tDevicesIDs.iMote1035);
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,			...
																tDevicesIDs.iPLC_A225);
		iTemperatureErrorIndex		= Signal.FindSignalIndex(	tController.atStatesSignals ,							...
																tSignalsIDs.fTemperatureError ,							...
																tDevicesIDs.iGenericPIDController);
		iErrorIntegrationIndex		= Signal.FindSignalIndex(	tController.atStatesSignals ,							...
																tSignalsIDs.fIntegrationOfTheTemperatureError ,			...
																tDevicesIDs.iGenericPIDController);
								
		%
		%
		% -----------------------------------------------------------------
		% Computation of the commands
		% 
		% taking the temperature of the room 
		fTemperatureOfTheRoom		= tController.atMeasurementsSignals(iTemperatureOfTheRoomIndex).ExtractSamplesAt(fCurrentJulianDate);
		%
		% calculating the error 
		fTemperatureError			= tParameters.fTemperatureReference - fTemperatureOfTheRoom;
		%
		% inserting the error in the corresponding state variable
		tController.atStatesSignals(iTemperatureErrorIndex).Insert(	fTemperatureError, fCurrentJulianDate, true );
		%
		% calculating the actuation command using the classic PI formulation
		fActuationCommand			=	tParameters.fProportionalConstant	* fTemperatureError								...
									+	tParameters.fIntegralConstant		* tController.fIntegrationOfTheTemperatureError;
		%
		%
		% setting of the actuation command at the correct boundary value
		% considering the various cases (heating/cooling need)
		if ( fActuationCommand >= 0 )
			%
			if ( fActuationCommand > tParameters.tActuationBounds.fUpperBound ) 
				%
				fActuationCommand = tParameters.tActuationBounds.fUpperBound;
				%
			end;% end putting bounds to the actuation command
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fActuationCommand,	fCurrentJulianDate, true );
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fActuationCommand,	fCurrentJulianDate, true );
			tController.atActuationsSignals(iACValveIndex).Insert(					0,					fCurrentJulianDate, true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			0,					fCurrentJulianDate, true );
			%
		else%
			%
			if ( fActuationCommand < - tParameters.tActuationBounds.fUpperBound ) 
				%
				fActuationCommand = -tParameters.tActuationBounds.fUpperBound;
				%
			end;% end putting bounds to the actuation command
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		0,					fCurrentJulianDate, true );
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	0,					fCurrentJulianDate, true );
			tController.atActuationsSignals(iACValveIndex).Insert(					-fActuationCommand,	fCurrentJulianDate, true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			0,					fCurrentJulianDate, true );
			%
		end;% end calculation of the Actuation Commands
		%
		%
		% integration of the error
		tController.fIntegrationOfTheTemperatureError = tController.fIntegrationOfTheTemperatureError + fTemperatureError * tParameters.fSamplingTimeInSeconds;
		%
		if ( tController.fIntegrationOfTheTemperatureError > tParameters.fValueToDesaturateTheIntegralAction )
			%
			tController.fIntegrationOfTheTemperatureError = tParameters.fValueToDesaturateTheIntegralAction;
			%
		end;% end saturation of the integration
		%
		% saving in the opportune state variable the integration
		tController.atStatesSignals(iErrorIntegrationIndex).Insert(	...
			tController.fIntegrationOfTheTemperatureError,			...
			fCurrentJulianDate + Time.GetJulianSecond() * tParameters.fSamplingTimeInSeconds,	...
			true													);
		%
		%------------------------------------------------------------------
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Exiting ComputeControlInputs()\n');
			%
		end;%
		%
	catch exception
		%
		disp(exception.message);
		warning( strcat('Error in ComputeControlInputs for  ', tController.strControllerID) );
		%
	end;% catch
	%
end % function

