% Compute the inputs over the prediction horizon
%
% ALGORITHM
% - 
%
function ComputeControlInputs( tController )
	%
	%
	try %
		if( tController.bPrintDebugInformation )
			%
			fprintf('Entering ComputeControlInputs()\n');
			%
		end;%
		%
		%------------------------------------------------------------------
		%Initialization
		%
		TEMPERATURE_REFERENCE				= 21.5;
		KP									= 100;
		tDevicesIDs							= Signal.GetDevicesIDs();
		tSignalsIDs							= Signal.GetSignalsIDs();
		%
		%index research
		iTemperatureOfTheRoomIndex	= Signal.FindSignalIndex(	tController.atMeasurementsSignals ,						...
																tSignalsIDs.iTemperatureOfEnvironment ,					...
																tDevicesIDs.iMote1035);
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tController.atActuationsSignals ,						...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		%
		%
		%------------------------------------------------------------------
		%Computation of the commands
		%
		fTemperatureOfTheRoom		= tController.atMeasurementsSignals(iTemperatureOfTheRoomIndex).ExtractSamplesAt(Time.GetCurrentJulianDate());
		fTemperatureError			= TEMPERATURE_REFERENCE -	fTemperatureOfTheRoom;
		fActuationCommand			= fTemperatureError * KP;
		%
		if ( fActuationCommand >= 0 )
			%
			if ( fActuationCommand > 100 ) 
				%
				fActuationCommand = 100;
				%
			end;% end putting bounds to the actuation command
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).afValues			= fActuationCommand;
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).afValues		= fActuationCommand;
			tController.atActuationsSignals(iACValveIndex).afValues						= 0;
			tController.atActuationsSignals(iRadiatorValveIndex).afValues				= 0;
			%
		else%
			%
			if ( fActuationCommand < - 100 ) 
				%
				fActuationCommand = -100;
				%
			end;% end putting bounds to the actuation command
			%
			tController.atActuationsSignals(iFreshAirInletValveIndex).afValues			= 0;
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).afValues		= 0;
			tController.atActuationsSignals(iACValveIndex).afValues						= -fActuationCommand;
			tController.atActuationsSignals(iRadiatorValveIndex).afValues				= 0;
			%
		end;% end calculation of the Actuation Commands
		%
		%------------------------------------------------------------------
		%
		if( tController.bPrintDebugInformation )
			%
			fprintf('Exiting ComputeControlInputs()\n');
			%
		end;%
		%
	catch exception
		%
		disp(exception.message);
		warning( strcat('Error in ComputeControlInputs for  ', tController.strControllerID) );
		%
	end;% catch
	%
end % function

