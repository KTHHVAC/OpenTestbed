% function [	aafADiscretized,		...
% 			aafBDiscretized,		...
% 			aafEDiscretized,		...
% 			aafCDiscretized ]		...
% 				= DiscretizeModel(	...
% 					tController,	...
% 					aafA ,			...
% 					aafB,			...
% 					aafE,			...
% 					aafC			)
% 
%
function [	aafADiscretized,		...
			aafBDiscretized,		...
			aafEDiscretized,		...
			aafCDiscretized ]		...
				= DiscretizeModel(	...
					tController,	...
					aafA ,			...
					aafB,			...
					aafE,			...
					aafC			)
	% Prepare discrete system matrices. Forward Eulero
	%
	try
		BB = [ aafB aafE ];
		
		dT = tController.fSamplingTimeInSeconds; 		% check the Configuration file: 3600 * obj.fSamplingTimeInSeconds
												% only if the sampling time is given as fractions of hour! So, it
												% should not be in seconds; in this case, drop 3600
        sys  = ss( aafA, BB, aafC, 0 );
        sysd = c2d( sys, dT );
        [A, Bd, C, D] = ssdata( sysd );
		
% 		% BACKWARD EULER
% 		%	Get discretized system
% 		A =(eye(obj.tModel.iNx) - dT*obj.tModel.aafA)^(-1);
% 		Bd = A*BB*dT;
% 		C = obj.tModel.aafC*A;
%       Dd = C*A*BB*dT;
%       Ed = Dd( :, obj.tModel.iNu+1 : end );
% 		D  = Dd( :, 1 : obj.tModel.iNu );
		%
		%
		iNumberOfInputs = size(tController.tModel.aafB,2);
		%
		E = Bd( :, iNumberOfInputs + 1 : end );
		B = Bd( :, 1 : iNumberOfInputs );

		aafADiscretized = A;
		aafBDiscretized = B;
		aafEDiscretized = E;
		aafCDiscretized = C;

	catch exception
		tController.AddError( strcat('MPController.ModelDiscretize: ', exception.message ));
	end
end

%===============================================================================


