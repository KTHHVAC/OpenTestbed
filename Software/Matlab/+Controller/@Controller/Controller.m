classdef Controller < handle
    %
	properties
		%
		%
		% -----------------------------
		% debug
		bPrintDebugInformation;
		bPlotSignalsDuringExecution;
		iNumberOfErrors;
		eDescriptionOfTheLastError;
		%
		%
		% -----------------------------
		% generic properties
		strControllerID;		% Controller identifier
		strLocation;			% Controller location
		fSamplingTimeInSeconds;
		iPredictionHorizon;
		tInputsBounds;
		tOutputsBounds;
		iNumberOfInputs;
		%
		%
		% -----------------------------
		% signals
		atMeasurementsSignals;
		atForecastsSignals;
		atActuationsSignals;
		atStatesSignals;
		%
		%
		% -----------------------------
		% description of the experiment
		fStartingJulianDate;	% Starting date of the ongoing control process, in Julian Date
		fEndingJulianDate;		% Ending date of the ongoing control process, in Julian Date
		fExperimentLengthInHours;
		iNumberOfRunsToBeExecuted;
		strResultsDirectory;	% where to save the results
		%
		%
		% -----------------------------
		% scenarios
 		bUseScenarios;
		fRiskLevelAlpha;
		fUnreliabilityBeta;
		iNumberOfScenarios;
		iNumberOfVariablesToGetScenarios;
		aafOccupancyScenarios;
		aafTemperatureScenarios;
		aafRadiationScenarios;
		%
		tOccupancyScenariosGenerator;
		tTemperatureScenariosGenerator;
		tRadiationScenariosGenerator;
		strOccupancyTxtDataset;
		strOccupancyMatDataset;
		strTemperatureTxtDataset;
		strTemperatureMatDataset;
		strSolarRadianceTxtDataset;
		strSolarRadianceMatDataset;
		%
		%
	end % public properties
	%
	%
	%
	%
	methods
		%
		function tController = Controller( tParameters )
			%
			%
			tController.bPrintDebugInformation			= tParameters.bPrintDebugInformation;
			tController.bPlotSignalsDuringExecution		= tParameters.bPlotSignalsDuringExecution;
			%
			tController.strControllerID					= tParameters.strControllerID;
			tController.strLocation						= tParameters.strLocation;
			%
			tController.iPredictionHorizon				= tParameters.iPredictionHorizon;
			%
			tController.fSamplingTimeInSeconds			= tParameters.fSamplingTimeInSeconds;
			%
			tController.fExperimentLengthInHours		= tParameters.fExperimentLengthInHours;
			%
			tController.fStartingJulianDate				= Time.GetCurrentJulianDate();
			tController.fEndingJulianDate				= tController.fStartingJulianDate + tParameters.fExperimentLengthInHours * Time.GetJulianHour();
			tController.iNumberOfRunsToBeExecuted		= 									...
				round																		...
				(																			...
						( tController.fEndingJulianDate - tController.fStartingJulianDate )	...
					/	( tController.fSamplingTimeInSeconds * Time.GetJulianSecond() )		...
				);
			%
			tController.strResultsDirectory				= tParameters.strResultsDirectory;
			%
			tController.iNumberOfErrors					= 0;
			tController.eDescriptionOfTheLastError		= [];
			%
			%
			% allocate the various signals
			tController.AllocateMeasurementsSignals( tParameters );
			tController.AllocateForecastsSignals( tParameters );
			tController.AllocateStatesSignals( tParameters );
			tController.AllocateActuationSignals( tParameters );
			%
			tController.bUseScenarios = tParameters.bUseScenarios;
			%
			if( tController.bUseScenarios )
				%
				% % 	S = ceil( (2/alpha) * (log(1/beta) + nvd ) ); 
				% %		where
				% %		nvd = number of decision variables (= iPredictionHorizon*iNumberOfInputs);
				%
				tController.fRiskLevelAlpha			= tParameters.fRiskLevelAlpha;
				tController.fUnreliabilityBeta		= tParameters.fUnreliabilityBeta;
				tController.iNumberOfInputs			= tParameters.iNumberOfInputs;
				%
				tController.iNumberOfScenarios =										...
					ceil																...
					(																	...
								(2 / tController.fRiskLevelAlpha)						...
							*	(														...
										log(1 / tController.fUnreliabilityBeta)			...
								+														...
										tController.iPredictionHorizon					...
									*	tController.iNumberOfInputs						...
								)														...
					);
				%
				tController.strOccupancyTxtDataset				= tParameters.strOccupancyTxtDataset;
				tController.strOccupancyMatDataset				= tParameters.strOccupancyMatDataset;
				tController.strTemperatureTxtDataset			= tParameters.strTemperatureTxtDataset;
				tController.strTemperatureMatDataset			= tParameters.strTemperatureMatDataset;
				tController.iNumberOfVariablesToGetScenarios	= tParameters.iNumberOfVariablesToGetScenarios;
				%
				tController.InitializeScenariosGenerators();
				%
			end;%
			%
			%
			if( tController.bPrintDebugInformation )
				%
				warning( 'Controller constructed in debug modality. For release modes put the bPrintDebugInformation parameter to false' );
				tController.PrintDebugInformation();
				%
			end;%
			%
		end;% default controller
		%
	end % methods
	%
	%
	methods (Static)
		%
		fMassFlow			= VentingPercentageToMassFlowLinearCase( fVentingPercentage , strKindOfDuct );
		fMassFlow			= VentingPercentageToMassFlowQuadraticCase( fVentingPercentage , strKindOfDuct );
		%
		fVentingPercentage	= MassFlowToVentingPercentageLinearCase( fMassFlow , strKindOfDuct );
		fVentingPercentage	= MassFlowToVentingPercentageQuadraticCase(	fMassFlow , strKindOfDuct )				
		%
		fWaterTemperature = OutsideTemperatureToRadiatorWaterTemperature( fOutsideTemperature );
		%
		fRadiatorValveOpeningPercentage										...
				= MeanRadiantTemperatureToRadiatorValveOpeningPercentage(	...
						fMeanRadiantTemperature,							...
						fRoomTemperature,									...
						fOutsideTemperature								);
		%
	end % end static methods
	%
	%
	methods (Abstract)
		%
		ComputeControlInputs( tController );
		%
	end % end abstrct methods
	%
end % class

