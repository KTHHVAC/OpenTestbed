classdef Controller < handle
    %
	properties
		%
		% for debug purposes
		bPrintDebugInformation;
		bPlotSignalsDuringExecution;
		%
		strControllerID;		% Controller identifier.
		%
		fSamplingTimeInSeconds;
		%	
		iPredictionHorizon;
		strLocation;			% needed to send the data to the plc
		%
		bFirstRun;
		%
		atMeasurementsSignals;
		atForecastsSignals;
		atActuationsSignals;
		atStatesSignals;
		%
		fStartingJulianDate;	% Starting date of the ongoing control process, in Julian Date
		fEndingJulianDate;		% Ending date of the ongoing control process, in Julian Date
		%
		fExperimentLengthInHours;
		iNumberOfRunsToBeExecuted;
		%
		strResultsDirectory;	% where to save the results
		%
		iNumberOfErrors;
		eDescriptionOfTheLastError;
		%
		ControlledVariable;
		GetErrorNumber;
		iNumberOfScenarios;
		aafGeneratedOccupancy;
		aafGeneratedTemperature;
		%
		tOccupancyScenariosGenerator;
		tTemperatureScenariosGenerator;
		tRadiationScenariosGenerator;
		%
		strOccupancyTxtDataset;
		strOccupancyMatDataset;
		strTemperatureTxtDataset;
		strTemperatureMatDataset;
		strSolarRadianceTxtDataset;
		strSolarRadianceMatDataset;
		%
		%
	end % public properties
	%
	%
	%
	%
	methods
		%
		function tController = Controller( tSettings )
			%
			%
			tController.bPrintDebugInformation			= tSettings.bPrintDebugInformation;
			tController.bPlotSignalsDuringExecution		= tSettings.bPlotSignalsDuringExecution;
			%
			tController.strControllerID					= tSettings.strControllerID;
			%
			tController.iPredictionHorizon				= tSettings.iPredictionHorizon;
			%
			tController.fSamplingTimeInSeconds			= tSettings.fSamplingTimeInSeconds;
			tController.bFirstRun						= tSettings.bFirstRun;
			%
			tController.fExperimentLengthInHours		= tSettings.fExperimentLengthInHours;
			%
			tController.fStartingJulianDate				= Time.GetCurrentJulianDate();
			tController.fEndingJulianDate				= tController.fStartingJulianDate + tSettings.fExperimentLengthInHours * Time.GetJulianHour();
			tController.iNumberOfRunsToBeExecuted		= 									...
				round																		...
				(																			...
						( tController.fEndingJulianDate - tController.fStartingJulianDate )	...
					/	( tController.fSamplingTimeInSeconds * Time.GetJulianSecond() )		...
				);
			%
			tController.strLocation						= tSettings.strLocation;
			tController.strResultsDirectory				= tSettings.strResultsDirectory;
			%
			tController.iNumberOfErrors					= 0;
			tController.eDescriptionOfTheLastError		= [];
			%
			tController.ControlledVariable				= tSettings.ControlledVariable;
			%
			% allocate the various signals
			tController.AllocateMeasurementsSignals( tSettings );
			tController.AllocateForecastsSignals( tSettings );
			tController.AllocateStatesSignals( tSettings );
			tController.AllocateActuationSignals( tSettings );
			%
			tController.bUseScenarios = tSettings.bUseScenarios;
			%
			if( tController.bUseScenarios )
				%
				%
				tController.strOccupancyTxtDataset			= tSettings.strOccupancyTxtDataset;
				tController.strOccupancyMatDataset			= tSettings.strOccupancyMatDataset;
				tController.strTemperatureTxtDataset		= tSettings.strTemperatureTxtDataset;
				tController.strTemperatureMatDataset		= tSettings.strTemperatureMatDataset;
				tController.iNumberOfScenarios				= tSettings.iNumberOfScenarios;
				%
				tController.InitializeScenariosGenerators();
				%
			end;%
			%
			%
			if( tController.bPrintDebugInformation )
				%
				warning( 'Controller constructed in debug modality. For release modes put the bPrintDebugInformation parameter to false' );
				tController.PrintDebugInformation();
				%
			end;%
			%
		end;% default controller
		%
	end % methods
	%
	%
end % class

