% Compute the inputs of the PID controller
%
function ComputeControlInputs( tController )

	try
		
		fCurrentJulianTime		= Time.GetCurrentJulianDate();
		
		% index search
		
% 		iACTemperatureIndex					= tController.tMeasurementsSignalsIndexes.iTemperatureOfAC;	
		iRoomTemperatureIndex				= tController.tMeasurementsSignalsIndexes.iRoomTemperature;
		iCO2OfEnvironmentIndex				= tController.tMeasurementsSignalsIndexes.iCO2OfEnvironment;
% 		iTemperatureErrorIndex				= tController.tStatesSignalsIndexes.iTemperatureError;
% 		iTemperatureErrorIntegratorIndex	= tController.tStatesSignalsIndexes.iIntegrationOfTheTemperatureError;													
		iFreshAirInletValveIndex			= tController.tActuationsSignalsIndexes.iFreshAirInletValveOpeningPercentage;
		iExhaustAirValveOutletIndex			= tController.tActuationsSignalsIndexes.iExhaustAirOutletValveOpeningPercentage;
		iACValveIndex						= tController.tActuationsSignalsIndexes.iACValveOpeningPercentage;
		iRadiatorValveIndex					= tController.tActuationsSignalsIndexes.iRadiatorValveOpeningPercentage;

		%Resets all previous control outputs

		tController.outputC = 0;
		tController.outputH = 0;
		tController.VentOutput = 0;
		tController.outputV = 0;
		
		tController.iteration = 1;
		
		
% 		if( tController.bHasToWork )
			
			% Signals values
		
			tController.aiCurrentTemp	= tController.atMeasurementsSignals(iRoomTemperatureIndex).ExtractSamplesAt(fCurrentJulianTime);
			tController.aiCurrentCO		= tController.atMeasurementsSignals(iCO2OfEnvironmentIndex).ExtractSamplesAt(fCurrentJulianTime);

%			fACTemperature				= tController.atMeasurementsSignals(iACTemperatureIndex).ExtractSamplesAt(fCurrentJulianTime);
			
			if length(tController.afMeasuredValues) < tController.iteration
				tController.afMeasuredValues(end +1) = tController.aiCurrentTemp;
			end
			
			if length(tController.afMeasuredCO2Values) < tController.iteration
				tController.afMeasuredCO2Values(end +1) = tController.aiCurrentCO;
			end

			%Checks if deadzone or setpoint have been passed
			if tController.iteration ~= 1

				%Temperature deadzone and setpoint case
				if (tController.afMeasuredValues(tController.iteration - 1) >= tController.SetpointT + tController.RealDeadzoneT) && (tController.afMeasuredValues(tController.iteration) <= tController.SetpointT + tController.RealDeadzoneT) && (tController.DeadzoneT == tController.RealDeadzoneT)

					%Higher deadzone passed from high temperature included
					%with protection from trespassing 2 deadzones
					tController.DeadzoneT = tController.FakeDeadzoneT;

				elseif (tController.afMeasuredValues(tController.iteration - 1) <= tController.SetpointT + tController.RealDeadzoneT) && (tController.afMeasuredValues(tController.iteration) >= tController.SetpointT + tController.RealDeadzoneT) && (tController.DeadzoneT == tController.RealDeadzoneT)

					%Higher deadzone passed from low temperature included
					%with protection from trespassing 2 deadzones
					tController.DeadzoneT = tController.FakeDeadzoneT;

				elseif (tController.afMeasuredValues(tController.iteration - 1) >= tController.SetpointT - tController.RealDeadzoneT) && (tController.afMeasuredValues(tController.iteration) <= tController.SetpointT - tController.RealDeadzoneT) && (tController.DeadzoneT == tController.RealDeadzoneT)

					%Lower deadzone passed from high temperature included
					%with protection from trespassing 2 deadzones
					tController.DeadzoneT = tController.FakeDeadzoneT;

				elseif (tController.afMeasuredValues(tController.iteration - 1) <= tController.SetpointT - tController.RealDeadzoneT) && (tController.afMeasuredValues(tController.iteration) >= tController.SetpointT - tController.RealDeadzoneT) && (tController.DeadzoneT == tController.RealDeadzoneT)

					%Lower deadzone passed from low temperature included
					%with protection from trespassing 2 deadzone
					tController.DeadzoneT = tController.FakeDeadzoneT;

				elseif (tController.afMeasuredValues(tController.iteration - 1) >= tController.SetpointT + tController.DeltaDeadzoneT) && (tController.afMeasuredValues(tController.iteration) <= tController.SetpointT + tController.DeltaDeadzoneT) && (tController.DeadzoneT == tController.FakeDeadzoneT)

					%Fake Setpoint + delta passed from high temperature
					%included with protection from trespassing 2 deadzones
					tController.DeadzoneT = tController.RealDeadzoneT;

					%We also reset the integral parts
					tController.intErrorC = 0;
					tController.intErrorH = 0;

				elseif (tController.afMeasuredValues(tController.iteration - 1) <= tController.SetpointT - tController.DeltaDeadzoneT) && (tController.afMeasuredValues(tController.iteration) >= tController.SetpointT + tController.DeltaDeadzoneT) && (tController.DeadzoneT == tController.FakeDeadzoneT)

					%Fake Setpoint - delta passed from low temperature included
					%with protection from trespassing 2 deadzones
					tController.DeadzoneT = tController.RealDeadzoneT;

					%We also reset the integral parts
					tController.intErrorC = 0;
					tController.intErrorH = 0;

				end

				%CO2 deadzone and setpoint case

				if (tController.afMeasuredCO2Values(tController.iteration -1) >= tController.CO2Setpoint + tController.CO2RealDeadzone) && (tController.afMeasuredCO2Values(tController.iteration) <= tController.CO2Setpoint + tController.CO2RealDeadzone) && (tController.CO2Deadzone == tController.CO2RealDeadzone)

					%Deadzone passed from high temperature included
					%with protection from trespassing 2 deadzones
					tController.CO2Deadzone = tController.CO2FakeDeadzone;

				elseif (tController.afMeasuredCO2Values(tController.iteration -1) <= tController.CO2Setpoint + tController.CO2RealDeadzone) && (tController.afMeasuredCO2Values(tController.iteration) >= tController.CO2Setpoint + tController.CO2RealDeadzone) && (tController.CO2Deadzone == tController.CO2RealDeadzone)

					%Deadzone passed from low temperature included
					%with protection from trespassing 2 deadzones
					tController.CO2Deadzone = tController.CO2FakeDeadzone;

				elseif (tController.afMeasuredCO2Values(tController.iteration -1) >= tController.CO2Setpoint + tController.CO2DeltaDeadzone) && (tController.afMeasuredCO2Values(tController.iteration) <= tController.CO2Setpoint + tController.CO2DeltaDeadzone) && (tController.CO2Deadzone == tController.CO2FakeDeadzone);

					%Setpoint + delta passed from high temperature included
					%with protection from trespassing 2 deadzones
					tController.CO2Deadzone = tController.CO2RealDeadzone;

				end
			end

			%Heating phase

			if tController.aiCurrentTemp < tController.SetpointT - tController.DeadzoneT

				%PI controller with Anti Windup and movable deadzones

				tController.errorH = tController.SetpointT - tController.aiCurrentTemp;
				tController.intErrorH = tController.intErrorH + tController.errorH;
				tController.outputH = tController.PgainT*(tController.errorH + tController.actTime*tController.intErrorH/tController.intTimeT); %Discretisation Ts*sum(e(t))

				if tController.outputH > 1 || tController.aiCurrentTemp < tController.SetpointT - tController.ComfortT

					tController.outputH = 1;
					tController.intErrorH = tController.intErrorH - tController.errorH;%Saturated -> Anti Windup

				elseif tController.outputH < 0
					tController.outputH = 0;
					tController.intErrorH = tController.intErrorH - tController.errorH;%Saturated -> Anti Windup
				end



				%Cooling phase

			elseif tController.aiCurrentTemp >  tController.SetpointT + tController.DeadzoneT

				%PI controller with Anti Windup and movable deadzones

				tController.errorC = tController.aiCurrentTemp - tController.SetpointT;
				tController.intErrorC = tController.intErrorC + tController.errorC;
				tController.outputC = tController.PgainT*(tController.errorC + tController.actTime*tController.intErrorC/tController.intTimeT);

				if tController.outputC > 1 || tController.aiCurrentTemp > tController.SetpointT + tController.ComfortT

					tController.outputC = 1;
					tController.intErrorC = tController.intErrorC - tController.errorC;%Saturated -> Anti Windup

				elseif tController.outputC < 0

					tController.outputC = 0;
					tController.intErrorC = tController.intErrorC - tController.errorC;%Saturated -> Anti Windup
				end
			end

			%Venting phase(For CO2)

			%P controller with movable deadzones

			tController.CO2Error = tController.aiCurrentCO - tController.CO2Setpoint;

			if tController.aiCurrentCO > tController.CO2Setpoint + tController.CO2Deadzone

				%Calculates the control output

				tController.CO2Output = (tController.hilimit + tController.lolimit)/2 + ((tController.hilimit - tController.lolimit)/2)*sin(pi*tController.CO2Gain*tController.CO2Error);

				if tController.aiCurrentCO > tController.CO2max || tController.CO2Output > 1

					tController.CO2Output = 1;

				elseif tController.aiCurrentCO < tController.CO2Setpoint
					tController.CO2Output = 0;
				end
			else
				%Nothing is done in the deadzone
				tController.CO2Output = 0;
			end

			%Venting phase(For temperature)
			%P controller with movable deadzones

			if tController.aiCurrentTemp > tController.SetpointT + tController.DeadzoneT

				%tController.outputV = tController.hilimit;

				tController.errorV = tController.aiCurrentTemp - tController.SetpointT;
				tController.outputV = (tController.hilimit + tController.lolimit)/2 + ((tController.hilimit - tController.lolimit)/2)*sin(pi*tController.errorV/tController.propband); %Almost as in IDA

				if tController.aiCurrentTemp > tController.SetpointT + tController.ComfortT || tController.outputV > tController.hilimit
					tController.outputV = tController.hilimit;
				elseif tController.outputV < tController.CO2Output
					tController.outputV = tController.CO2Output;%We prioritize the CO2 level and has the CO2 output as the lowest venting output
				end
			else
				tController.outputV = tController.CO2Output;
			end

			if tController.outputV < tController.outputC
				tController.outputV = tController.outputC; %Avoids stable points above setpoint
			end

			%Control output to be actuated

			tController.outputV = floor(100*tController.outputV);
			tController.outputC = floor(100*tController.outputC);
			tController.outputH = floor(100*tController.outputH);

			%Checks if we have a larger increase or decrease than the rate limit
			%and if so limits the change of output to the specified
			%rate limit
			%Anti windup is not needed since this case only exists when
			%passing setpoints or deadzones and there anti windup is
			%already active.

			if tController.outputV - tController.ControlOutput(1) > tController.RateLimit
				tController.outputV = tController.ControlOutput(1) + tController.RateLimit;
			elseif tController.outputV - tController.ControlOutput(1) < -tController.RateLimit
				tController.outputV = tController.ControlOutput(1) - tController.RateLimit;
			end

			if tController.outputC - tController.ControlOutput(2) > tController.RateLimit
				tController.outputC = tController.ControlOutput(2) + tController.RateLimit;
			elseif tController.outputC - tController.ControlOutput(2) < -tController.RateLimit
				tController.outputC = tController.ControlOutput(2) - tController.RateLimit;
			end

			if tController.outputH - tController.ControlOutput(3) > tController.RateLimit
				tController.outputH = tController.ControlOutput(3) + tController.RateLimit;
			elseif tController.outputH - tController.ControlOutput(3) < -tController.RateLimit
				tController.outputH = tController.ControlOutput(3) - tController.RateLimit;
			end

			tController.ControlOutput = [tController.outputV tController.outputC tController.outputH];
				
% 			disp(['Venting percentage: ' num2str(tController.outputV)]);
% 			disp(['Cooling percentage: ' num2str(tController.outputC)]);
% 			disp(['Heating percentage: ' num2str(tController.outputH)]);

			tController.afActuationsC(length(tController.afActuationsC) + 1) = tController.outputC;
			tController.afActuationsV(length(tController.afActuationsV) + 1) = tController.outputV;
			tController.afActuationsH(length(tController.afActuationsH) + 1) = tController.outputH;

			tController.DeadzoneTPlot(tController.iteration)  = tController.DeadzoneT;
			tController.CO2DeadzonePlot(tController.iteration) = tController.CO2Deadzone;
			tController.SetpointTPlot(tController.iteration) = tController.SetpointT;
			tController.CO2SetpointPlot(tController.iteration) = tController.CO2Setpoint;
			
			tController.iteration = tController.iteration + 1;
			
			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		tController.outputV,	fCurrentJulianTime, true );
			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	tController.outputV,	fCurrentJulianTime, true );
			tController.atActuationsSignals(iACValveIndex).Insert(					tController.outputC,	fCurrentJulianTime, true );
			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			tController.outputH,	fCurrentJulianTime, true );
			
% 		else%
			%
% 			tController.atActuationsSignals(iFreshAirInletValveIndex).Insert(		tController.outputV,	fCurrentJulianTime, true );
% 			tController.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	tController.outputV,	fCurrentJulianTime, true );
% 			tController.atActuationsSignals(iACValveIndex).Insert(					0,						fCurrentJulianTime, true );
% 			tController.atActuationsSignals(iRadiatorValveIndex).Insert(			tController.outputH,	fCurrentJulianTime, true );
			%
% 			tController.fIntegrationOfTheTemperatureError = 0;
			%
% 		end;% if( tController.bHasToWork );

		

	catch exception
		tController.AddError( strcat('PIDController.ComputeControlInputs: ', exception.message) );
	end
	
end

