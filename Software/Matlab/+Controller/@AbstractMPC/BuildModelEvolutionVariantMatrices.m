% Prepare model matrices over the prediction orizon for deterministic MPC.
%
% function	[													...	
% 			aafExtendedToOrizonFreeEvolutionMatrix,				...
% 			aafExtendedToOrizonForcingEvolutionMatrix,			...					
% 			aafExtendedToOrizonDisturbanceMatrix ,				...
% 			aafExtendedToOrizonOutputMatrix						...
% 			]													...
% 			= BuildModelEvolutionMatrices(						...
% 						aafStatesTransitionMatrix,				...
% 						aafInputsToStatesMatrix,				...
% 						aafDisturbancesToStatesMatrix,			...
% 						afStatesToOutputsMatrix,				...
% 						iPredictionHorizon)
% 	
%
%
function	[													...	
			aafExtendedToOrizonFreeEvolutionMatrix,				...
			aafExtendedToOrizonForcingEvolutionMatrix,			...					
			aafExtendedToOrizonDisturbanceMatrix ,				...
			aafExtendedToOrizonOutputMatrix						...
			]													...
			= BuildModelEvolutionVariantMatrices(					...
							aafStatesTransitionMatrix,				...
							aafInputsToStatesMatrices,				...
							aafDisturbancesToStatesMatrix,			...
							afStatesToOutputsMatrix)
	%
	%
	try
		% getting the size of model's matricies
		%
		iNumberOfStates		  = size(aafInputsToStatesMatrices,1);		% state size								
		iNumberOfInputs		  = size(aafInputsToStatesMatrices,2);		% number of inputs								
		iPredictionHorizon	  = size(aafInputsToStatesMatrices,3);		% prediction horizon length			
		iNumberOfDisturbances = size(aafDisturbancesToStatesMatrix);	% number of disturbances
		%[ iOutputMatrixRowSize     , iOutputMatrixColumnSize    ]      = size(afOutputMatrix);					%size of Output's Matrix
		%
		%
		%
		% space allocation for matrices
		aafExtendedToOrizonFreeEvolutionMatrix      = zeros(iNumberOfStates * iPredictionHorizon,	iNumberOfStates );
		aafExtendedToOrizonForcingEvolutionMatrix   = zeros(iNumberOfStates * iPredictionHorizon,	iInputMatrixColumnSize * iPredictionHorizon);
		aafExtendedToOrizonDisturbanceMatrix        = zeros(iNumberOfStates * iPredictionHorizon,	iNumberOfDisturbances  * iPredictionHorizon);
		%aafExtendedToOrizonOutputMatrix            = zeros(iOutputMatrixRowSize*N,			iOutputMatrixColumnSize*N );
		%
		%------------------------------------------------------------------
		% AA costruction
		%
		for iTimeStep=1:1:iPredictionHorizon
			%
			aafExtendedToOrizonFreeEvolutionMatrix(			...
								(iTimeStep - 1)				...
							*	iNumberOfStates + 1			...
							:	iTimeStep					...
							*	iNumberOfStates, :)         ...
			=  aafStatesTransitionMatrix^iTimeStep;
			%
		end;%end of for
		%
		%------------------------------------------------------------------
		% CC construction
		%
		aafExtendedToOrizonOutputMatrix = kron(eye(iPredictionHorizon), afStatesToOutputsMatrix);
		%
		%------------------------------------------------------------------
		% AB construction
		%
		for iStepTimeRow=1:iPredictionHorizon
			%
			for iStepTimeColumn=1:iStepTimeRow
				%
				aafExtendedToOrizonForcingEvolutionMatrix														...
					(																							...
							(																					...
									(iStepTimeRow-1)															...
								*	iNumberOfStates + 1 : iStepTimeRow * iNumberOfStates					...
							),																					...
							(																					...
									(iStepTimeColumn-1)															...
								*	iNumberOfInputs + 1 : iStepTimeColumn * iNumberOfInputs	...
							)																					...
					)																							...
					=																							...
						(aafStatesTransitionMatrix^(iStepTimeRow - iStepTimeColumn))							...
					*	 aafInputsToStatesMatrices(:,:,iStepTimeColumn - 1);
				%
			end;%end of innested for
			%
		end;%end of for     
		%
		%------------------------------------------------------------------
		% AE construction
		%
		for  iStepTimeRow=1:iPredictionHorizon
		   %
		   for iStepTimeColumn=1:iStepTimeRow
			   %
				aafExtendedToOrizonDisturbanceMatrix																...
					(																								...
								(iStepTimeRow-1)																	...
							*	iNumberOfStates + 1 : iStepTimeRow * iNumberOfStates								...
						,																							...                  			
						(																							...
								(iStepTimeColumn-1)																	...
							*	iNumberOfDisturbances + 1 : iStepTimeColumn * iNumberOfDisturbances					...
						)																							...		
					)																								...			
				= aafStatesTransitionMatrix^(iStepTimeRow-iStepTimeColumn)*aafDisturbancesToStatesMatrix;		
			end %end of innested for
			%
		end;%end of for  
		%
		%------------------------------------------------------------------
		%------------------------------------------------------------------
		%
	catch exception
		%
		disp(exception.message);
		warning('Error computing model evolution matrices');
		%
	end;%
	%
	%
end %end of the function