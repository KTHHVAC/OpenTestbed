% Solve the optimization problem calling cplex
% function [ afOptimizationProblemSolution, fCostFunctionOptimalValue, iSolverStatus ]			...
% 									= SolveOptimizationProblem(	afLinearCostFunction,			...
% 																aafQuadraticCostFunction,		...
% 																aafLeftSideConstraintMatrix,	...
% 																afRightSideConstraintMatrix		)
%
function [ afOptimizationProblemSolution, fCostFunctionOptimalValue, iSolverStatus ]			...
									= SolveOptimizationProblem(	afLinearCostFunction,			...
																aafQuadraticCostFunction,		...
																aafLeftSideConstraintMatrix,	...
																afRightSideConstraintMatrix		)
	%
	afOptimizationProblemSolution	= [];
	fCostFunctionOptimalValue		= [];
	iSolverStatus					= [];
	try %
		%
		%TODO: add the field tOptions in the optimization call
		if ( isempty(aafQuadraticCostFunction) )
			%
			[												...
				afOptimizationProblemSolution,				... 
				fCostFunctionOptimalValue,					...
				iSolverStatus,								...
				tDetails									...
			]												...
				= cplexlp (	afLinearCostFunction,			...
							aafLeftSideConstraintMatrix,	...
							afRightSideConstraintMatrix		);
			
			%
		else%
			%
			[												...
				afOptimizationProblemSolution,				... 
				fCostFunctionOptimalValue,					...
				iSolverStatus,								...
				tDetails									...
			]												...
				= cplexqp (	aafQuadraticCostFunction,		...
							afLinearCostFunction,			...
							aafLeftSideConstraintMatrix,	...
							afRightSideConstraintMatrix);
			%
			%
		end;% end of the call to the solver
		%
		%
		if (		( iSolverStatus ~= 1 )		...
				&&	( iSolverStatus ~= 6 )		...
				&&	( iSolverStatus ~= 5 )		)
			%
			error( '\n  -- Optimization failed: %s.', tDetails.cplexstatusstring ); 
			%
		end;% end check of the optimization chech failure
		%
		%
		% Test if the solution is optimal and CPLEX is just being picky
		% in case of non-optimal solution or in case of optimal solution  
		% with unscaled infeasibility
		if (	( iSolverStatus == 6 ) || ( iSolverStatus == 5 )  )
			%
			ISZEROROUGH = 1e-3;
			%
			% Primal feasibility
			afSlack		=		afRightSideConstraintMatrix										...
							-	aafLeftSideConstraintMatrix * afOptimizationProblemSolution		;
			%
			if ( min( afSlack ) < - ISZEROROUGH )
				%
				error('Solution is primal infeasible'); 
				%
			end;% end of the check of optimization infeasibility
			%
			% Primal equalities
			% if abs(slack(1:nEq)) > ISZEROROUGH, 
			% error('Solution does not satisfy equations'); end
			%
			% Dual feasibility
			if ( max(tDetails.dual) > ISZEROROUGH )
				%
				warning( '\n  -- Solution is non-optimal' ); 
				%
			end;% end of the check of a solution non optimal using the dual feasibility
			%
			% Complementarity
			if ( abs( afSlack' * tDetails.dual ) > ISZEROROUGH )
				%
				warning( '\n  -- Solution is non-optimal' );
				%
			end;% end of the check of a solution non optimal using the complementarity
			%
			fprintf('==>> CPLEX returned a non-optimal warning, but the solution is optimal to reasonable precision\n');
			%
		end;%
		%
	catch exception
		%
		disp(exception.message)
		warning('Error during the call to the solver');
		%
	end;% end catch
	%
end % end function