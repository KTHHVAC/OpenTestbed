function SetLinearModelMatrices( tController )
	%Setting all the matrices of the linear time inveriant discrete model
	%
	try %
		m_dot	= tController.afLowerBoundForTheVentilation;  
		%
		%
		[	A13,					...
			B13,					...
			C13,					...
			E13		]				...
				= LoadBuildingParametersAndBuildTemperatureMatrices(m_dot);
			
		iNumberOfInputs			=	size(B13,2);
        iNumberOfDisturbances	=	size(E13,2);
			%
			
		% Matrix Definition
        
		Cf = 9.14 * 10^4;
        Cs = 1.62 * 10^7;
        R = 0.0011;
        
        A = zeros(2,2);
        A(1,1) = -1/Cf;
        A(1,2) =  1/Cf;
        A(2,1) =  1/Cs;
        A(2,2) = -1/Cs;
        A = 1/R*A;
       
        C = zeros(1,2);
        C(1,1) = 1;
        
        B = B13(1:2,:);
        E = zeros(2,iNumberOfDisturbances);
        E(1,:) = E13(1,:);
    % Discritize the model
		BB = [ B E ];
		%
		dT = 1800; % 30 min
		%
		% zoh
		%
		sys  = ss( A, BB, C, 0 );
        sysd = c2d( sys, dT );
        %
		[	tController.tModel.aafA,		... 
			Bd,								...
			tController.tModel.afC,			...
			tController.tModel.afD]			...
				= ssdata( sysd );
		%
		%
		%
		%
		% Matrix definition
        tController.tModel.aafE = Bd( :, iNumberOfInputs + 1 : end );
		tController.tModel.aafB = Bd( :, 1 : iNumberOfInputs );
        %
		%	
	catch exception
		%
		disp(exception.message);
		warning('Problems building the model.');
		%
	end;% end catch
	%
end % end function