% Prepare the conversion matrix from the actual input and the closed loop feedback input over the prediction orizon 
%
% function [	afExtendedLinearCostMatrixInput,				...
%				aafExtendedQuadraticCostMatrixInput   ] =	...
%					BuildConversionMatrix(			...
%						afLinearCostMatrix,				...
%						aafQuadraticCostMatrix,			...
%						tController.iPredictionHorizon					)
%
function BuildConversionMatrix( tController )
	%
	try %
		%
		iNumberOfInput                                      = size(tController.tModel.aafB, 2); % number of inputs
        iNumberOfDisturbances                               = size(tController.tModel.aafE, 2); % number of disturbances
        iPredictionHorizonLength                            = tController.iPredictionHorizon;
        iNumberOfVariablesForEachInput                      = iNumberOfInput * iNumberOfDisturbances;
		%
        iSumOftheFirstIntegerNumberUpToPredictionHorizon    =		(   iPredictionHorizonLength-1 )		... 
                                                              *		(   iPredictionHorizonLength   )        ...
                                                              /   2;
		%
        iNumberOfTotalVariables                             =       iNumberOfVariablesForEachInput			...
                                                              *     iSumOftheFirstIntegerNumberUpToPredictionHorizon;  
		%
        aafSecondContributionMatrix     = eye(      iNumberOfInput * iPredictionHorizonLength );
        aafFirstContributionMatrix      = zeros(    iNumberOfInput * iPredictionHorizonLength,  ...
                                                                     iNumberOfTotalVariables    ...
                                                );
		aaafRepeatedDisturbances		= zeros(	iNumberOfInput,								...
													iNumberOfInput * iNumberOfDisturbances,		...
													iPredictionHorizonLength					...
												);
        %
		for iStepTime = 1:iPredictionHorizonLength
			%
			%
			afCurrentSelectedDisturbace	=										... 
						tController.tModel.afWW(		...
								( iStepTime-1 ) * iNumberOfDisturbances + 1 :	...
									iStepTime*iNumberOfDisturbances);
			%
			aaafRepeatedDisturbances(:,:,iStepTime) =						...
					kron(	eye(iNumberOfInput),							...
							afCurrentSelectedDisturbace'					...
							);
			%
		end;%
		%
		fCursore = 1;
        for iRowStep = 1:iPredictionHorizonLength
            %
            %
			iNumberOfElementForThisStep = iRowStep - 1;
			%
            for jColumnStep = 1:iNumberOfElementForThisStep
                %
				%
                aafFirstContributionMatrix(		( iRowStep - 1 )	* iNumberOfInput + 1							...
											:	  iRowStep			* iNumberOfInput,								...
												( fCursore - 1)		* iNumberOfVariablesForEachInput + 1	...
											:	  fCursore			* iNumberOfVariablesForEachInput		...	
											) = aaafRepeatedDisturbances(:,:, jColumnStep);
				%
				fCursore = fCursore + 1;
				%
            end;%
            %
        end;%
        tController.aafConversionMatrix = [aafFirstContributionMatrix aafSecondContributionMatrix];
		%
        
	catch exception
		%
		disp(exception.message)
		warning('Problems buildings the conversion matrix')
		%
	end;% end catch
	%
end % end function

