function ProcessCplexExitStatus(iStatus)
	%
	fprintf('The number of the error status from cplex is %d \nand the status is:', iStatus);
	switch(iStatus)
		%
		case 1
			fprintf('(Simplex or Barrier) Optimal solution is available.\n');
		%
		case 2
			fprintf('(Simplex or Barrier) Problem has an unbounded ray; see the concept Unboundedness for more information about infeasibility and unboundedness as a solution status.\n');
		%
		case 3
			fprintf('(Simplex or Barrier) Problem has been proven infeasible; see the topic Interpreting Solution Quality in the CPLEX User''s Manual for more details.\n');
		%
		case 4
			fprintf('(Simplex or Barrier) Problem has been proven either infeasible or unbounded; see the topic Effect of Preprocessing on Feasibility in the CPLEX User''s Manual for more details.\n');
		%
		case 5
			fprintf('(Simplex or Barrier) Optimal solution is available, but with infeasibilities after unscaling.\n');
		%
		case 6
			fprintf('(Simplex or Barrier) Solution is available, but not proved optimal, due to numeric difficulties during optimization.\n');
		%
		case 10	
			fprintf('(Simplex or Barrier) Stopped due to limit on number of iterations. \n');
		%
		case 11
			fprintf('(Simplex or Barrier) Stopped due to a time limit.\n');
		%
		case 12
			fprintf('(Simplex or Barrier) Stopped due to an objective limit.\n');
		%
		case 13
			fprintf('(Simplex or Barrier) Stopped due to a request from the user.\n');
		%
		case 14
			fprintf('(Simplex or Barrier) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_MIN_SUM (or MinSum) on a continuous problem. A relaxation was successfully found and a feasible solution for the problem. (if relaxed according to that relaxation) was installed. The relaxation is minimal.\n');
		%
		case 15
			fprintf('(Simplex or Barrier) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_OPT_SUM (or OptSum) on a continuous problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is optimal.\n');
		%
		case 16
			fprintf('(Simplex or Barrier) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_MIN_INF (or MinInf) on a continuous problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is minimal.\n');
		%
		case 17
			fprintf('(Simplex or Barrier) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_OPT_INF (or OptInf) on a continuous problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is optimal.\n');
		%
		case 18
			fprintf('(Simplex or Barrier) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_MIN_QUAD (or MinQuad) on a continuous problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is minimal.\n');
		%
		case 19
			fprintf('(Simplex or Barrier) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_OPT_QUAD (or OptQuad) on a continuous problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is optimal.\n');
		%
		case 20
			fprintf('(Barrier only) Model has an unbounded optimal face\n');
		%
		case 21
			fprintf('(Barrier only) Stopped due to a limit on the primal objective\n');
		%
		case 22
			fprintf('(Barrier only.) Stopped due to a limit on the dual objective\n');
		%
		case 23
			fprintf('(Simplex or Barrier) This status occurs only after a call to the method feasOpt on a continuous problem. The problem under consideration was found to be feasible after phase 1 of feasOpt. A feasible solution is available.\n');
		%
		case 30
			fprintf('(conflict refiner) The problem appears to be feasible; no conflict is available.\n');
		%
		case 31
			fprintf('(conflict refiner) The conflict refiner found a minimal conflict.\n');
		%
		case 32
			fprintf('(conflict refiner) The conflict refiner concluded contradictory feasibility for the same set of constraints due to numeric problems. A conflict is available, but it is not minimal.\n');
		%
		case 33
			fprintf('(conflict refiner) The conflict refiner terminated because of a time limit. A conflict is available, but it is not minimal.\n');
		%
		case 34
			fprintf('(conflict refiner) The conflict refiner terminated because of an iteration limit. A conflict is available, but it is not minimal.\n');
		%
		case 35
			fprintf('(conflict refiner) The conflict refiner terminated because of a node limit. A conflict is available, but it is not minimal.\n');
		%
		case 36
			fprintf('(conflict refiner) The conflict refiner terminated because of an objective limit. A conflict is available, but it is not minimal.\n');
		%
		case 37
			fprintf('(conflict refiner) The conflict refiner terminated because of a memory limit. A conflict is available, but it is not minimal.\n');
		%
		case 38
			fprintf('(conflict refiner) The conflict refiner terminated because a user terminated the application. A conflict is available, but it is not minimal.\n');
		%
		case 101
			fprintf('(MIP only) Optimal integer solution has been found\n');
		%
		case 102
			fprintf('(MIP only) Optimal solution with the tolerance defined by epgap or epagap has been found\n');
		%
		case 103
			fprintf('(MIP only) Solution is integer infeasible\n');
		%
		case 104
			fprintf('(MIP only) The limit on mixed integer solutions has been reached\n');
		%
		case 105
			fprintf('(MIP only) Node limit has been exceeded but integer solution exists\n');
		%
		case 106
			fprintf('(MIP only) Node limit has been reached; no integer solution\n');
		%
		case 107
			fprintf('(MIP only) Time limit exceeded, but integer solution exists\n');
		%
		case 108
			fprintf('(MIP only) Time limit exceeded; no integer solution\n');
		%
		case 109
			fprintf('(MIP only) Terminated because of an error, but integer solution exists.\n');
		%
		case 110
			fprintf('(MIP only) Terminated because of an error; no integer solution.\n');
		%
		case 111
			fprintf('(MIP only) Limit on tree memory has been reached, but an integer solution exists\n');
		%
		case 112
			fprintf('(MIP only) Limit on tree memory has been reached; no integer solution\n');
		%
		case 113
			fprintf('(MIP only) Stopped, but an integer solution exists.\n');
		%
		case 114
			fprintf('(MIP only) Stopped; no integer solution.\n');
		%
		case 115
			fprintf('(MIP only) Problem is optimal with unscaled infeasibilities\n');
		%
		case 116
			fprintf('(MIP only) Out of memory, no tree available, integer solution exists.\n');
		%
		case 117
			fprintf('(MIP only) Out of memory, no tree available, no integer solution.\n');
		%
		case 118
			fprintf('(MIP only) Problem has an unbounded ray\n');
		%
		case 119
			fprintf('(MIP only) Problem has been proved either infeasible or unbounded\n');
		%
		case 120
			fprintf('(MIP only) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_MIN_SUM (or MinSum) on a mixed integer problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is minimal.\n');
		%
		case 121
			fprintf('(MIP only) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_OPT_SUM (or OptSum) on a mixed integer problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is optimal.\n');
		%
		case 122
			fprintf('(MIP only) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_MIN_INF (or MinInf) on a mixed integer problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is minimal.\n');
		%
		case 123
			fprintf('(MIP only) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_OPT_INF (or OptInf) on a mixed integer problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is optimal.\n');
		%
		case 124
			fprintf('(MIP only) This status occurs only after a call to the method feasOpt with the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_MIN_QUAD (or MinQuad) on a mixed integer problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is minimal.\n');
		%
		case 125
			fprintf('(MIP only) This status occurs only after a call to the method feasOptwith the parameter CPX_PARAM_FEASOPTMODE (or FeasOptMode) set to CPX_FEASOPT_OPT_QUAD (or OptQuad) on a mixed integer problem. A relaxation was successfully found and a feasible solution for the problem (if relaxed according to that relaxation) was installed. The relaxation is optimal.\n');
		%
		case 126
			fprintf('(MIP only) This status occurs only after a call to the method feasOpt, when the algorithm terminates prematurely, for example after reaching a limit. This status means that a relaxed solution is available and can be queried.\n');
		%
		case 127
			fprintf('(MIP only) This status occurs only after a call to the method feasOpt on a MIP problem. The problem under consideration was found to be feasible after phase 1 of feasOpt. A feasible solution is available. This status is also used in the status field of solution and mipstart files for solutions from the solution pool.\n');
		%
		case 128
			fprintf('(MIP only) This status occurs only after a call to the method populate on a MIP problem. The limit on mixed integer solutions generated by populate, as specified by the parameter CPX_PARAM_POPULATELIM, has been reached.\n');
		%
		case 129
			fprintf('(MIP only) This status occurs only after a call to the method populate on a MIP problem. Populate has completed the enumeration of all solutions it could enumerate.\n');
		%
		case 130
			fprintf('(MIP only) This status occurs only after a call to the method populate on a MIP problem. Populate has completed the enumeration of all solutions it could enumerate whose objective value fit the tolerance specified by the paramaters CPX_PARAM_SOLNPOOLAGAP and CPX_PARAM_SOLNPOOLGAP.\n');
		%
	otherwise
		%
		fprintf('Something strange, this code is not in the list provided by IBM: %d\n', iStatus);
	%
end;%
