function Train(	tEstimator,									...
				tAirInletValveOpeningSignal,				...
				tAirInletTemperatureSignal,					...
				tAirInletCO2Signal,							...
				tCentralVentilationPumpOpeningPercentage,	...
				tRoomCO2Signal,								...
				tRoomTemperatureSignal,						...
				tManualPeopleCounterSignal,					...
				afPlausibleLambdas							)
	%
	% ---------------------------------------------------------------------
	% convert the signals in matrices:
	% - find the julian dates
	% - call the dedicated function
	afJulianDates =																...
				tManualPeopleCounterSignal.afTimes(1)							...
			:	( tEstimator.fSamplingTimeInSeconds * Time.GetJulianSecond() )	...
			:	tManualPeopleCounterSignal.afTimes(end);
	%
	[	aafInputs,											...
		afOutput 	] =										...
			tEstimator.TransformSignals(					...
				tAirInletValveOpeningSignal,				...
				tAirInletTemperatureSignal,					...
				tAirInletCO2Signal,							...
				tCentralVentilationPumpOpeningPercentage,	...
				tRoomCO2Signal,								...
				tRoomTemperatureSignal,						...
				tManualPeopleCounterSignal,					...
				afJulianDates								);
	%
	% DEBUG
	figure(1)
	plot(aafInputs(:, 1))
	title('input 1 - occupancy');
	figure(2)
	plot(aafInputs(:, 2))
	title('input 2 - air inlet');
	figure(3)
	plot(aafInputs(:, 3))
	title('input 3 - temperature');
	figure(4)
	plot(afOutput)
	title('output - measured CO2');
% 	pause
	%
	% ---------------------------------------------------------------------
	% identify the model 
	tEstimator.IdentifyTheModel( aafInputs, afOutput );
	%
	% ---------------------------------------------------------------------
	% calculate the MSE as a function of lambda on the training data
	fprintf('Computing the MSE as a function of lambda:\n');
	%
	afMSEsVsLambdas	= zeros( size(afPlausibleLambdas) );
	%
	for iLambda = 1:numel(afPlausibleLambdas)
		%
		afEstimatedOccupancy =				...
			tEstimator.EstimateBatch(		...
				aafInputs,					...
				afOutput,					...
				afPlausibleLambdas(iLambda)	);
		%
		afMSEsVsLambdas(iLambda) =						...
			OccupancyEstimators.GetPerformanceIndexes(	...
				afEstimatedOccupancy,					...
				aafInputs(:, 1)							);
		%
		fprintf('lambda %.5f => MSE %.5f\n', afPlausibleLambdas(iLambda), afMSEsVsLambdas(iLambda) );
		%
% 		figure(iLambda)
% 		plot(afEstimatedOccupancy, 'k')
% 		hold on
% 		plot(tEstimator.aafInputs(:,1), 'r')
% 		hold off
		%
	end;% cycle on the lambdas
	%
	% ---------------------------------------------------------------------
	% get the best lambda
	[~, iBestIndex] = min( afMSEsVsLambdas );
	tEstimator.fLambda = afPlausibleLambdas(iBestIndex);
	%
	fprintf('Best lambda: %.4f\n', tEstimator.fLambda);
	%
end % function

