% class that implements the estimator proposed in BuildSys 2013, 
%
classdef LassoLSOccupancyEstimator < handle
	%
	%
	% ---------------------------------------------------------------------
	properties
		%
		bPrintDebugInformation;
		%
		fLambda;
		iWindowsLengthInSamples;
		fSamplingTimeInSeconds;
		%
		aafA;
		aafB;
		aafDelta;
		%
		% idpoly object that contains the results of the system
		% identification steps
		tIdentifiedModel;
		%
		% Signal() object containing the estimation outcomes
		tEstimatedOccupancySignal;
		%
		% remember that CO2 levels are shifted
		fCO2Offset;
		%
		strIdentifiedModelType;
		%
	end %
	%
	%
	% ---------------------------------------------------------------------
	methods
		%
		% standard constructor
		function tEstimator =						...
					LassoLSOccupancyEstimator(		...
						strIdentifiedModelType,		...
						fSamplingTimeInSeconds,		...
						iWindowsLengthInSamples,	...
						fCO2Offset					)
			%
			% set the properties of the estimator
			tEstimator.bPrintDebugInformation	= false;
			tEstimator.strIdentifiedModelType	= strIdentifiedModelType;
			tEstimator.fSamplingTimeInSeconds	= fSamplingTimeInSeconds;
			tEstimator.iWindowsLengthInSamples	= iWindowsLengthInSamples;
			tEstimator.fCO2Offset				= fCO2Offset;
			%
			% for readability
			tSignalsIDs = Signal.GetSignalsIDs();
			tDevicesIDs = Signal.GetDevicesIDs();
			%
			% set the properties of the estimated signal
			tEstimator.tEstimatedOccupancySignal = Signal();
			tEstimator.tEstimatedOccupancySignal.Set(			...
				tDevicesIDs.iBuildsys2013OccupancyEstimator,	...
				tSignalsIDs.iEstimatedOccupancy,				...
				[], [],											...
				0.4, 0.2, 0										);
			%
		end % standard constructor
		%
	end %
	%
	%
	%
	% ---------------------------------------------------------------------
	methods(Static = true)
		%
		tEstimator = LoadEstimatorFromMatFile( strFilename );
		%
		[	astrInputLabels,				...
			astrOutputLabels	] =			...
				GetInputsOutputsLabels(		...
					tDatasetLabels			);
		%
	end	%
	%
	%
end % classdef

