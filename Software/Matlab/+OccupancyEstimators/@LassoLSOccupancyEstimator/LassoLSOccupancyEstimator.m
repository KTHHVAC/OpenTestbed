% class that implements the estimator proposed in BuildSys 2013, 
%
classdef LassoLSOccupancyEstimator < handle
	%
	%
	% ---------------------------------------------------------------------
	properties
		%
		bPrintDebugInformation;
		%
		% training inputs ans outputs --- every column is a signal
		aafTrainingInputs;
		aafTrainingOutputs;
		aafTestInputs;
		aafTestOutputs;
		%
		afPlausibleLambdas;
		aiPlausibleWindowsLength;
		%
		tEstimatedModel;
		fBestLambda;
		fTrainingFitness;
		fTestFitness;
		%
		afEstimatedOccupancy;
		%
		aafMSEsVsLambdasAndHorizonsInTest;
		aafFNsVsLambdasAndHorizonsInTest;
		aafFPsVsLambdasAndHorizonsInTest;
		aafACCsVsLambdasAndHorizonsInTest;
		%
		afMSEsVsLambdasInTraining;	
		afFNsVsLambdasInTraining;		
		afFPsVsLambdasInTraining;		
		afACCsVsLambdasInTraining;	
		%
		strModelType;
		%
	end %
	%
	%
	% ---------------------------------------------------------------------
	
	methods
		%
		% standard constructor
		function tEstimator = LassoLSEstimator( aafTrainingInputs,	...
												aafTrainingOutputs,	...
												aafTestInputs,		...
												aafTestOutputs,		...
												afPlausibleLambdas,	...
												aiPlausibleWindowsLength,	...
												strModelType		)
			%
			% set the properties
			tEstimator.bPrintDebugInformation	= false;
			tEstimator.afPlausibleLambdas		= afPlausibleLambdas;
			tEstimator.aiPlausibleWindowsLength	= aiPlausibleWindowsLength;
			tEstimator.strModelType				= strModelType;
			%
			% set the dataset
			tEstimator.aafTrainingInputs	= aafTrainingInputs;
			tEstimator.aafTrainingOutputs	= aafTrainingOutputs;
			tEstimator.aafTestInputs		= aafTestInputs;
			tEstimator.aafTestOutputs		= aafTestOutputs;
			%
			%
			% for readability
			iTotalNumberOfTestSamples = size( aafTestInputs, 1 );
			%
			% ---------------------------------------------------------------------
			% learn the model and the best lambda
			tEstimator.LearnModel();
			tEstimator.ComputeFitness();
			%
			%
			% ---------------------------------------------------------------------
			% calculate the best lambda using the training data
			fprintf('\n/// start calculating the best lambda from the training data\n');
			tEstimator.afMSEsVsLambdasInTraining	= zeros( size(tEstimator.afPlausibleLambdas) );
			tEstimator.afFNsVsLambdasInTraining		= zeros( size(tEstimator.afPlausibleLambdas) );
			tEstimator.afFPsVsLambdasInTraining		= zeros( size(tEstimator.afPlausibleLambdas) );
			tEstimator.afACCsVsLambdasInTraining	= zeros( size(tEstimator.afPlausibleLambdas) );
			%
			for iLambda = 1:numel(tEstimator.afPlausibleLambdas)
				%
				afEstimatedOccupancy =							...
					LassoLSEstimator.Estimate(					...
						tEstimator.aafTrainingInputs,			...
						tEstimator.aafTrainingOutputs,			...
						tEstimator.afPlausibleLambdas(iLambda),	...
						tEstimator.tEstimatedModel				);
				%
				[	tEstimator.afMSEsVsLambdasInTraining(iLambda),			...
					tEstimator.afFNsVsLambdasInTraining(iLambda),			...
					tEstimator.afFPsVsLambdasInTraining(iLambda),			...
					tEstimator.afACCsVsLambdasInTraining(iLambda)	] =		...
						GetPerformanceIndexes(								...
							afEstimatedOccupancy,							...
							tEstimator.aafTrainingInputs(:,1)				);
				%
				fprintf('lambda %.5f => MSE %.5f\n', tEstimator.afPlausibleLambdas(iLambda), tEstimator.afMSEsVsLambdasInTraining(iLambda) );
				%
% 				figure(1)
% 				plot(afEstimatedOccupancy, 'k')
% 				hold on
% 				plot(tEstimator.aafTrainingInputs(:,1), 'r')
% 				hold off
				%
			end;% cycle on the lambdas
			%
			% get the best lambda
			[~, iBestIndex] = min( tEstimator.afMSEsVsLambdasInTraining );
			tEstimator.fBestLambda = tEstimator.afPlausibleLambdas(iBestIndex);
			%
			%
			%
			fprintf('\n/// start calculating the best lambda for the test data\n');
			tEstimator.aafMSEsVsLambdasAndHorizonsInTest	= zeros( numel(tEstimator.afPlausibleLambdas), numel(tEstimator.aiPlausibleWindowsLength) );
			tEstimator.aafFNsVsLambdasAndHorizonsInTest		= zeros( numel(tEstimator.afPlausibleLambdas), numel(tEstimator.aiPlausibleWindowsLength) );
			tEstimator.aafFPsVsLambdasAndHorizonsInTest		= zeros( numel(tEstimator.afPlausibleLambdas), numel(tEstimator.aiPlausibleWindowsLength) );
			tEstimator.aafACCsVsLambdasAndHorizonsInTest	= zeros( numel(tEstimator.afPlausibleLambdas), numel(tEstimator.aiPlausibleWindowsLength) );
			%
			for iHorizonIndex = 1:numel(tEstimator.aiPlausibleWindowsLength);
				%	
				iHorizon = tEstimator.aiPlausibleWindowsLength(iHorizonIndex);
				%
				% ---------------------------------------------------------------------
				% find how the performance indexes behave with lambda in test
				%
				for iLambda = 1:numel(tEstimator.afPlausibleLambdas)
					%
					afEstimatedOccupancy = zeros( numel( tEstimator.aafTestInputs, 1 ), 1 );
					%
					for iSample = 1:(iTotalNumberOfTestSamples - iHorizon + 1)
						%
						aafCurrentTestInputs 	= tEstimator.aafTestInputs( iSample:iSample+iHorizon-1, :);
						aafCurrentTestOutputs 	= tEstimator.aafTestOutputs( iSample:iSample+iHorizon-1, :);
						%
						afCurrentEstimatedOccupancy =					...
							LassoLSEstimator.Estimate(					...
								aafCurrentTestInputs,					...
								aafCurrentTestOutputs,					...
								tEstimator.afPlausibleLambdas(iLambda),	...
								tEstimator.tEstimatedModel				);
						%
						%
						if( iSample == 1 )
							%
							afEstimatedOccupancy( 1:iHorizon, 1 ) = round( afCurrentEstimatedOccupancy );
							%
						else%
							%
							afEstimatedOccupancy( iSample+iHorizon-1, 1 ) = round( afCurrentEstimatedOccupancy(end) );
							%
						end;%
						%
					end;% cycle on samples
					%
					[	tEstimator.aafMSEsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex),		...
						tEstimator.aafFNsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex),			...
						tEstimator.aafFPsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex),			...
						tEstimator.aafACCsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex)	] =		...
							GetPerformanceIndexes(							...
								afEstimatedOccupancy,						...
								tEstimator.aafTestInputs(:,1)				);
					%
					fprintf('lambda %.5f, horizon %d => MSE %.5f, ACC %.5f, FP %.5f, FN %.5f\n',	...
						tEstimator.afPlausibleLambdas(iLambda),		...
						iHorizonIndex,	...
						tEstimator.aafMSEsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex), 	...
						tEstimator.aafACCsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex), 	...
						tEstimator.aafFPsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex), 	...
						tEstimator.aafFNsVsLambdasAndHorizonsInTest(iLambda, iHorizonIndex));
					%
					%
					% save the estimates for the best lambda in training
					if( tEstimator.afPlausibleLambdas(iLambda) == tEstimator.fBestLambda )
						%
						tEstimator.afEstimatedOccupancy = afEstimatedOccupancy;
						%
					end;%
					%
				end;% lambdas
				%
			end;% horizon
			%
			%
		end % standard constructor
		%
	end %
	%
	%
	%
	% ---------------------------------------------------------------------
	methods(Static = true)
		%
		aafMatrix		= GetDeltaMatrix( iNumberOfSamples );
		%
		[aafA, aafB]	= GetToeplitzMatrices( tModel, iNumberOfSamples );
		%
		afEstimatedOccupancy =		...
			Estimate(				...
				aafInputs,			...
				aafOutputs,			...
				fLambda,			...
				tModel				);
		%
	end	%
	%
	%
end %
