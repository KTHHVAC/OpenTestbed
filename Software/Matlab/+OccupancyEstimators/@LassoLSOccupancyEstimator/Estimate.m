% ASSUMPTION: THE OCCUPANCY IS THE FIRST INPUT
%
function afEstimatedOccupancy =		...
			Estimate(				...
				aafInputs,			...
				aafOutputs,			...
				fLambda,			...
				tModel				)
	%
	% compute the parameters
	iNumberOfSamples	= size(aafOutputs, 1);
	iNumberOfInputs		= size(aafInputs, 2);
	[ aafA, aafB ]		= LassoLSEstimator.GetToeplitzMatrices( tModel, iNumberOfSamples );
	aafDelta			= LassoLSEstimator.GetDeltaMatrix( iNumberOfSamples );
	%
	% cost corresponding to the known part:
	% - autoregressive part
	fCostOfKnownPart = - aafA * aafOutputs;
	%
	% - inputs part: note that 1 is excluded because we assume the 1st
	%   component to be the occupancy
	for iInput = 2:iNumberOfInputs
		%
		fCostOfKnownPart =							...
				fCostOfKnownPart					...
			+	aafB(:,:,iInput) * aafInputs(:,iInput);
		%
	end;%
	%
	% ---------------------------------------------------------------------
	fprintf('Starting solving a L1 problem...');
	cvx_begin quiet
		%
		variable afEstimate(iNumberOfSamples, 1)
		%
		cost = norm(	aafOutputs - (fCostOfKnownPart + aafB(:,:,1) * afEstimate),	... | evidence
						2														)	... |
				+																	...
				fLambda * norm(aafDelta * afEstimate, 1);							%   | regularization
		%
		minimize cost
		%
		subject to
% 			afEstimate(1)	== aafInputs(1,1);
			afEstimate(end) == afEstimate(end-1);
			afEstimate		>= 0;
		%
	cvx_end
	fprintf('done\n');
	% ---------------------------------------------------------------------
	%
	afEstimatedOccupancy = afEstimate;
	%
end % function
