function [	aafInputs,											...
			afOutput 	] =										...
				TransformSignals(								...
					tEstimator,									...
					tAirInletValveOpeningSignal,				...
					tAirInletTemperatureSignal,					...
					tAirInletCO2Signal,							...
					tCentralVentilationPumpOpeningPercentage,	...
					tRoomCO2Signal,								...
					tRoomTemperatureSignal,						...
					tPeopleCounterSignal,						... notice that this may be an empty object
					afJulianDates								)
	%
	% for readability
	afAirInletValveOpening			= tAirInletValveOpeningSignal.ExtractSamplesAt(					afJulianDates );
	afAirInletTemperature			= tAirInletTemperatureSignal.ExtractSamplesAt(					afJulianDates );
	afAirInletCO2					= tAirInletCO2Signal.ExtractSamplesAt(							afJulianDates );
	afCentralPumpOpeningPercentage	= tCentralVentilationPumpOpeningPercentage.ExtractSamplesAt(	afJulianDates );
	afRoomCO2						= tRoomCO2Signal.ExtractSamplesAt(								afJulianDates );
	afRoomTemperature				= tRoomTemperatureSignal.ExtractSamplesAt(						afJulianDates );
	%
	% manage the occupancy, that might be void
	if( numel( tPeopleCounterSignal ) == 0 )
		%
		afManualPeopleCounter = zeros( size( afRoomCO2 ) );
		%
	else%
		%
		afManualPeopleCounter = tPeopleCounterSignal.ExtractSamplesAt( afJulianDates );
		%
	end;%
	%
	%
% 	occupancy
	aafInputs(:, 1)	= afManualPeopleCounter;
	%
	% air inlet
	aafInputs(:, 2) =																		...
			OccupancyEstimators.VentingPercentageToMassFlow( afAirInletValveOpening, 'T' )	... mass flow
		.*	afCentralPumpOpeningPercentage													... central pump opening
		.*	( afRoomCO2 - afAirInletCO2 );													... times "delta CO2"
	%
	% temperature
	aafInputs(:, 3) = afRoomTemperature - afAirInletTemperature;
	%
	% CO2
	afOutput = afRoomCO2 - tEstimator.fCO2Offset;
	%
	%
	%
	%
	% DEBUG
% 	tTemperatureSignal	= Signal();
% 	tAirInletSignal		= Signal();
% 	tCO2Signal			= Signal();
% 	tOccupancySignal	= Signal();
% 	%
% 	tTemperatureSignal.Insert(	aafInputs(:, 3), afJulianDates );
% 	tAirInletSignal.Insert(		aafInputs(:, 2), afJulianDates );
% 	tCO2Signal.Insert(			afOutput, afJulianDates );
% 	tOccupancySignal.Insert(	aafInputs(:, 1), afJulianDates );
% 	%
% 	tTemperatureSignal.strDescription	= 'temperature - effective signal';
% 	tAirInletSignal.strDescription		= 'air inlet - effective signal';
% 	tCO2Signal.strDescription			= 'co2 - effective signal';
% 	tOccupancySignal.strDescription		= 'occupancy - effective signal';
% 	%
% 	tTemperatureSignal.Plot(1);
% 	tAirInletSignal.Plot(2);
% 	tCO2Signal.Plot(3);
% 	tOccupancySignal.Plot(4);
	%
	%
	%
end % function

