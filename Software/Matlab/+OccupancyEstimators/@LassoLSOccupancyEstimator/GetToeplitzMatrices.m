function [aafA, aaafB] = GetToeplitzMatrices( tEstimator, iNumberOfSamples )
	%
	% for readability
	iNumberOfInputs = numel(tEstimator.tIdentifiedModel.B);
	%
	%
	% ---------------------------------------------------------------
	% autoregressive part
	%
	afCurrentImpulseResponse = zeros(1, iNumberOfSamples);
	%
	iCurrentResponseLength = min( numel( tEstimator.tIdentifiedModel.A(1, :) ), iNumberOfSamples );
	%
	afCurrentImpulseResponse(1:iCurrentResponseLength) =		...
		[ 0		tEstimator.tIdentifiedModel.A(1, 2:iCurrentResponseLength)];
	%
	aafA = tril( toeplitz( afCurrentImpulseResponse ) );
	%
	%
	% inputs part
	% CASE OLD VERSION OF THE SYS-ID TOOLBOX
% 	iNumberOfInputs			= numel(tEstimator.tIdentifiedModel.B(:,1));
% 	iCurrentResponseLength	= numel(tEstimator.tIdentifiedModel.B(1,:)) + 1;
% 	iImpulseResponsesLength = numel([ tEstimator.tIdentifiedModel.B(1,:), zeros(1, iNumberOfSamples - iCurrentResponseLength + 1) ]);
	%
	%
	% ---------------------------------------------------------------
	% moving average part
	%
	% storage allocation
	aaafB = zeros( iNumberOfSamples, iNumberOfSamples, iNumberOfInputs );
	%
	% one separate computation for each input
	for iInputIndex = 1:iNumberOfInputs;
		%
		afCurrentImpulseResponse = zeros(1, iNumberOfSamples);
		%
		iCurrentResponseLength = min( numel(tEstimator.tIdentifiedModel.B{iInputIndex}), iNumberOfSamples - 1);
		%
		afCurrentImpulseResponse(2:iCurrentResponseLength+1) =		...
			tEstimator.tIdentifiedModel.B{iInputIndex}(1:iCurrentResponseLength);
		%
		% CASE OLD VERSION OF THE SYS-ID TOOLBOX
		%	[ tEstimator.tIdentifiedModel.B(iInputIndex,:)	zeros(1, iNumberOfSamples - iCurrentResponseLength + 1) ];
		%
		% DEBUG
% 		size(aaafB(:,:,iInputIndex))
% 		size(tEstimator.tIdentifiedModel.B{iInputIndex})
% 		size(afCurrentImpulseResponse)
% 		size(tril( toeplitz( afCurrentImpulseResponse ) ) )
% 		pause
		%
		aaafB(:,:,iInputIndex) = tril( toeplitz( afCurrentImpulseResponse ) );
		%
	end;%
	%
end % function

