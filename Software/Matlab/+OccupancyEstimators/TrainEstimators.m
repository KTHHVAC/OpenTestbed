clc;
close all;
clear classes;
clear all;
import OccupancyEstimators.*;
addpath ./SSplines/


% Old datasets
% load ../../Datasets/OccupancyEstimators/2013_07/dataset.mat;


% ---------------------------------------------------------------------------------
% load the raw data
%
% tDataset =																				...
% 	ConvertTxtFromWebsite(																...
% 			{'C:/131102000000_131106235959.txt'},										...
% 			120,																		... number of seconds
% 			 '../../Datasets/OccupancyEstimators/2013_11/dataset.mat'					);
%
load ../../Datasets/OccupancyEstimators/2013_11/dataset.mat;
%
tTrainingSet = Converter.SelectDates(										...
				tDataset,													...
				Time.GregorianDateToJulianDate( 2013, 11, 2,  0, 0, 0 ),	...
				Time.GregorianDateToJulianDate( 2013, 11, 3, 13, 0, 0 )		);
% 				Time.GregorianDateToJulianDate( 2013, 11, 2,  0, 0, 0 ),	...
% 				Time.GregorianDateToJulianDate( 2013, 11, 6, 13, 0, 0 )		);
%
tTestSet = Converter.SelectDates(											...
				tDataset,													...
				Time.GregorianDateToJulianDate( 2013, 11, 6, 13,  0, 0 ),	...
				Time.GregorianDateToJulianDate( 2013, 11, 6, 17,  0, 0 )	);
%
% DEBUG
fprintf('loaded %d samples\n',			numel( tDataset.afSignalsTimes ));
fprintf('- %d samples for training\n',	numel( tTrainingSet.afSignalsTimes ));
fprintf('- %d samples for test\n',		numel( tTestSet.afSignalsTimes ));
%
tSignalsIDs = Signal.GetSignalsIDs();
tDevicesIDs = Signal.GetDevicesIDs();
%
tAirInletValveOpeningTrainingSignal	= Converter.GetSignal( tTrainingSet, tSignalsIDs.iFreshAirInletValveOpeningPercentage,	tDevicesIDs.iPLC_A225 );
tAirInletTemperatureTrainingSignal	= Converter.GetSignal( tTrainingSet, tSignalsIDs.iTemperatureOfFreshAirInlet,			tDevicesIDs.iMote1047 );
tAirInletCO2TrainingSignal			= Converter.GetSignal( tTrainingSet, tSignalsIDs.iCO2OfFreshAirInlet,					tDevicesIDs.iMote1047 );
tRoomCO2TrainingSignal				= Converter.GetSignal( tTrainingSet, tSignalsIDs.iCO2OfEnvironment,						tDevicesIDs.iPLC_A225 );
tRoomTemperatureTrainingSignal		= Converter.GetSignal( tTrainingSet, tSignalsIDs.iTemperatureOfEnvironment,				tDevicesIDs.iPLC_A225 );
tPeopleCounterTrainingSignal		= Converter.GetSignal( tTrainingSet, tSignalsIDs.iOccupancy,							tDevicesIDs.iPhotoelectricPeopleCounter );
%
tAirInletValveOpeningTestSignal	= Converter.GetSignal( tTestSet, tSignalsIDs.iFreshAirInletValveOpeningPercentage,	tDevicesIDs.iPLC_A225 );
tAirInletTemperatureTestSignal	= Converter.GetSignal( tTestSet, tSignalsIDs.iTemperatureOfFreshAirInlet,			tDevicesIDs.iMote1047 );
tAirInletCO2TestSignal			= Converter.GetSignal( tTestSet, tSignalsIDs.iCO2OfFreshAirInlet,					tDevicesIDs.iMote1047 );
tRoomCO2TestSignal				= Converter.GetSignal( tTestSet, tSignalsIDs.iCO2OfEnvironment,						tDevicesIDs.iPLC_A225 );
tRoomTemperatureTestSignal		= Converter.GetSignal( tTestSet, tSignalsIDs.iTemperatureOfEnvironment,				tDevicesIDs.iPLC_A225 );
tPeopleCounterTestSignal		= Converter.GetSignal( tTestSet, tSignalsIDs.iOccupancy,							tDevicesIDs.iPhotoelectricPeopleCounter );



% ---------------------------------------------------------------------------------
% set the parameters
fSamplingTimeInSeconds	= (tDataset.afSignalsTimes(2) - tDataset.afSignalsTimes(1)) / Time.GetJulianSecond();
iWindowsLengthInSamples	= 100;
afPlausibleLambdas		= linspace(0.05, 0.25, 20);
fCO2Offset				= 250;



% % ---------------------------------------------------------------------------------
% % construct the objects, train them, test them, and save them
% %
% fprintf('Allocation of the parametric estimator\n');
% tParametricEstimator =									...
% 	OccupancyEstimators.LassoLSOccupancyEstimator(		...
% 		'ARX',											...
% 		fSamplingTimeInSeconds,							...
% 		iWindowsLengthInSamples,						...
% 		fCO2Offset										);	
% %
% fprintf('Train the parametric estimator\n');
% tParametricEstimator.Train(								...
% 	tAirInletValveOpeningTrainingSignal,				...
% 	tAirInletTemperatureTrainingSignal,					...
% 	tAirInletCO2TrainingSignal,							...
% 	tRoomCO2TrainingSignal,								...
% 	tRoomTemperatureTrainingSignal,						...
% 	tPeopleCounterTrainingSignal,					...
% 	afPlausibleLambdas									);
% %
% fprintf('Test the parametric estimator\n');
% tParametricEstimator.Test(								...
% 	tAirInletValveOpeningTestSignal,					...
% 	tAirInletTemperatureTestSignal,						...
% 	tAirInletCO2TestSignal,								...
% 	tRoomCO2TestSignal,									...
% 	tRoomTemperatureTestSignal,							...
% 	tPeopleCounterTestSignal						);
% %
% tParametricEstimator.SaveEstimatorToMatFile( './+OccupancyEstimators/TrainedEstimators/ParametricLassoLSEstimator.mat' );



% ---------------------------------------------------------------------------------
% construct the objects, train them, test them, and save them
%
fprintf('Allocation of the nonparametric estimator\n');
tNonparametricEstimator =								...
	OccupancyEstimators.LassoLSOccupancyEstimator(		...
		'SSplines',										...
		fSamplingTimeInSeconds,							...
		iWindowsLengthInSamples,						...
		fCO2Offset										);	
%
fprintf('Train the nonparametric estimator\n');
tNonparametricEstimator.Train(							...
	tAirInletValveOpeningTrainingSignal,				...
	tAirInletTemperatureTrainingSignal,					...
	tAirInletCO2TrainingSignal,							...
	tRoomCO2TrainingSignal,								...
	tRoomTemperatureTrainingSignal,						...
	tPeopleCounterTrainingSignal,					...
	afPlausibleLambdas									);
%
fprintf('Test the nonparametric estimator\n');
tNonparametricEstimator.Test(							...
	tAirInletValveOpeningTestSignal,					...
	tAirInletTemperatureTestSignal,						...
	tAirInletCO2TestSignal,								...
	tRoomCO2TestSignal,									...
	tRoomTemperatureTestSignal,							...
	tPeopleCounterTestSignal						);
%
tNonparametricEstimator.SaveEstimatorToMatFile( './+OccupancyEstimators/TrainedEstimators/NonparametricLassoLSEstimator.mat' );




