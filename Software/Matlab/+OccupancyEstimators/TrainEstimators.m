clc;
close all;
clear classes;
clear all;
import OccupancyEstimators.*;
addpath ./SSplines/


% ---------------------------------------------------------------------------------
% load the raw data
%
% tDataset =																				...
% 	ConvertTxtFromWebsite(																...
% 			{'../../Datasets/OccupancyEstimators/2013_07/130714_130729.txt',			...
% 			 '../../Datasets/OccupancyEstimators/2013_07/manual_people_counting.txt'},	...
% 			30,																			... number of seconds
% 			 '../../Datasets/OccupancyEstimators/2013_07/dataset.mat',					...
% 			[19, 1006]																	);
%
% for readability
iDownsamplingFactor						= 1;
tLabels.ROOM_TEMPERATURE				= 1;
tLabels.TEMPERATURE_OF_AIR_INLET		= 2;
tLabels.ROOM_CO2						= 3;
tLabels.CO2_OF_AIR_INLET				= 4;
tLabels.MANUAL_PEOPLE_COUNTER			= 5;
tLabels.AIR_INLET_VALVE_OPENING			= 6;
load ../../Datasets/OccupancyEstimators/2013_07/dataset.mat;
%
tTrainingSet = Converter.SelectDates(										...
				tDataset,													...
				Time.GregorianDateToJulianDate( 2013, 7, 15,  0, 0, 0 ),	...
				Time.GregorianDateToJulianDate( 2013, 7, 20,  0, 0, 0 )		);
%
tTestSet = Converter.SelectDates(											...
				tDataset,													...
				Time.GregorianDateToJulianDate( 2013, 7, 23,  0,  0, 0 ),	...
				Time.GregorianDateToJulianDate( 2013, 7, 25,  0,  0, 0 )	);% offline was 21 - 28
%
% DEBUG
fprintf('loaded %d samples\n',			numel( tDataset.afSignalsTimes ));
fprintf('- %d samples for training\n',	numel( tTrainingSet.afSignalsTimes ));
fprintf('- %d samples for test\n',		numel( tTestSet.afSignalsTimes ));
%
tSignalsIDs = Signal.GetSignalsIDs();
tDevicesIDs = Signal.GetDevicesIDs();
%
tAirInletValveOpeningTrainingSignal	= Converter.GetSignal( tTrainingSet, tSignalsIDs.iFreshAirInletValveOpeningPercentage,	tDevicesIDs.iPLC_A225 );
tAirInletTemperatureTrainingSignal	= Converter.GetSignal( tTrainingSet, tSignalsIDs.iTemperatureOfFreshAirInlet,			1004 );
tAirInletCO2TrainingSignal			= Converter.GetSignal( tTrainingSet, tSignalsIDs.iCO2OfFreshAirInlet,					1004 );
tRoomCO2TrainingSignal				= Converter.GetSignal( tTrainingSet, tSignalsIDs.iCO2OfEnvironment,						tDevicesIDs.iPLC_A225 );
tRoomTemperatureTrainingSignal		= Converter.GetSignal( tTrainingSet, tSignalsIDs.iTemperatureOfEnvironment,				tDevicesIDs.iPLC_A225 );
tManualPeopleCounterTrainingSignal	= Converter.GetSignal( tTrainingSet, tSignalsIDs.iOccupancy,							tDevicesIDs.iManualPeopleCounter );
%
tAirInletValveOpeningTestSignal	= Converter.GetSignal( tTestSet, tSignalsIDs.iFreshAirInletValveOpeningPercentage,	tDevicesIDs.iPLC_A225 );
tAirInletTemperatureTestSignal	= Converter.GetSignal( tTestSet, tSignalsIDs.iTemperatureOfFreshAirInlet,			1004 );
tAirInletCO2TestSignal			= Converter.GetSignal( tTestSet, tSignalsIDs.iCO2OfFreshAirInlet,					1004 );
tRoomCO2TestSignal				= Converter.GetSignal( tTestSet, tSignalsIDs.iCO2OfEnvironment,						tDevicesIDs.iPLC_A225 );
tRoomTemperatureTestSignal		= Converter.GetSignal( tTestSet, tSignalsIDs.iTemperatureOfEnvironment,				tDevicesIDs.iPLC_A225 );
tManualPeopleCounterTestSignal	= Converter.GetSignal( tTestSet, tSignalsIDs.iOccupancy,							tDevicesIDs.iManualPeopleCounter );



% ---------------------------------------------------------------------------------
% set the parameters
fSamplingTimeInSeconds	= (tDataset.afSignalsTimes(2) - tDataset.afSignalsTimes(1)) / Time.GetJulianSecond();
iWindowsLengthInSamples	= 100;
afPlausibleLambdas		= linspace(0.06, 0.1, 5);
fCO2Offset				= 400;



% ---------------------------------------------------------------------------------
% construct the objects, train them, test them, and save them
%
fprintf('Allocation of the parametric estimator\n');
tParametricEstimator =									...
	OccupancyEstimators.LassoLSOccupancyEstimator(		...
		'ARX',											...
		fSamplingTimeInSeconds,							...
		iWindowsLengthInSamples,						...
		fCO2Offset										);	
%
fprintf('Train the parametric estimator\n');
tParametricEstimator.Train(								...
	tAirInletValveOpeningTrainingSignal,				...
	tAirInletTemperatureTrainingSignal,					...
	tAirInletCO2TrainingSignal,							...
	tRoomCO2TrainingSignal,								...
	tRoomTemperatureTrainingSignal,						...
	tManualPeopleCounterTrainingSignal,					...
	afPlausibleLambdas									);
%
fprintf('Test the parametric estimator\n');
tParametricEstimator.Test(								...
	tAirInletValveOpeningTestSignal,					...
	tAirInletTemperatureTestSignal,						...
	tAirInletCO2TestSignal,								...
	tRoomCO2TestSignal,									...
	tRoomTemperatureTestSignal,							...
	tManualPeopleCounterTestSignal						);
%
tParametricEstimator.SaveEstimatorToMatFile( './+OccupancyEstimators/TrainedEstimators/ParametricLassoLSEstimator.mat' );



% ---------------------------------------------------------------------------------
% construct the objects, train them, test them, and save them
%
fprintf('Allocation of the nonparametric estimator\n');
tNonparametricEstimator =								...
	OccupancyEstimators.LassoLSOccupancyEstimator(		...
		'SSplines',										...
		fSamplingTimeInSeconds,							...
		iWindowsLengthInSamples,						...
		fCO2Offset										);	
%
fprintf('Train the nonparametric estimator\n');
tNonparametricEstimator.Train(							...
	tAirInletValveOpeningTrainingSignal,				...
	tAirInletTemperatureTrainingSignal,					...
	tAirInletCO2TrainingSignal,							...
	tRoomCO2TrainingSignal,								...
	tRoomTemperatureTrainingSignal,						...
	tManualPeopleCounterTrainingSignal,					...
	afPlausibleLambdas									);
%
fprintf('Test the nonparametric estimator\n');
tNonparametricEstimator.Test(							...
	tAirInletValveOpeningTestSignal,					...
	tAirInletTemperatureTestSignal,						...
	tAirInletCO2TestSignal,								...
	tRoomCO2TestSignal,									...
	tRoomTemperatureTestSignal,							...
	tManualPeopleCounterTestSignal						);
%
tNonparametricEstimator.SaveEstimatorToMatFile( './+OccupancyEstimators/TrainedEstimators/NonparametricLassoLSEstimator.mat' );



