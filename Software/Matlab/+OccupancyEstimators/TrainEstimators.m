clc;
close all;
clear classes;
clear all;
import OccupancyEstimators.*;
addpath ./SSplines/


% ---------------------------------------------------------------------------------
% load the raw data
%
% tDataset =																	...
% 	ConvertTxtFromWebsite(													...
% 			{'~/131102000000_131113235959.txt'},							...
% 			120,															... number of seconds
% 			 '../../Datasets/OccupancyEstimators/2013_11/dataset.mat'		);
%
load ../../Datasets/OccupancyEstimators/2013_11/dataset.mat;
%
tTrainingSet = Converter.SelectDates(										...
				tDataset,													...
				Time.GregorianDateToJulianDate( 2013, 11,  4,  0, 0, 0 ),	...
				Time.GregorianDateToJulianDate( 2013, 11, 11, 17, 0, 0 )	);
%
tTestSet = Converter.SelectDates(											...
				tDataset,													...
				Time.GregorianDateToJulianDate( 2013, 11,  10, 15,  0, 0 ),	...
				Time.GregorianDateToJulianDate( 2013, 11,  11, 18,  0, 0 )	);
%
% DEBUG
fprintf('loaded %d samples\n',			numel( tDataset.afSignalsTimes ));
fprintf('- %d samples for training\n',	numel( tTrainingSet.afSignalsTimes ));
fprintf('- %d samples for test\n',		numel( tTestSet.afSignalsTimes ));
%
tSignalsIDs = Signal.GetSignalsIDs();
tDevicesIDs = Signal.GetDevicesIDs();
%
tAirInletValveOpeningTrainingSignal						= Converter.GetSignal( tTrainingSet, tSignalsIDs.iFreshAirInletValveOpeningPercentage,				tDevicesIDs.iPLC_A225 );
tAirInletTemperatureTrainingSignal						= Converter.GetSignal( tTrainingSet, tSignalsIDs.iTemperatureOfFreshAirInlet,						tDevicesIDs.iMote1047 );
tAirInletCO2TrainingSignal								= Converter.GetSignal( tTrainingSet, tSignalsIDs.iCO2OfFreshAirInlet,								tDevicesIDs.iMote1047 );
tCentralVentilationPumpOpeningPercentageTrainingSignal	= Converter.GetSignal( tTrainingSet, tSignalsIDs.iCentralSystemPumpOpeningPercentageVentilation,	tDevicesIDs.iPLC );
tRoomCO2TrainingSignal									= Converter.GetSignal( tTrainingSet, tSignalsIDs.iCO2OfEnvironment,									tDevicesIDs.iPLC_A225 );
tRoomTemperatureTrainingSignal							= Converter.GetSignal( tTrainingSet, tSignalsIDs.iTemperatureOfEnvironment,							tDevicesIDs.iPLC_A225 );
tPeopleCounterTrainingSignal							= Converter.GetSignal( tTrainingSet, tSignalsIDs.iOccupancy,										tDevicesIDs.iPhotoelectricPeopleCounter );
%
tAirInletValveOpeningTestSignal							= Converter.GetSignal( tTestSet, tSignalsIDs.iFreshAirInletValveOpeningPercentage,				tDevicesIDs.iPLC_A225 );
tAirInletTemperatureTestSignal							= Converter.GetSignal( tTestSet, tSignalsIDs.iTemperatureOfFreshAirInlet,						tDevicesIDs.iMote1047 );
tAirInletCO2TestSignal									= Converter.GetSignal( tTestSet, tSignalsIDs.iCO2OfFreshAirInlet,								tDevicesIDs.iMote1047 );
tCentralVentilationPumpOpeningPercentageTestSignal		= Converter.GetSignal( tTestSet, tSignalsIDs.iCentralSystemPumpOpeningPercentageVentilation,	tDevicesIDs.iPLC );
tRoomCO2TestSignal										= Converter.GetSignal( tTestSet, tSignalsIDs.iCO2OfEnvironment,									tDevicesIDs.iPLC_A225 );
tRoomTemperatureTestSignal								= Converter.GetSignal( tTestSet, tSignalsIDs.iTemperatureOfEnvironment,							tDevicesIDs.iPLC_A225 );
tPeopleCounterTestSignal								= Converter.GetSignal( tTestSet, tSignalsIDs.iOccupancy,										tDevicesIDs.iPhotoelectricPeopleCounter );
% 
% % default putting to zero
% for iDay = 2:11;
% 	%
% 	tAirInletValveOpeningTrainingSignal.SetValuesBetweenJulianDates(	...
% 		0,																...
% 		Time.GregorianDateToJulianDate( 2013, 11, iDay,   16,  0, 0 ),	...
% 		Time.GregorianDateToJulianDate( 2013, 11, iDay+1,  7,  0, 0 )	);
% 	%
% end;%
% %
% % this putting to zero is because it was measured
% tAirInletValveOpeningTrainingSignal.SetValuesBetweenJulianDates(	...
% 	0,																...
% 	Time.GregorianDateToJulianDate( 2013, 11,  7, 15, 45, 0 ),		...
% 	Time.GregorianDateToJulianDate( 2013, 11,  8,  7,  0, 0 )		);
% %
% tAirInletValveOpeningTrainingSignal.SetValuesBetweenJulianDates(	...
% 	0,																...
% 	Time.GregorianDateToJulianDate( 2013, 11,  8, 15, 37, 0 ),		...
% 	Time.GregorianDateToJulianDate( 2013, 11,  9,  7,  0, 0 )		);
% %
% tAirInletValveOpeningTrainingSignal.SetValuesBetweenJulianDates(	...
% 	0,																...
% 	Time.GregorianDateToJulianDate( 2013, 11, 11, 15, 42, 0 ),		...
% 	Time.GregorianDateToJulianDate( 2013, 11, 12,  7,  0, 0 )		);




% ---------------------------------------------------------------------------------
% set the parameters
fSamplingTimeInSeconds	= (tDataset.afSignalsTimes(2) - tDataset.afSignalsTimes(1)) / Time.GetJulianSecond();
iWindowsLengthInSamples	= 100;
fCO2Offset				= 400;



% ---------------------------------------------------------------------------------
% construct the objects, train them, test them, and save them
%
afPlausibleLambdas		= linspace(0.3, 0.7, 5);
%
fprintf('Allocation of the parametric estimator\n');
tParametricEstimator =										...
	OccupancyEstimators.LassoLSOccupancyEstimator(			...
		'ARX',												...
		fSamplingTimeInSeconds,								...
		iWindowsLengthInSamples,							...
		fCO2Offset											);	
%
fprintf('Train the parametric estimator\n');
tParametricEstimator.Train(									...
	tAirInletValveOpeningTrainingSignal,					...
	tAirInletTemperatureTrainingSignal,						...
	tAirInletCO2TrainingSignal,								...
	tCentralVentilationPumpOpeningPercentageTrainingSignal,	...
	tRoomCO2TrainingSignal,									...
	tRoomTemperatureTrainingSignal,							...
	tPeopleCounterTrainingSignal,							...
	afPlausibleLambdas										);
% %
% fprintf('Test the parametric estimator\n');
% tParametricEstimator.Test(								...
% 	tAirInletValveOpeningTestSignal,						...
% 	tAirInletTemperatureTestSignal,							...
% 	tAirInletCO2TestSignal,									...
% 	tCentralVentilationPumpOpeningPercentageTestSignal,		...
% 	tRoomCO2TestSignal,										...
% 	tRoomTemperatureTestSignal,								...
% 	tPeopleCounterTestSignal								);
% %
tParametricEstimator.SaveEstimatorToMatFile( './+OccupancyEstimators/TrainedEstimators/ParametricLassoLSEstimator.mat' );



% ---------------------------------------------------------------------------------
% construct the objects, train them, test them, and save them
%
afPlausibleLambdas		= linspace(0.08, 0.13, 5);
%
fprintf('Allocation of the nonparametric estimator\n');
tNonparametricEstimator =									...
	OccupancyEstimators.LassoLSOccupancyEstimator(			...
		'SSplines',											...
		fSamplingTimeInSeconds,								...
		iWindowsLengthInSamples,							...
		fCO2Offset											);	
%
fprintf('Train the nonparametric estimator\n');
tNonparametricEstimator.Train(								...
	tAirInletValveOpeningTrainingSignal,					...
	tAirInletTemperatureTrainingSignal,						...
	tAirInletCO2TrainingSignal,								...
	tCentralVentilationPumpOpeningPercentageTrainingSignal,	...
	tRoomCO2TrainingSignal,									...
	tRoomTemperatureTrainingSignal,							...
	tPeopleCounterTrainingSignal,							...
	afPlausibleLambdas										);
%
% fprintf('Test the nonparametric estimator\n');
% tNonparametricEstimator.Test(								...
% 	tAirInletValveOpeningTestSignal,						...
% 	tAirInletTemperatureTestSignal,							...
% 	tAirInletCO2TestSignal,									...
% 	tCentralVentilationPumpOpeningPercentageTestSignal,		...
% 	tRoomCO2TestSignal,										...
% 	tRoomTemperatureTestSignal,								...
% 	tPeopleCounterTestSignal								);
%
tNonparametricEstimator.SaveEstimatorToMatFile( './+OccupancyEstimators/TrainedEstimators/NonparametricLassoLSEstimator.mat' );




