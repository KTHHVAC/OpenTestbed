% %Fail safe for closing the connection to HVAC
% if (any(strcmp(who,'objTCPConnection')))
%     fclose( objTCPConnection.tTcpIpClient );
% end
% 
% % clear
% close all;
% clear all;
% clear classes;
% clc;
% 
% % path to Github
% addpath 'C:\Users\madalena\Documents\GitHub\OpenTestbed\Software\Matlab'
% 
% % import the necessary classes
% import EstimationAlgorithms.*;
% import Controller.*;
% import MatlabToTikZ.*;
% import InternetConnection.*;
% import Scenarios.*;
%    
% global objTCPConnection;
% 
% % 1. Call the constructor of the common communication object
% objTCPConnectionParameters = InternetConnection.LoadDefaultTCPConnectionParameters();
% objTCPConnection = InternetConnection.KTHConnection( objTCPConnectionParameters ); 
% 	
% % 2. Controller parameters
% tControlSettings = Controller.LoadDefaultControllerParameters();
% 	
% % 3. Set up experiment settings
% tControlSettings.Runtime                = 12; %In hours
% tControlSettings.actTime                = 30; %In seconds
%     
% %     tExperiment.fExperimentTimeInHours      = 2;
% %     tExperiment.fActuatingTimeInHours       = 30/3600;
% %         tExperiment.fExperimentTimeDanielInHours      = 2;
% %     tExperiment.fActuatingTimeDanielInHours       = 30/3600;
% %     tExperiment.achFolder				= '../Results/MatFiles/';
%     
% % 4. Call the constructrs of the controller to be used
% 
% % Controller settings for the PI Controller
% tControlSettings.DeviceID				= [1035 2002]; %Mote(Temperature), PLC(CO2)
% tControlSettings.SensorSignalID			= [10 30];
% tControlSettings.ActuatorSignalID		= [61 62 63 65];
% 	
% % 	tControlSettings = Controller.LoadDefaultControllerParameters();
% 
% mainPID = Controller.PIDController( tControlSettings, objTCPConnection );
% 
% %     experiment = Controller.Experiment( tExperiment );
% 
% % 5. Implement the loop
% 
% %Run time for the experiment
% mainPID.SetFutureJulianDate( tControlSettings.Runtime, 'E' );
% %experiment.SetFutureJulianDate( tExperiment.fExperimentTimeInHours, 'E' );
% %Run time until next actuation
% tControlSettings.sleepTime = tControlSettings.actTime/2; 
% tControlSettings.actTime = tControlSettings.actTime/3600; %Converts to Hours
% mainPID.SetFutureJulianDate( tControlSettings.actTime, 'A' );
% %mainPID.SetFutureJulianDate( tExperiment.fActuatingTimeInHours, 'A' );
% 
% 
% mainPID.iteration = 1;
% disp('Starting main loop...');
% tic;
% 
% while (mainPID.CheckCurrentAndFutureJulianDates( 'E' ) == 0)
%     if( mainPID.CheckCurrentAndFutureJulianDates( 'A' ) )
%         fprintf('Time left for next actuation: 0\nActuation!\n');
% 		mainPID.SetFutureJulianDate( tControlSettings.actTime, 'A' );
%         mainPID.AcquireMeasurements( );  
%         mainPID.ComputeControlInputs( );
%         mainPID.ComputeFeedback( );
%         fprintf('Iteration: %d\n', mainPID.iteration);
%         mainPID.iteration = mainPID.iteration + 1;
%     end
%     fprintf('\n'); %Breaks the line for improved readability
%  	pause(tControlSettings.sleepTime);
% end
% mainPID.PlotResults( );
% 
% %Reset all actuation values to zero before finishing the program
% 
% disp('Ending main loop...');
% toc;
% mainPID.ControlOutput = [0 0 0];
% mainPID.ComputeFeedback( );
% fclose( objTCPConnection.tTcpIpClient );
% 
% disp(strcat('Error Report: ', mainPID.GetErrorReport()));
% disp('The Connection is:');
% disp(objTCPConnection.tTcpIpClient.Status);


%% Other (PI)

% locked out from the system
if( any( strcmp( who, 'tTCPConnection' ) ) )
	
	fclose( tTCPConnection.tTcpIpClient );
	
end;

close all;
clear all;
clear classes;
clc;
 
% import the necessary classes
import Controller.*;
import MatlabToTikZ.*;
import InternetConnection.*;
import Scenarios.*;


% allocate the TCP connection and the controller
global tTCPConnection;
tTCPConnectionParameters	= InternetConnection.LoadDefaultTCPConnectionParameters();
tTCPConnection				= InternetConnection.KTHConnection( tTCPConnectionParameters );

% load the parameters	
global tAirConditionedPIController;
tAirConditionedPIControllerParameters	= Controller.LoadExperimentalPIControllerParameters();  
tAirConditionedPIController				= Controller.ExperimentalPIController( tAirConditionedPIControllerParameters, tTCPConnection );  


bUseTimer = true;

if ~bUseTimer
	
	tAirConditionedPIController.OnStart();
	RunExperimentalPI( tAirConditionedPIDController, tTCPConnection );
	tAirConditionedPIController.OnExitNoTCPClose();
	
else
	
	tControllerDebugTimer 	= timer(																				...
		'TimerFcn',			{@Controller.RunExperimentalPI,		  tAirConditionedPIController, tTCPConnection},		...
		'ErrorFcn',			{@Controller.OnError,				{ tAirConditionedPIController } },					...
		'StartFcn',			{@Controller.OnStart,				{ tAirConditionedPIController } },					...
		'StopFcn',			{@Controller.OnExitNoTCPClose,		{ tAirConditionedPIController } },					...
		'Period',			tAirConditionedPIController.fSamplingTimeInSeconds,										...
		'TasksToExecute',	tAirConditionedPIController.iNumberOfRunsToBeExecuted,									...
		'ExecutionMode',	'fixedRate',																			...
		'BusyMode',			'drop'																);

	start( tControllerDebugTimer );
	
end 


% Experiment is done -> We close the connection
% 
% fclose( tTCPConnection.tTcpIpClient );
%
% always delete timers before exiting!
%
% delete(tControllerDebugTimer);


