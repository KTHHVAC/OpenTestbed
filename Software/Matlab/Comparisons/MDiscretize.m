function [A,B,E,C,D,G] = MDiscretize(Ac, Bc, Ec, dT)
% Prepare discrete system matrices.
%
nu = size(Bc,2);
nx = size(Ac,2);
BB = [Bc Ec];
D  = zeros(1,nu);

C = [1 zeros(1,size(Ac,1)-1)];
%% Get discretized system
% 
sys  = ss( Ac, BB, C, 0 );
sysd = c2d( sys, dT,'zoh'); %'zoh'
[A, Bd, C, Dd] = ssdata( sysd );
% 
%% or, equivalently:
% A = expm(Ac*dT);
% Bd= Ac\(A-eye(size(Ac)))*BB;
% C = C;

%% Forward Euler - it leads to instability
% A = (eye(nx) + dT*Ac);
% Bd = BB*dT;
% C = C;

%%Backward Euler
% A =(eye(nx) - dT*Ac)^(-1);
% Bd = A*BB*dT;
% C = C*A;
% Dd = C*A*BB*dT;
% D = Dd(:,1:nu);

%% Tustin
% A =(eye(nx) + dT*Ac/2)*(eye(nx) - dT*Ac/2)^(-1);
% HA = (eye(nx) - dT*Ac/2)^(-1);
% Bd = HA*BB*sqrt(dT);
% C = sqrt(dT)*C*HA;
% Dd = C*HA*BB*(dT/2);
% D = Dd(:,1:nu);

%%
E	= Bd(:,nu+1:end);
B	= Bd(:,1:nu);
D	= Dd(:,1:nu);
G = Dd(:,nu+1:end);

end

%===================

%===============================================================