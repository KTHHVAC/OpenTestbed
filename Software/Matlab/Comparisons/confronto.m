% clear all
close all
fVentilationMassFlow = 0.14;

%-------------------------------- 13 State -------------------------------	

% Get the 13-state parameters
[	A13,								... 
	B13,								...
	C13,								...
	E13,								...
	fWall1HeatTransferCoefficient,		...	
	fWall2HeatTransferCoefficient,		...
	fWall3HeatTransferCoefficient,		...
	fWall4HeatTransferCoefficient,		...
	fWall5HeatTransferCoefficient,		...
	fWall6HeatTransferCoefficient,		...
	fWall1IndoorActiveHeatCapacity,		...
	fWall2IndoorActiveHeatCapacity,		...
	fWall3IndoorActiveHeatCapacity,		...
	fWall4IndoorActiveHeatCapacity,		...
	fWall5IndoorActiveHeatCapacity,		...
	fWall6IndoorActiveHeatCapacity,		...
	afWallsArea]						...
		= LoadBuildingParametersAndBuildTemperatureMatrices( fVentilationMassFlow );
%
% Retrieve needed data			
%
iNumberOfInputs			=	size(B13,2);
iNumberOfDisturbances	=	size(E13,2);
dT = 1800;									% 30 min
%

%% Discritize the model 13-state
BB13 = [ B13 E13 ];
%
%
[	A13d,		... 
	B13d,		...
	E13d,		...
	C13d,		...
	D13d,		...
	G13d]		...
			= MDiscretize(A13,B13,E13, dT);

%-------------------------------- Two State -------------------------------		

%% Parametri necessari
Width1			= 9;
Width2			= 9.4;
Heigh			= 3.2;
fRho_fs			= 0.14;
fRho			= 0.04;
RWall1			= 1/(afWallsArea(1)*fWall1HeatTransferCoefficient);
RWall2			= 1/(afWallsArea(2)*fWall2HeatTransferCoefficient);
RWall3			= 1/(afWallsArea(3)*fWall3HeatTransferCoefficient);
RWall4			= 1/(afWallsArea(4)*fWall4HeatTransferCoefficient);
RWall5			= 1/(afWallsArea(5)*fWall5HeatTransferCoefficient);
RWall			=	[	RWall1; ...
						RWall2; ...
						RWall3; ...
						RWall4; ...
						RWall5 ...
					];
% RWall6			= 1/(AreaExtWall*fWall6IndoorActiveHeatCapacity);



%
ATot			=				afWallsArea(1)		...
					+			afWallsArea(2)		...
					+			afWallsArea(3)		...
					+			afWallsArea(4)		...
					+	2	*	afWallsArea(5);
%
Volume			=		Width1					...
					*	Width2					...
					*	Heigh;					
%
AirSpecificHeat = 1007;
AirDensity		= 1.2;

Ca				=		Volume												...
					*	AirSpecificHeat										...
					*	AirDensity ;
Cw				=		afWallsArea(1) * fWall1IndoorActiveHeatCapacity		...
					+	afWallsArea(2) * fWall2IndoorActiveHeatCapacity		...
					+	afWallsArea(3) * fWall3IndoorActiveHeatCapacity		...
					+	afWallsArea(4) * fWall4IndoorActiveHeatCapacity		...
					+	afWallsArea(5) * fWall5IndoorActiveHeatCapacity		...
					+	afWallsArea(6) * fWall6IndoorActiveHeatCapacity;

%		
Raw		= 0;
Rwe		= 0;
for iNumberOfWalls = 1:5
	%
	%
	Raw				= Raw	+ ( fRho_fs + RWall(iNumberOfWalls)/2) /ATot;
	Rwe				= Rwe + ( fRho	+ RWall(iNumberOfWalls)/2) /ATot;
	%
end;%
G				= 0.67;
Cp				= 170;
Area_win		= 2.56;
Rae				= 1/(1.9 * Area_win);

%% Cambio parametri (la cosa semi-decente)
Ca		= 2.4	*	Ca;
Cw		= 1.4	*	Cw;
Raw		= 1		*	Raw;
Rwe		= 1		*	Rwe;

%% Definizione Matrici       
A = zeros(2,2);
A(1,1) = -	1/( Raw * Ca) - 1/(Rae * Ca);
A(1,2) =	1/( Raw * Ca);
A(2,1) =	1/(	Raw	* Cw);
A(2,2) = -	1/( Raw * Cw) - 1/(Rwe * Cw);
%
C = zeros(1,2);
C(1,1) = 1;
%
B = B13(1:2,:);
%
E			= zeros(2,iNumberOfDisturbances);
%
E(1,1)	= 1				/	(Rae *	Ca);
E(1,6)	= G * Area_win	/		Ca;
E(1,7)	= Cp			/		Ca;
%
Beta	= 1/(Rwe*(Ca*10));
%
E(2,1)	= afWallsArea(1)	/ ATot;
E(2,2)	= afWallsArea(2)	/ ATot;
E(2,3)	= afWallsArea(3)	/ ATot;
E(2,4)	= afWallsArea(4)	/ ATot;
E(2,5)	= afWallsArea(5)	/ ATot;
E(2,:)	= E(2,:) * Beta;

%% Discritize the model 2-state
BB = [ B E ];
%
[	Ad,			... 
	Bd,			...
	Ed,			...
	Cd,			...
	Dd,			...
	Gd]			...
		= MDiscretize(A,B,E,dT);
%% Cambio Matrici (la schifezza)
Ed(:,1) = 0.005	*	Ed(:,1);
Ed(:,5) = 0.05	*	Ed(:,5);
Ed(:,4) = 0.3	*	Ed(:,4);
Ed(:,3) = 0.7	*	Ed(:,3);
Ed(:,7) = 0.6	*	Ed(:,7);
Bd(:,1) = 0.16	*	Bd(:,1);
Bd(:,2) = 0.16	*	Bd(:,2);
Bd(:,3) = 0.16	*	Bd(:,3);		
Bd(:,4) = 0.16	*	Bd(:,4);		
Bd(:,5) = 0.16	*	Bd(:,5);	
%% Confronto
%
N = 8; 
x0_13	= ones(13,1)	*21;
x0		= ones(2,1)		*21;
y_13	= zeros(1,N);
y		= zeros(1,N);
w		= zeros(7,N);
u		= zeros(5,N);
% 		
%% Valore Ingressi
% 		u(1,:)  = 15;
% 		u(2,:)  = 35;
% 		u(3,:)  = 35;
% 		u(4,:)  = 24;
% 		u(5,:)  = 5;	
%% Valore disturbi 	
		w(1,:)  = -7;%	+ 2		*	randn(1,N);
		w(2,:)  = 20;%	+ 2		*	randn(1,N);
		w(3,:)  = 21;%	+ 2		*	randn(1,N);
		w(4,:)  = 22;%	+ 2		*	randn(1,N);
		w(5,:)  = 23;%	+ 2		*	randn(1,N);
		w(6,:)  = 67;%	+ 20	*	randn(1,N);
		w(7,:)  = 10;
%% Simulazione
		x_13	= x0_13;
		x		= x0;		
		
	for k = 1:N
		x_13(:,k+1)		=	A13d	* x_13(:,k)	+ E13d	* w(:,k) + B13d	* u(:,k) ;
		y_13(:,k)		=	C13d	* x_13(:,k) + G13d	* w(:,k) + D13d	* u(:,k) ;
		x(:,k+1)		=	Ad		* x(:,k)	+ Ed	* w(:,k) + Bd	* u(:,k);
		y(:,k)			=	Cd		* x(:,k)	+ Gd	* w(:,k) + Dd	* u(:,k) ; 
			
	end
%% Plot
figure(1)
hold on
plot(1:N,y_13,'b*');
plot(1:N,y,'ro');
legend('13-stati','2-stati')
% axis([0 10 0 31]);
legend
hold off
		