% clc
% clear all
% close all
% 
% 
% load('SavedData/Disturbances.mat')
% load('SavedData/LookUpTable.mat')
% load('SavedData/Scenarios.mat')
% 
% cd ..
% 
% tTemperatureControllerParameters								= Controller.LoadStochasticTemperatureMPCParameters();
% tTemperatureController											= Controller.StochasticTemperatureComparisonMPC( tTemperatureControllerParameters );
% tTemperatureController.afLowerBoundForTheVentilation			= repmat(0.14, 1, tTemperatureController.iPredictionHorizon);
% 
% tTemperatureController.fSamplingTimeInSeconds					= 30*60;	
% tTemperatureController.iPredictionHorizon						= 24;		
% tTemperatureController.iNumberOfScenarios						= 1000 ;
% fInitialCondition												= 19;
% 
% %% Implicit Simulation
% 
% tTemperatureController.tModel.afCurrentState					= fInitialCondition*ones(13,1);
% tTemperatureController.tModel.aafDisturbancesScenarioMatrix		= aafDisturbancesScenarioMatrix;
% 
% 
% 
% aafStatesMatrixImplicit													...	
% 	= zeros(	13,														...
% 				tTemperatureController.iPredictionHorizon + 1);
% afInputsMatrixImplicit													...
% 	= zeros(	5,														...
% 				tTemperatureController.iPredictionHorizon);
% aafStatesMatrixImplicit(:,1)											... 
% 	= tTemperatureController.tModel.afCurrentState;
% 
% for iTimeStep = 1:tTemperatureController.iPredictionHorizon
% 	%
% 	tTemperatureController.ComputeControlInputs();
% 	%
% 	afInputsMatrixImplicit(:,iTimeStep)									...
% 		= tTemperatureController.tModel.afInputsSolution;
% 	%
% 	cd Comparisons
% 	Simulation
% 	%
% 	cd ..
% 	tTemperatureController.tModel.afCurrentState				...
% 		= aafStatesMatrixImplicit(:,iTimeStep );
% end;%
% 
% 
% 
% % Explicit Simulation
% x0 = fInitialCondition*ones(2,1);
% afSignificantStatesVector = 12:0.5:27;
% afWallsArea                     =	[30.08,28.8,30.08,28.8,84.6,84.6];
% 
% aafStatesMatrixExplicit													...	
% 	= zeros(	13,														...
% 				tTemperatureController.iPredictionHorizon + 1);
% afInputsMatrixExplicit													...
% 	= zeros(	5,														...
% 				tTemperatureController.iPredictionHorizon);
% aafStatesMatrixExplicit(:,1)											... 
% 	= 19*ones(13,1);
% 
% 
% err=999999; 
% for i=1:length(afSignificantStatesVector) 
% 	delta=abs(afSignificantStatesVector(i)-x0(1)); 
% 	if delta<err 
% 	err=delta; 
% 	indice1=i; 
% 	end 
% end 
% err=999999; 
% for j=1:length(afSignificantStatesVector) 
% 	delta=abs(afSignificantStatesVector(j)-x0(2)); 
% 	if delta<err 
% 	err=delta; 
% 	indice2=j; 
% 	end 
% end 
% 
% afInputsMatrixExplicit(:,1)		=	abaco{indice1,indice2};
% A_tot							=	sum(afWallsArea);
% 
% for k =  1:tTemperatureController.iPredictionHorizon
% 	
% 	aafStatesMatrixExplicit(:,k+1)		=		A	* aafStatesMatrixExplicit(:,k)		...
% 											+	E	* W(:,k)							...
% 											+	B	* afInputsMatrixExplicit(:,k) ;
% 	
% 	fAverageWallsTemperature			=		1/A_tot								...
% 											*	afWallsArea							...
% 											* [	aafStatesMatrixExplicit(3,k+1);		...
% 												aafStatesMatrixExplicit(5,k+1);		...
% 												aafStatesMatrixExplicit(7,k+1);		...
% 												aafStatesMatrixExplicit(9,k+1);		...
% 												aafStatesMatrixExplicit(11,k+1);	...
% 												aafStatesMatrixExplicit(13,k+1)];
% 	
% 	afTwoStatesVector		=	[	aafStatesMatrixExplicit(1,k+1);						...
% 									fAverageWallsTemperature];
% 	
% 	err=999999; 
% 	for i=1:length(afSignificantStatesVector) 
% 		delta=abs(afSignificantStatesVector(i)-afTwoStatesVector(1)); 
% 		if delta<err 
% 			err=delta; 
% 			indice1=i; 
% 		end 
% 	end 
% 	err=999999; 
% 	for j=1:length(afSignificantStatesVector) 
% 		delta=abs(afSignificantStatesVector(j)-afTwoStatesVector(2)); 
% 		if delta<err 
% 			err=delta; 
% 			indice2=j; 
% 		end 
% 	end
% 	
% 	afInputsMatrixExplicit(:,k+1)		=	abaco{indice1,indice2}; 
% 	
% end

N = tTemperatureController.iPredictionHorizon;


afInputsMatrixImplicit	= afInputsMatrixImplicit(:,1:N);
afInputsMatrixExplicit	= afInputsMatrixExplicit(:,1:N);

afOutputVectorImplicit		= C		*	aafStatesMatrixImplicit;
afOutputVectorExplicit		= C		*	aafStatesMatrixExplicit;

fDeltaThImplicit		= afInputsMatrixImplicit(1,:)';
fDeltaTcImplicit		= afInputsMatrixImplicit(2,:)';
fDeltaUhImplicit		= afInputsMatrixImplicit(3,:)';
fDeltaUcImplicit		= afInputsMatrixImplicit(4,:)';
fDeltaRadImplicit		= afInputsMatrixImplicit(5,:)';

fDeltaThExplicit		= afInputsMatrixExplicit(1,:)';
fDeltaTcExplicit		= afInputsMatrixExplicit(2,:)';
fDeltaUhExplicit		= afInputsMatrixExplicit(3,:)';
fDeltaUcExplicit		= afInputsMatrixExplicit(4,:)';
fDeltaRadExplicit		= afInputsMatrixExplicit(5,:)';

% cd Comparisons\	
EnergyComputation


figure(1)

hold on
plot(0:1:N,afOutputVectorImplicit,'--rs','LineWidth',2,...
                       'MarkerEdgeColor','k',...
                       'MarkerFaceColor','r',...
                       'MarkerSize',10)
plot(0:1:N,afOutputVectorExplicit,'--bs','LineWidth',2,...
                       'MarkerEdgeColor','k',...
                       'MarkerFaceColor','b',...
                       'MarkerSize',10)		   
plot(0:1:N,20*ones(1,N+1),'--g','LineWidth',2)
plot(0:1:N,22*ones(1,N+1),'--g','LineWidth',2)
hold off
legend('Implicit','Explicit')
title('output')

figure(2)
subplot(3,2,1)
hold on
stairs(0:N-1,fDeltaRadImplicit,'r');
stairs(0:N-1,fDeltaRadExplicit,'b');
hold off
title('DeltaTrad')
subplot(3,2,2)
hold on
stairs(0:N-1,fDeltaThImplicit,'r');
stairs(0:N-1,fDeltaThExplicit,'b');
hold off
title('DeltaTh')
subplot(3,2,3)
hold on
stairs(0:N-1,fDeltaUhImplicit,'r');
stairs(0:N-1,fDeltaUhExplicit,'b');
hold off
title('u_h')
subplot(3,2,4)
hold on
stairs(0:N-1,fDeltaTcImplicit,'r');
stairs(0:N-1,fDeltaTcExplicit,'b');
hold off
title('DeltaTc')
subplot(3,2,5)
hold on
stairs(0:N-1,fDeltaUcImplicit,'r');
stairs(0:N-1,fDeltaUcExplicit,'b');
hold on
title('u_c')
legend('Implicit','Explicit')

