close all

tTemperatureController.tDiagnostic
fVentilationMassFlow = 0.14;
[	A13,								... 
	B13,								...
	C13,								...
	E13,								...
	fWall1HeatTransferCoefficient,		...	
	fWall2HeatTransferCoefficient,		...
	fWall3HeatTransferCoefficient,		...
	fWall4HeatTransferCoefficient,		...
	fWall5HeatTransferCoefficient,		...
	fWall6HeatTransferCoefficient,		...
	fWall1IndoorActiveHeatCapacity,		...
	fWall2IndoorActiveHeatCapacity,		...
	fWall3IndoorActiveHeatCapacity,		...
	fWall4IndoorActiveHeatCapacity,		...
	fWall5IndoorActiveHeatCapacity,		...
	fWall6IndoorActiveHeatCapacity,		...
	afWallsArea]						...
		= LoadBuildingParametersAndBuildTemperatureMatrices( fVentilationMassFlow );
dT = 1800;									% 30 min
%

%% Discritize the model 13-state
BB13 = [ B13 E13 ];
%
%
[	A13d,		... 
	B13d,		...
	E13d,		...
	C13d,		...
	D13d,		...
	G13d]		...
			= MDiscretize(A13,B13,E13, dT);
%
N					= tTemperatureController.iPredictionHorizon;
nu					= size(tTemperatureController.tModel.aafB, 2);
ny					= size(tTemperatureController.tModel.afC, 1);
A					= tTemperatureController.tModel.aafA;
B					= tTemperatureController.tModel.aafB;
C					= tTemperatureController.tModel.afC;
E					= tTemperatureController.tModel.aafE;		
tx0					= tTemperatureController.tx0;	
afSignificantStatesVector	= 		tTemperatureController.fMinimumStateConsideredLookUpTable		...
								:	tTemperatureController.fStatesStepLookUpTable					...
								:	tTemperatureController.fMaximumStateConsideredLookUpTable;
iNumberOfScenarios	= tTemperatureController.iNumberOfScenarios;
iChoosenScenario    = randi(iNumberOfScenarios,[1,1]);
% W					= tTemperatureController.tModel.aafScenarios(:,iChoosenScenario,:);
W1					= aafDisturbancesScenarioMatrix(:,iChoosenScenario);
W = [];
for i = 1:N
	W(:,i) = [ W1((1+(i-1)*7):i*7)]; 
end

%% Simulation 	

 
x0					= [23; 23];
usc					= zeros(2,N+1);
usc_mod13			= zeros(2,N+1);
x_13_RR				= zeros(13,N+1);
x_13_FR				= zeros(13,N+1);

u_sol_RR			= zeros(nu,N);
u_sol_FR			= zeros(nu,N);

usc(:,1)			= x0;
x_13_RR(:,1)		= x0(1)*ones(13,1);
x_13_FR(:,1)		= x0(1)*ones(13,1);

assign(tx0,x0);
solution_RR			= double(tTemperatureController.tOptimizer);
tTemperatureController.tValuefcn
% Obtaining indices for the desired region
err=999999; 
for i=1:length(afSignificantStatesVector) 
	delta=abs(afSignificantStatesVector(i)-x0(1)); 
	if delta<err 
	err=delta; 
	indice1=i; 
	end 
end 
err=999999; 
for j=1:length(afSignificantStatesVector) 
	delta=abs(afSignificantStatesVector(j)-x0(2)); 
	if delta<err 
	err=delta; 
	indice2=j; 
	end 
end 


solution_FR = tTemperatureController.aafLookUpTable{indice1,indice2};


u_sol_RR(:,1)		= solution_RR;
u_sol_FR(:,1)		= solution_FR;

A_tot				= sum(afWallsArea);



for k =  1:N
		usc(:,k+1)			=	A * usc(:,k) + B * u_sol_RR(:,k) + E * W(:,k); 
		x_13_RR(:,k+1)		=	A13d	* x_13_RR(:,k)	+ E13d	* W(:,k) + B13d	* u_sol_RR(:,k) ;
		x_13_FR(:,k+1)		=	A13d	* x_13_FR(:,k)	+ E13d	* W(:,k) + B13d	* u_sol_FR(:,k) ;
		aver_FR				=	1/A_tot*afWallsArea * [x_13_FR(3,k+1);x_13_FR(5,k+1);x_13_FR(7,k+1);x_13_FR(9,k+1);x_13_FR(11,k+1);x_13_FR(13,k+1)];
		aver_RR				=	1/A_tot*afWallsArea * [x_13_RR(3,k+1);x_13_RR(5,k+1);x_13_RR(7,k+1);x_13_RR(9,k+1);x_13_RR(11,k+1);x_13_RR(13,k+1)];
		usc_mod13_RR		=	[x_13_RR(1,k+1); aver_RR];
		usc_mod13_FR		=	[x_13_FR(1,k+1); aver_FR];
		assign(tx0,usc_mod13_RR);
		solution_RR		= double(tTemperatureController.tOptimizer);
		err=999999; 
		for i=1:length(afSignificantStatesVector) 
			delta=abs(afSignificantStatesVector(i)-usc_mod13_FR(1)); 
			if delta<err 
				err=delta; 
				indice1=i; 
			end 
		end 
	err=999999; 
	for j=1:length(afSignificantStatesVector) 
		delta=abs(afSignificantStatesVector(j)-usc_mod13_FR(2)); 
		if delta<err 
			err=delta; 
			indice2=j; 
		end 
	end 

	solution_FR = tTemperatureController.aafLookUpTable{indice1, indice2};
		u_sol_RR(:,k+1)	= solution_RR;
		u_sol_FR(:,k+1) = solution_FR;
end

u_sol_RR	= u_sol_RR(:,1:N);
u_sol_FR	= u_sol_FR(:,1:N);
y			= C*usc;
y_13_RR		= C13d*x_13_RR;
y_13_FR		= C13d*x_13_FR;
u1_RR		= u_sol_RR(1,:)';
u2_RR		= u_sol_RR(2,:)';
u3_RR		= u_sol_RR(3,:)';
u4_RR		= u_sol_RR(4,:)';
u5_RR		= u_sol_RR(5,:)';

u1_FR		= u_sol_FR(1,:)';
u2_FR		= u_sol_FR(2,:)';
u3_FR		= u_sol_FR(3,:)';
u4_FR		= u_sol_FR(4,:)';
u5_FR		= u_sol_FR(5,:)';

EnergyComputation

figure(1)

hold on
plot(0:1:N,y,'--rs','LineWidth',2,...
                       'MarkerEdgeColor','k',...
                       'MarkerFaceColor','r',...
                       'MarkerSize',10)
plot(0:1:N,y_13_RR,'--bs','LineWidth',2,...
                       'MarkerEdgeColor','k',...
                       'MarkerFaceColor','b',...
                       'MarkerSize',10)
plot(0:1:N,y_13_FR,'--gs','LineWidth',2,...
                       'MarkerEdgeColor','k',...
                       'MarkerFaceColor','g',...
                       'MarkerSize',10)				   
plot(0:1:N,20*ones(1,N+1),'--g','LineWidth',2)
plot(0:1:N,22*ones(1,N+1),'--g','LineWidth',2)
hold off
% axis([0 40 18 26])
legend('2-states', '13-states-RR','13-state-FR')
title('output')

figure(2)
subplot(3,2,1)
hold on
stairs(0:N-1,u5_RR,'b');
stairs(0:N-1,u5_FR,'g');
hold off
title('DeltaTrad')
subplot(3,2,2)
hold on
stairs(0:N-1,u1_RR,'b');
stairs(0:N-1,u1_FR,'g');
hold off
title('DeltaTh')
subplot(3,2,3)
hold on
stairs(0:N-1,u3_RR,'b');
stairs(0:N-1,u3_FR,'g');
hold off
title('u_h')
subplot(3,2,4)
hold on
stairs(0:N-1,u2_RR,'b');
stairs(0:N-1,u2_FR,'g');
hold off
title('DeltaTc')
subplot(3,2,5)
hold on
stairs(0:N-1,u4_RR,'b');
stairs(0:N-1,u4_FR,'g');
hold on
title('u_c')

