function varargout = mainGUI(varargin)
% MAINGUI MATLAB code for mainGUI.fig
%      MAINGUI, by itself, creates a new MAINGUI or raises the existing
%      singleton*.
%
%      H = MAINGUI returns the handle to a new MAINGUI or the handle to
%      the existing singleton*.
%
%      MAINGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MAINGUI.M with the given input arguments.
%
%      MAINGUI('Property','Value',...) creates a new MAINGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before mainGUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to mainGUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help mainGUI

% Last Modified by GUIDE v2.5 01-Nov-2013 08:27:25


% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @mainGUI_OpeningFcn, ...
                   'gui_OutputFcn',  @mainGUI_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes just before mainGUI is made visible.
function mainGUI_OpeningFcn(hObject, eventdata, handles, varargin)
	% This function has no output args, see OutputFcn.
	% hObject    handle to figure
	% eventdata  reserved - to be defined in a future version of MATLAB
	% handles    structure with handles and user data (see GUIDATA)
	% varargin   command line arguments to mainGUI (see VARARGIN)
	%
	global tGlobalStructure;
	%
	set(handles.Connect,			'BackgroundColor', 'red');
	set(handles.Disconnect,			'BackgroundColor', 'red');
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'on');
	set(handles.MPCPanel,			'Visible', 'off');
	%
	set(handles.OpenLoopActuation,	'Visible', 'on');
	set(handles.StartController,	'Visible', 'off');
	set(handles.StopController,		'Visible', 'off');
	%
	%
	%----------------------------------------------------------------------
	% Initializations
	%
	tGlobalStructure.bConnected							= false;
	tGlobalStructure.tGUIParameters.strController		= 'OpenLoop';
	tGlobalStructure.tGUIParameters.tWorkingController	= [];
	%
	tGlobalStructure.atPlottedSignals		= [];
	tGlobalStructure.atActuationSignals		= [];
	%	
	% Connection structure
	tGlobalStructure.tTCPConnection			= [];
	%
	% Timer definition
	tGlobalStructure.tGeneralPlotTimer		= [];
	%
	%	
	%----------------------------------------------------------------------
	%
	% Choose default command line output for mainGUI
	handles.output	= hObject;
	%
	%
	% save my personal structures
	guidata( hObject, handles );
	fprintf('Exiting mainGUI...\n');
	%
% end function


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% UIWAIT makes mainGUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = mainGUI_OutputFcn(hObject, eventdata, handles) 
	% varargout  cell array for returning output args (see VARARGOUT);
	% hObject    handle to figure
	% eventdata  reserved - to be defined in a future version of MATLAB
	% handles    structure with handles and user data (see GUIDATA)

	% Get default command line output from handles structure
	varargout{1} = handles.output;

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in Connect.
function Connect_Callback(hObject, eventdata, handles )
	%
	%
	try %
		%
		fprintf('Entering Connect...\n');
		global tGlobalStructure;
		%
		%
		tDevicesIDs					= Signal.GetDevicesIDs();
		tSignalsIDs					= Signal.GetSignalsIDs();
		fCurrentJulianDate			= Time.GetCurrentJulianDate();		
		%
		%------------------------------------------------------------------	
		% Meadurements signals for the Plots
		%
		tGlobalStructure.atPlottedSignals					= Signal( 2 );
		%
		% Temperature Signal
		tGlobalStructure.atPlottedSignals(1).iDeviceID 		= tDevicesIDs.iMote1043; 
		tGlobalStructure.atPlottedSignals(1).iSignalID 		= tSignalsIDs.iTemperatureOfEnvironment; 
		tGlobalStructure.atPlottedSignals(1).strLocation 	= 'LB201_A225'; 
		tGlobalStructure.atPlottedSignals(1).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atPlottedSignals(1).iSignalID,	...
										tGlobalStructure.atPlottedSignals(1).iDeviceID	); 
		%
		% CO2 Signal
		tGlobalStructure.atPlottedSignals(2).iDeviceID 		= tDevicesIDs.iPLC_A225; 
		tGlobalStructure.atPlottedSignals(2).iSignalID 		= tSignalsIDs.iCO2OfEnvironment; 
		tGlobalStructure.atPlottedSignals(2).strLocation 	= 'LB201_A225'; 
		tGlobalStructure.atPlottedSignals(2).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atPlottedSignals(2).iSignalID,	...
										tGlobalStructure.atPlottedSignals(2).iDeviceID	); 
									
		% Occupancy
		tGlobalStructure.atPlottedSignals(3).iDeviceID 		= tDevicesIDs.iPhotoelectricPeopleCounter; 
		tGlobalStructure.atPlottedSignals(3).iSignalID 		= tSignalsIDs.iOccupancy; 
		tGlobalStructure.atPlottedSignals(3).strLocation 	= 'LB201_A225'; 
		tGlobalStructure.atPlottedSignals(3).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atPlottedSignals(3).iSignalID,	...
										tGlobalStructure.atPlottedSignals(3).iDeviceID	); 
		%
		% Estimated Occupancy
		tGlobalStructure.atPlottedSignals(4).iDeviceID 		= tDevicesIDs.iOccupancyEstimatorBuildSys2013; 
		tGlobalStructure.atPlottedSignals(4).iSignalID 		= tSignalsIDs.iOccupancy; 
		tGlobalStructure.atPlottedSignals(4).strLocation 	= 'LB201_A225'; 
		tGlobalStructure.atPlottedSignals(4).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atPlottedSignals(4).iSignalID,	...
										tGlobalStructure.atPlottedSignals(4).iDeviceID	); 
		%
		%------------------------------------------------------------------	
		% Actuation Signals for the Open Loop Actuation
		%
		tGlobalStructure.atActuationSignals					= Signal( 4 );
		%
		% Air Inlet
		tGlobalStructure.atActuationSignals(1).iDeviceID 		= tDevicesIDs.iPLC_A225; 
		tGlobalStructure.atActuationSignals(1).iSignalID 		= tSignalsIDs.iFreshAirInletValveOpeningPercentage; 
		tGlobalStructure.atActuationSignals(1).strLocation		= 'LB201_A225'; 
		tGlobalStructure.atActuationSignals(1).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atActuationSignals(1).iSignalID,	...
										tGlobalStructure.atActuationSignals(1).iDeviceID	); 
		%
		% Air Outlet
		tGlobalStructure.atActuationSignals(2).iDeviceID 		= tDevicesIDs.iPLC_A225; 
		tGlobalStructure.atActuationSignals(2).iSignalID 		= tSignalsIDs.iExhaustAirOutletValveOpeningPercentage; 
		tGlobalStructure.atActuationSignals(2).strLocation		= 'LB201_A225'; 
		tGlobalStructure.atActuationSignals(2).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atActuationSignals(2).iSignalID,	...
										tGlobalStructure.atActuationSignals(2).iDeviceID	); 
		%
		% Radiator
		tGlobalStructure.atActuationSignals(3).iDeviceID 		= tDevicesIDs.iPLC_A225; 
		tGlobalStructure.atActuationSignals(3).iSignalID 		= tSignalsIDs.iRadiatorValveOpeningPercentage; 
		tGlobalStructure.atActuationSignals(3).strLocation		= 'LB201_A225'; 
		tGlobalStructure.atActuationSignals(3).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atActuationSignals(3).iSignalID,	...
										tGlobalStructure.atActuationSignals(3).iDeviceID	); 
		%
		% Cooling
		tGlobalStructure.atActuationSignals(4).iDeviceID 		= tDevicesIDs.iPLC_A225; 
		tGlobalStructure.atActuationSignals(4).iSignalID 		= tSignalsIDs.iACValveOpeningPercentage; 
		tGlobalStructure.atActuationSignals(4).strLocation		= 'LB201_A225'; 
		tGlobalStructure.atActuationSignals(4).strDescription	= ...
				Signal.GetDescription(	tGlobalStructure.atActuationSignals(4).iSignalID,	...
										tGlobalStructure.atActuationSignals(4).iDeviceID	); 
		%
		% Initialization
		tGlobalStructure.atActuationSignals(1).Insert( 0,	fCurrentJulianDate, true )
		tGlobalStructure.atActuationSignals(2).Insert( 0,	fCurrentJulianDate, true )
		tGlobalStructure.atActuationSignals(3).Insert( 0,	fCurrentJulianDate, true );
		tGlobalStructure.atActuationSignals(4).Insert( 0,	fCurrentJulianDate, true );
		%
		%------------------------------------------------------------------
		%
		tGlobalStructure.tTCPConnectionParameters.strUser		= get( handles.UserName ,'String');
		tGlobalStructure.tTCPConnectionParameters.strPassword	= get( handles.Password ,'String');
		%
		% allocate the TCP connection and the controller
		tGlobalStructure.tTCPConnection 	= InternetConnection.KTHConnection( tGlobalStructure.tTCPConnectionParameters );
		%
		%
		set( handles.Connect,		'BackgroundColor', 'green');
		set( handles.Disconnect,	'BackgroundColor', 'green');
		%
		%TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO : real check on the status
		tGlobalStructure.bConnected = true;
		%
		tGlobalStructure.tGeneralPlotTimer	= timer(													...
									'TimerFcn',			{@PlotTemperatureAndCO2, hObject, handles  },	...
									'Period',			30,												...
									'ExecutionMode',	'fixedRate',									...
									'BusyMode',			'drop'											);
		%
		tGlobalStructure.tActuationPlotTimer	= timer(												...
									'TimerFcn',			{@PlotActuation,		hObject, handles  },	...
									'Period',			30,												...
									'ExecutionMode',	'fixedRate',									...
									'BusyMode',			'drop'											);
		start( tGlobalStructure.tGeneralPlotTimer );
		start( tGlobalStructure.tActuationPlotTimer );
		%
		fprintf('Exiting Connect...\n');
		%
		%
		%
	catch exception
		%
		set( handles.ConnectionMsg,	'String','Not Connected!! Error!!');
		%
		disp( exception.message );
		warning('Unable to Connect');
		%
	end % try
	%
	%
% end function


function PlotTemperatureAndCO2( src, evt , hObject , handles )
	%
	try %
		%
		fprintf('Entering PlotTemperatureAndCO2...\n');
		global tGlobalStructure;
		%
		tGlobalStructure.atPlottedSignals(1).Update( tGlobalStructure.tTCPConnection );
		tGlobalStructure.atPlottedSignals(2).Update( tGlobalStructure.tTCPConnection );
		tGlobalStructure.atPlottedSignals(3).Update( tGlobalStructure.tTCPConnection );
		tGlobalStructure.atPlottedSignals(4).Update( tGlobalStructure.tTCPConnection );
		%
		set( handles.TemperatureAxes ,	'NextPlot' , 'new' );
		set( handles.CO2Axes ,			'NextPlot' , 'new' );
		set( handles.OccupancyAxes ,	'NextPlot' , 'new' );
		%
		PlotSignal(				tGlobalStructure.atPlottedSignals(1) ,											handles.TemperatureAxes	);
		PlotSignal(				tGlobalStructure.atPlottedSignals(2) ,											handles.CO2Axes			);
		PlotOccupancySignal(	tGlobalStructure.atPlottedSignals(3) , tGlobalStructure.atPlottedSignals(3),	handles.OccupancyAxes	);
		%
		if ( ishandle( 1 ) )
			%
			close(1);
			%
		end;%
		%
		fprintf('Exiting PlotTemperatureAndCO2...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to get the data from the server and plot.');
		%
	end % try
	%	
	%
% end function
	
function PlotActuation( src, evt , hObject , handles )
	%
	try %
		%
		fprintf('Entering PlotActuation...\n');
		global tGlobalStructure;
		%
		tDevicesIDs					= Signal.GetDevicesIDs();
		tSignalsIDs					= Signal.GetSignalsIDs();
		%
		%	
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,			...
																tDevicesIDs.iPLC_A225);
		%
		%
		switch tGlobalStructure.tGUIParameters.strController
			%
			case 'OpenLoop'
				%
				AskAndInsertActuationSignals();
				%
			case 'PID'
				%
				tGlobalStructure.tGUIParameters.tWorkingController = TODO;
				tGlobalStructure.tGUIParameters.tWorkingController.AskAndInsertActuationSignals();
				%
			case 'MPC'
				%
				tGlobalStructure.tGUIParameters.tWorkingController = TODO;
				tGlobalStructure.tGUIParameters.tWorkingController.AskAndInsertActuationSignals();
				%
			case 'SMPC'
				%
				tGlobalStructure.tGUIParameters.tWorkingController = TODO;
				tGlobalStructure.tGUIParameters.tWorkingController.AskAndInsertActuationSignals();
				%
			otherwise
				%
				warning('Fundamental Error in the code. Not existent Controller.');
				%
		end% switch case
		%
		tVentilationSignal	= tGlobalStructure.atActuationSignals(iFreshAirInletValveIndex);
		tCoolingSignal		= tGlobalStructure.atActuationSignals(iACValveIndex);
		tHeatingSignal		= tGlobalStructure.atActuationSignals(iRadiatorValveIndex);
		%
		set( handles.VentingAxes ,	'NextPlot' , 'new' );
		set( handles.CoolingAxes ,	'NextPlot' , 'new' );
		set( handles.RadiatorAxes ,	'NextPlot' , 'new' );
		%
		PlotSignal( tVentilationSignal ,	handles.VentingAxes		);
		PlotSignal( tCoolingSignal,			handles.CoolingAxes		);
		PlotSignal( tHeatingSignal,			handles.RadiatorAxes	);
		%
		fprintf('Exiting PlotActuation...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to get the data from the server and plot.');
		%
	end % try
	%	
	%
% end function

function AskAndInsertActuationSignals( tController )
	%
	try %
		%
		fprintf('Entering AskAndInsertActuationSignals...\n');
		global tGlobalStructure;
		%
		%
		tDevicesIDs				= Signal.GetDevicesIDs();
		tSignalsIDs				= Signal.GetSignalsIDs();
		fCurrentJulianDate		= Time.GetCurrentJulianDate();
		%
		%	
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,			...
																tDevicesIDs.iPLC_A225);
		%
		%
		if ( nargin > 0 )
			%
			fAirIN	= tController.GettingActuationLevel(	tSignalsIDs.iFreshAirInletValveOpeningPercentage,	...
															tDevicesIDs.iPLC_A225 ,								...
															fCurrentJulianDate );
			fAirOUT = tController.GettingActuationLevel(	tSignalsIDs.iExhaustAirOutletValveOpeningPercentage,...
															tDevicesIDs.iPLC_A225 ,								...
															fCurrentJulianDate );
			fRad	= tController.GettingActuationLevel(	tSignalsIDs.iRadiatorValveOpeningPercentage,		...
															tDevicesIDs.iPLC_A225 ,								...
															fCurrentJulianDate );
			fAC		= tController.GettingActuationLevel(	tSignalsIDs.iACValveOpeningPercentage,				...
															tDevicesIDs.iPLC_A225 ,								...
															fCurrentJulianDate );
			%
		else%
			%
			fAirIN	= tGlobalStructure.atActuationSignals(iFreshAirInletValveIndex).ExtractSamplesAt(fCurrentJulianDate);
			fAirOUT = tGlobalStructure.atActuationSignals(iExhaustAirValveOutletIndex).ExtractSamplesAt(fCurrentJulianDate);
			fRad	= tGlobalStructure.atActuationSignals(iRadiatorValveIndex).ExtractSamplesAt(fCurrentJulianDate);
			fAC		= tGlobalStructure.atActuationSignals(iACValveIndex).ExtractSamplesAt(fCurrentJulianDate);
			%
		end;%
		%
		tGlobalStructure.atActuationSignals(iFreshAirInletValveIndex).Insert(		fAirIN,		fCurrentJulianDate, true )
		tGlobalStructure.atActuationSignals(iExhaustAirValveOutletIndex).Insert(	fAirOUT,	fCurrentJulianDate, true )
		tGlobalStructure.atActuationSignals(iACValveIndex).Insert(					fAC,		fCurrentJulianDate, true );
		tGlobalStructure.atActuationSignals(iRadiatorValveIndex).Insert(			fRad,		fCurrentJulianDate, true );
		%														
		fprintf('Exiting AskAndInsertActuationSignals...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to ask the actuation signals, and insert them in the proper function.');
		%
	end % try
	%	
	%
% end function

function PlotSignal( tSignal,  tSpot )
	%
	try %
		%
		fprintf('Entering PlotSignal...\n');
		afDatenums = Time.JulianDateToDatenum( tSignal.afTimes );
		%
		plot( tSpot, afDatenums, tSignal.afValues, 'k');
		%
		fDeltaY = max(tSignal.afValues) - min(tSignal.afValues);
		fYMin	= min(tSignal.afValues) - 0.1 * fDeltaY;
		fYMax	= max(tSignal.afValues) + 0.1 * fDeltaY;
		%
		set( tSpot , 'xlim', [	Time.JulianDateToDatenum(tSignal.afTimes(1)		- 10 * Time.GetJulianMinute() )		...
								Time.JulianDateToDatenum(tSignal.afTimes(end)	+ 10 * Time.GetJulianMinute() )]	);
		%
		set( tSpot , 'xticklabel', datestr( get( tSpot ,'xtick' ), 'HH:MM' ) );
		%
		if( fYMin < fYMax )
			%
			ylim( [ fYMin, fYMax ] );
			set( tSpot , 'ylim', [ fYMin, fYMax ] );
			%
		end;%
		%
		fprintf('Exiting PlotSignal...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to Plot the data.');
		%
	end % try
	%	
	%
% end function

function PlotOccupancySignal( tOccupancy, tEstimatedOccupancy,  tSpot )
	%
	try %
		%
		fprintf('Entering PlotSignal...\n');
		afDatenums = Time.JulianDateToDatenum( tOccupancy.afTimes );
		%
		stairs( tSpot, afDatenums, tOccupancy.afValues, 'ko-');
		hold on
		stairs( tSpot, afDatenums, tEstimatedOccupancy.afValues, 'bx--');
		%
		fDeltaY =		max ( max( tOccupancy.afValues, tEstimatedOccupancy.afValues) ) ...
					-	min ( min( tOccupancy.afValues, tEstimatedOccupancy.afValues) ) ;
		fYMin	= min ( min( tOccupancy.afValues, tEstimatedOccupancy.afValues) ) - 0.1 * fDeltaY;
		fYMax	= max ( max( tOccupancy.afValues, tEstimatedOccupancy.afValues) ) + 0.1 * fDeltaY;
		%
		set( tSpot , 'xlim', [	Time.JulianDateToDatenum( tSignal.afTimes(1)		- 10 * Time.GetJulianMinute() )		...
								Time.JulianDateToDatenum( tSignal.afTimes(end)	+ 10 * Time.GetJulianMinute() )]	);
		%
		set( tSpot , 'xticklabel', datestr( get( tSpot ,'xtick' ), 'HH:MM' ) );
		%
		if( fYMin < fYMax )
			%
			ylim( [ fYMin, fYMax ] );
			set( tSpot , 'ylim', [ fYMin, fYMax ] );
			%
		end;%
		%
		legend('Measured','Estimated');
		%
		fprintf('Exiting PlotOccupancySignal...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to Plot the occupancy data.');
		%
	end % try
	%	
	%
% end function


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in Disconnect.
function Disconnect_Callback( hObject, eventdata, handles )
	%
	try %
		% 
		fprintf('Entering Disconnect...\n');
		global tGlobalStructure;
		%
		fclose( tGlobalStructure.tTCPConnection.tTcpIpClient );
		delete( tGlobalStructure.tGeneralPlotTimer );
		delete( tGlobalStructure.tActuationPlotTimer );
		%
		set( handles.Connect,		'BackgroundColor', 'red');
		set( handles.Disconnect,	'BackgroundColor', 'red');
		%
		%TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO : real check on the status
		tGlobalStructure.bConnected = false;
		%
		fprintf('Exiting Disconnect...\n');
		%
	catch exception
		%
		set(handles.ConnectionMsg,	'String','Not disconnected!! Error!!');
		%
		disp( exception.message );
		warning('Unable to disconnect');
		%
	end % try
	%
	%
% end function

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in OpenLoopActuation.
function OpenLoopActuation_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	try %
		%
		if tGlobalStructure.bConnected
			%
			tDevicesIDs					= Signal.GetDevicesIDs();
			tSignalsIDs					= Signal.GetSignalsIDs();
			fCurrentJulianDate			= Time.GetCurrentJulianDate();
			%	
			iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																	tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																	tDevicesIDs.iPLC_A225);
			iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																	tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																	tDevicesIDs.iPLC_A225);
			iACValveIndex				= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																	tSignalsIDs.iACValveOpeningPercentage ,					...
																	tDevicesIDs.iPLC_A225);
			iRadiatorValveIndex			= Signal.FindSignalIndex(	tGlobalStructure.atActuationSignals ,					...
																	tSignalsIDs.iRadiatorValveOpeningPercentage ,			...
																	tDevicesIDs.iPLC_A225);
			%
			%
			fAirIN	= str2double(get( handles.Ventilation,	'String'));
			fAirOUT = str2double(get( handles.Ventilation,	'String'));
			fRad	= str2double(get( handles.Radiator,		'String'));
			fAC		= str2double(get( handles.Cooling,		'String'));
			%
			afControlOutput = [fAirIN fAirOUT fRad fAC];
			%
			for iActuationSignal = 1 : numel(afControlOutput)
				%
				if		( afControlOutput(iActuationSignal) > 100 )
					%
					afControlOutput(iActuationSignal) = 100;
					%
				elseif	( afControlOutput(iActuationSignal) < 0 )
					%
					afControlOutput(iActuationSignal) = 0;
					%
				else%
					%
					afControlOutput(iActuationSignal) = ceil( 10 * afControlOutput(iActuationSignal) ) / 10;
					%
				end;%
				%
			end;%
			%
			fAirIN	= afControlOutput(1);
			fAirOUT = afControlOutput(2);
			fRad	= afControlOutput(3);
			fAC		= afControlOutput(4);
			%
			tGlobalStructure.atActuationSignals(iFreshAirInletValveIndex).Insert(		fAirIN,		fCurrentJulianDate, true )
			tGlobalStructure.atActuationSignals(iExhaustAirValveOutletIndex).Insert(	fAirOUT,	fCurrentJulianDate, true )
			tGlobalStructure.atActuationSignals(iACValveIndex).Insert(					fAC,		fCurrentJulianDate, true );
			tGlobalStructure.atActuationSignals(iRadiatorValveIndex).Insert(			fRad,		fCurrentJulianDate, true );
			%
			%
			for iSignal = 1:numel( tGlobalStructure.atActuationSignals )
				%
				% for readability
				fCurrentActuationLevel = tGlobalStructure.atActuationSignals(iSignal).ExtractSamplesAt( fCurrentJulianDate );
				%
				tGlobalStructure.tTCPConnection.SendToServer(					...
					tGlobalStructure.atActuationSignals(iSignal).iSignalID,		...
					tGlobalStructure.atActuationSignals(iSignal).iDeviceID,		...
					tGlobalStructure.atActuationSignals(iSignal).strLocation,	...
					fCurrentActuationLevel										);
				%
				%
			end;%
			%
			set(handles.ActuateMSG, 'String',			'Actuation accepted!');	
			set(handles.ActuateMSG, 'ForegroundColor',	'green');
			%
		else%
			%
			set(handles.ActuateMSG,'String','Actuation NOT accepted, you are not connected.');
			set(handles.ActuateMSG,'ForegroundColor','red');
			%
		end;%
			%
	catch exception
		%
		set(handles.ActuateMSG,'String','Unable to Actuate');
		%
		disp( exception.message );
		warning('Unable to Actuate');
		%
	end;% catch
	%
	%
% end function

	
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function UserName_Callback( hObject, eventdata, handles )
% hObject    handle to UserName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of UserName as text
%        str2double(get(hObject,'String')) returns contents of UserName as a double


% --- Executes during object creation, after setting all properties.
function UserName_CreateFcn(hObject, eventdata, handles)
% hObject    handle to UserName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


function Password_Callback(hObject, eventdata, handles)
% hObject    handle to Password (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Password as text
%        str2double(get(hObject,'String')) returns contents of Password as a double

% --- Executes during object creation, after setting all properties.
function Password_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Password (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



% --- Executes on button press in NoController.
function NoController_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	set(handles.MPC,	'Value',0);
	set(handles.PID,	'Value',0);
	set(handles.SMPC,	'Value',0);
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'on');
	set(handles.MPCPanel,			'Visible', 'off');
	%
	%
	set(handles.OpenLoopActuation,	'Visible', 'on');
	set(handles.StartController,	'Visible', 'off');
	set(handles.StopController,		'Visible', 'off');
	%
	tGlobalStructure.tGUIParameters.strController	= 'OpenLoop';
	%
	%
% end function


% --- Executes on button press in PID.
function PID_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	set(handles.MPC,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.SMPC,				'Value', 0);
	%
	set(handles.PIDPanel,			'Visible', 'on');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'off');
	%
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'on');
	set(handles.StopController,		'Visible', 'on');
	%
	tGlobalStructure.tGUIParameters.strController	= 'PID';
	%
	%
% end function

% --- Executes on button press in MPC.
function MPC_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	set(handles.PID,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.SMPC,				'Value', 0);
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'on');
	%
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'on');
	set(handles.StopController,		'Visible', 'on');
	%
	tGlobalStructure.tGUIParameters.strController	= 'MPC';
	%
	%
% end function

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in SMPC.
function SMPC_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure;
	%
	set(handles.PID,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.MPC,				'Value', 0);
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'on');
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'on');
	set(handles.StopController,		'Visible', 'on');
	%
	tGlobalStructure.tGUIParameters.strController	= 'SMPC';
	%
	%
% end function

% Hint: get(hObject,'Value') returns toggle state of SMPC

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


% --- Executes on button press in StartController.
function StartController_Callback(hObject, eventdata, handles)
% hObject    handle to StartController (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


% --- Executes on button press in StopController.
function StopController_Callback(hObject, eventdata, handles)
% hObject    handle to StopController (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


function Ventilation_Callback(hObject, eventdata, handles)
% hObject    handle to Ventilation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Ventilation as text
%        str2double(get(hObject,'String')) returns contents of Ventilation as a double


% --- Executes during object creation, after setting all properties.
function Ventilation_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Ventilation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function Cooling_Callback(hObject, eventdata, handles)
% hObject    handle to Cooling (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Cooling as text
%        str2double(get(hObject,'String')) returns contents of Cooling as a double


% --- Executes during object creation, after setting all properties.
function Cooling_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Cooling (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function Radiator_Callback(hObject, eventdata, handles)
% hObject    handle to Radiator (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Radiator as text
%        str2double(get(hObject,'String')) returns contents of Radiator as a double


% --- Executes during object creation, after setting all properties.
function Radiator_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Radiator (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function KP_Callback(hObject, eventdata, handles)
% hObject    handle to KP (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of KP as text
%        str2double(get(hObject,'String')) returns contents of KP as a double


% --- Executes during object creation, after setting all properties.
function KP_CreateFcn(hObject, eventdata, handles)
% hObject    handle to KP (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function KI_Callback(hObject, eventdata, handles)
% hObject    handle to KI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of KI as text
%        str2double(get(hObject,'String')) returns contents of KI as a double


% --- Executes during object creation, after setting all properties.
function KI_CreateFcn(hObject, eventdata, handles)
% hObject    handle to KI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function KD_Callback(hObject, eventdata, handles)
% hObject    handle to KD (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of KD as text
%        str2double(get(hObject,'String')) returns contents of KD as a double


% --- Executes during object creation, after setting all properties.
function KD_CreateFcn(hObject, eventdata, handles)
% hObject    handle to KD (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


