function varargout = mainGUI(varargin)
% MAINGUI MATLAB code for mainGUI.fig
%      MAINGUI, by itself, creates a new MAINGUI or raises the existing
%      singleton*.
%
%      H = MAINGUI returns the handle to a new MAINGUI or the handle to
%      the existing singleton*.
%
%      MAINGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MAINGUI.M with the given input arguments.
%
%      MAINGUI('Property','Value',...) creates a new MAINGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before mainGUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to mainGUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help mainGUI

% Last Modified by GUIDE v2.5 08-May-2014 13:59:00


% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @mainGUI_OpeningFcn, ...
                   'gui_OutputFcn',  @mainGUI_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes just before mainGUI is made visible.
function mainGUI_OpeningFcn(hObject, eventdata, handles, varargin)
	% This function has no output args, see OutputFcn.
	% hObject    handle to figure
	% eventdata  reserved - to be defined in a future version of MATLAB
	% handles    structure with handles and user data (see GUIDATA)
	% varargin   command line arguments to mainGUI (see VARARGIN)
	%
	global tGlobalStructure;
	%
	set(handles.Connect,			'BackgroundColor', 'red');
	set(handles.Disconnect,			'BackgroundColor', 'red');
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'on');
	set(handles.MPCPanel,			'Visible', 'off');
	set(handles.ScheduledPanel,		'Visible', 'off');
	%
	set(handles.OpenLoopActuation,	'Visible', 'on');
	set(handles.StartController,	'Visible', 'off');
	set(handles.StopController,		'Visible', 'off');
	set(handles.StartScheduled,		'Visible', 'off');
	set(handles.StopScheduled,		'Visible', 'off');
	%
	%
	%----------------------------------------------------------------------
	% Initializations
	%
	tGlobalStructure.bConnected								= false;
	tGlobalStructure.bControllerRunning						= false;
	tGlobalStructure.tGUIParameters.strController			= 'OpenLoop';
	tGlobalStructure.tGUIParameters.tActuatingController	= [];
	tGlobalStructure.tGUIParameters.strWorkingController	= 'OpenLoop';
	%
	tGlobalStructure.atPlottedSignals		= [];
	tGlobalStructure.atActuationsSignals	= [];
	%	
	% Connection structure
	tGlobalStructure.tTCPConnection			= [];
	%
	% Timer definition
	tGlobalStructure.tGeneralPlotTimer		= [];
	%
	%	
	%----------------------------------------------------------------------
	%
	% Choose default command line output for mainGUI
	handles.output	= hObject;
	%
	%
	% save my personal structures
	guidata( hObject, handles );
	fprintf('Entering mainGUI...\n');
	%
% end function


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% UIWAIT makes mainGUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = mainGUI_OutputFcn(hObject, eventdata, handles) 
	% varargout  cell array for returning output args (see VARARGOUT);
	% hObject    handle to figure
	% eventdata  reserved - to be defined in a future version of MATLAB
	% handles    structure with handles and user data (see GUIDATA)

	% Get default command line output from handles structure
	varargout{1} = handles.output;

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in Connect.
function Connect_Callback(hObject, eventdata, handles )
	%
	%
	try %
		%
		fprintf('Entering Connect...\n');
		global tGlobalStructure;
		%
		if ( ~tGlobalStructure.bConnected )
			%
			tDevicesIDs					= Signal.GetDevicesIDs();
			tSignalsIDs					= Signal.GetSignalsIDs();
			fCurrentJulianDate			= Time.GetCurrentJulianDate();		
			%
			%------------------------------------------------------------------	
			% Meadurements signals for the Plots
			%
			tGlobalStructure.atPlottedSignals					= Signal( 5 );
			%
			% Temperature Signal
			tGlobalStructure.atPlottedSignals(1).iDeviceID 		= tDevicesIDs.iMote1043; 
			tGlobalStructure.atPlottedSignals(1).iSignalID 		= tSignalsIDs.iTemperatureOfEnvironment; 
			tGlobalStructure.atPlottedSignals(1).strLocation 	= 'LB201_A225'; 
			tGlobalStructure.atPlottedSignals(1).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atPlottedSignals(1).iSignalID,	...
											tGlobalStructure.atPlottedSignals(1).iDeviceID	); 
			%
			% CO2 Signal
			tGlobalStructure.atPlottedSignals(2).iDeviceID 		= tDevicesIDs.iPLC_A225; 
			tGlobalStructure.atPlottedSignals(2).iSignalID 		= tSignalsIDs.iCO2OfEnvironment; 
			tGlobalStructure.atPlottedSignals(2).strLocation 	= 'LB201_A225'; 
			tGlobalStructure.atPlottedSignals(2).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atPlottedSignals(2).iSignalID,	...
											tGlobalStructure.atPlottedSignals(2).iDeviceID	); 

			% Occupancy
			tGlobalStructure.atPlottedSignals(3).iDeviceID 		= tDevicesIDs.iPhotoelectricPeopleCounter; 
			tGlobalStructure.atPlottedSignals(3).iSignalID 		= tSignalsIDs.iOccupancy; 
			tGlobalStructure.atPlottedSignals(3).strLocation 	= 'LB201_A225'; 
			tGlobalStructure.atPlottedSignals(3).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atPlottedSignals(3).iSignalID,	...
											tGlobalStructure.atPlottedSignals(3).iDeviceID	); 
			%
			% Estimated Occupancy (Parametric)
			tGlobalStructure.atPlottedSignals(4).iDeviceID 		= tDevicesIDs.iOccupancyEstimatorBuildSys2013; 
			tGlobalStructure.atPlottedSignals(4).iSignalID 		= tSignalsIDs.iOccupancy; 
			tGlobalStructure.atPlottedSignals(4).strLocation 	= 'LB201_A225'; 
			tGlobalStructure.atPlottedSignals(4).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atPlottedSignals(4).iSignalID,	...
											tGlobalStructure.atPlottedSignals(4).iDeviceID	); 
			% Estimated Occupancy (Parametric)
			tGlobalStructure.atPlottedSignals(5).iDeviceID 		= tDevicesIDs.iOccupancyEstimatorBuildSys2013b; 
			tGlobalStructure.atPlottedSignals(5).iSignalID 		= tSignalsIDs.iOccupancy; 
			tGlobalStructure.atPlottedSignals(5).strLocation 	= 'LB201_A225'; 
			tGlobalStructure.atPlottedSignals(5).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atPlottedSignals(5).iSignalID,	...
											tGlobalStructure.atPlottedSignals(5).iDeviceID	); 
			%
			%------------------------------------------------------------------	
			% Actuation Signals for the Open Loop Actuation
			%
			tGlobalStructure.atActuationsSignals					= Signal( 4 );
			%
			% Air Inlet
			tGlobalStructure.atActuationsSignals(1).iDeviceID 		= tDevicesIDs.iPLC_A225; 
			tGlobalStructure.atActuationsSignals(1).iSignalID 		= tSignalsIDs.iFreshAirInletValveOpeningPercentage; 
			tGlobalStructure.atActuationsSignals(1).strLocation		= 'LB201_A225'; 
			tGlobalStructure.atActuationsSignals(1).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atActuationsSignals(1).iSignalID,	...
											tGlobalStructure.atActuationsSignals(1).iDeviceID	); 
			%
			% Air Outlet
			tGlobalStructure.atActuationsSignals(2).iDeviceID 		= tDevicesIDs.iPLC_A225; 
			tGlobalStructure.atActuationsSignals(2).iSignalID 		= tSignalsIDs.iExhaustAirOutletValveOpeningPercentage; 
			tGlobalStructure.atActuationsSignals(2).strLocation		= 'LB201_A225'; 
			tGlobalStructure.atActuationsSignals(2).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atActuationsSignals(2).iSignalID,	...
											tGlobalStructure.atActuationsSignals(2).iDeviceID	); 
			%
			% Radiator
			tGlobalStructure.atActuationsSignals(3).iDeviceID 		= tDevicesIDs.iPLC_A225; 
			tGlobalStructure.atActuationsSignals(3).iSignalID 		= tSignalsIDs.iRadiatorValveOpeningPercentage; 
			tGlobalStructure.atActuationsSignals(3).strLocation		= 'LB201_A225'; 
			tGlobalStructure.atActuationsSignals(3).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atActuationsSignals(3).iSignalID,	...
											tGlobalStructure.atActuationsSignals(3).iDeviceID	); 
			%
			% Cooling
			tGlobalStructure.atActuationsSignals(4).iDeviceID 		= tDevicesIDs.iPLC_A225; 
			tGlobalStructure.atActuationsSignals(4).iSignalID 		= tSignalsIDs.iACValveOpeningPercentage; 
			tGlobalStructure.atActuationsSignals(4).strLocation		= 'LB201_A225'; 
			tGlobalStructure.atActuationsSignals(4).strDescription	= ...
					Signal.GetDescription(	tGlobalStructure.atActuationsSignals(4).iSignalID,	...
											tGlobalStructure.atActuationsSignals(4).iDeviceID	); 
			%
			% Initialization
			tGlobalStructure.atActuationsSignals(1).Insert( 0,	fCurrentJulianDate, true )
			tGlobalStructure.atActuationsSignals(2).Insert( 0,	fCurrentJulianDate, true )
			tGlobalStructure.atActuationsSignals(3).Insert( 0,	fCurrentJulianDate, true );
			tGlobalStructure.atActuationsSignals(4).Insert( 0,	fCurrentJulianDate, true );
			%
			%------------------------------------------------------------------
			%
			tGlobalStructure.tTCPConnectionParameters.strUser		= get( handles.UserName ,'String');
			tGlobalStructure.tTCPConnectionParameters.strPassword	= get( handles.Password ,'String');
			%
			% allocate the TCP connection and the controller
			tGlobalStructure.tTCPConnection 	= InternetConnection.KTHConnection( tGlobalStructure.tTCPConnectionParameters );
			%
			%
			set( handles.Connect,		'BackgroundColor', 'green');
			set( handles.Disconnect,	'BackgroundColor', 'green');
			set( handles.ActuateMSG,	'String',			'');	
			%
			%TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO : real check on the status
			tGlobalStructure.bConnected = true;
			%
			tGlobalStructure.tGeneralPlotTimer	= timer(													...
										'TimerFcn',			{@PlotTemperatureAndCO2, hObject, handles  },	...
										'Period',			30,												...
										'ExecutionMode',	'fixedRate',									...
										'BusyMode',			'drop'											);
			%
			tGlobalStructure.tActuationPlotTimer	= timer(												...
										'TimerFcn',			{@PlotActuation,		hObject, handles  },	...
										'Period',			30,												...
										'ExecutionMode',	'fixedRate',									...
										'BusyMode',			'drop'											);
			start( tGlobalStructure.tGeneralPlotTimer );
			start( tGlobalStructure.tActuationPlotTimer );
			%
			%
		else%
			%
			set(handles.ActuateMSG,'String','You are already connected.');
			%
		end;%
		%
		fprintf('Exiting Connect...\n');
		%
		%
		%
	catch exception
		%
		set( handles.ConnectionMsg,	'String','Not Connected!! Error!!');
		%
		disp( exception.message );
		warning('Unable to Connect');
		%
	end % try
	%
	%
% end function


function PlotTemperatureAndCO2( src, evt , hObject , handles )
	%
	try %
		%
		fprintf('Entering PlotTemperatureAndCO2...\n');
		global tGlobalStructure;
		%
		tGlobalStructure.atPlottedSignals(1).Update( tGlobalStructure.tTCPConnection );
		tGlobalStructure.atPlottedSignals(2).Update( tGlobalStructure.tTCPConnection );
		tGlobalStructure.atPlottedSignals(3).Update( tGlobalStructure.tTCPConnection );
		tGlobalStructure.atPlottedSignals(4).Update( tGlobalStructure.tTCPConnection );
		%
		set( handles.TemperatureAxes ,	'NextPlot' , 'new' );
		set( handles.CO2Axes ,			'NextPlot' , 'new' );
		set( handles.OccupancyAxes ,	'NextPlot' , 'new' );
		%
		PlotSignal(				tGlobalStructure.atPlottedSignals(1) ,											handles.TemperatureAxes	);
		PlotSignal(				tGlobalStructure.atPlottedSignals(2) ,											handles.CO2Axes			);
		PlotOccupancySignal(	tGlobalStructure.atPlottedSignals(3),	...
								tGlobalStructure.atPlottedSignals(4),	...
								tGlobalStructure.atPlottedSignals(5),	...
								handles.OccupancyAxes					);
		%
		if ( ishandle( 1 ) )
			%
			close(1);
			%
		end;%
		%
		fprintf('Exiting PlotTemperatureAndCO2...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to get the data from the server and plot.');
		%
	end % try
	%	
	%
% end function
	
function PlotActuation( src, evt , hObject , handles )
	%
	try %
		%
		fprintf('Entering PlotActuation...\n');
		global tGlobalStructure;
		%
		if ( tGlobalStructure.bConnected )
			%
			tDevicesIDs					= Signal.GetDevicesIDs();
			tSignalsIDs					= Signal.GetSignalsIDs();
			%
			%	
			iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																	tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																	tDevicesIDs.iPLC_A225);
			iACValveIndex				= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																	tSignalsIDs.iACValveOpeningPercentage ,					...
																	tDevicesIDs.iPLC_A225);
			iRadiatorValveIndex			= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																	tSignalsIDs.iRadiatorValveOpeningPercentage ,			...
																	tDevicesIDs.iPLC_A225);
			%
			%
			switch tGlobalStructure.tGUIParameters.strWorkingController
				%
				case 'OpenLoop'
					%
					AskAndInsertActuationsSignals();
					%
				case 'PID'
					%
					AskAndInsertActuationsSignals(tGlobalStructure.tGUIParameters.tActuatingController);
					%
				case 'MPC'
					%
					AskAndInsertActuationsSignals(tGlobalStructure.tGUIParameters.tActuatingController);
					%
				case 'SMPC'
					%
					AskAndInsertActuationsSignals(tGlobalStructure.tGUIParameters.tActuatingController);
					%
				case 'EMPC'
					%
					AskAndInsertActuationsSignals(tGlobalStructure.tGUIParameters.tActuatingController);
					%
				otherwise
					%
					warning('Fundamental Error in the code. Not existent Controller.');
					%
			end% switch case
			%
			tVentilationSignal	= tGlobalStructure.atActuationsSignals(iFreshAirInletValveIndex);
			tCoolingSignal		= tGlobalStructure.atActuationsSignals(iACValveIndex);
			tHeatingSignal		= tGlobalStructure.atActuationsSignals(iRadiatorValveIndex);
			%
			set( handles.VentingAxes ,	'NextPlot' , 'new' );
			set( handles.CoolingAxes ,	'NextPlot' , 'new' );
			set( handles.RadiatorAxes ,	'NextPlot' , 'new' );
			%
			PlotSignal( tVentilationSignal ,	handles.VentingAxes		);
			PlotSignal( tCoolingSignal,			handles.CoolingAxes		);
			PlotSignal( tHeatingSignal,			handles.RadiatorAxes	);
			%
			if ( ishandle( 1 ) )
				%
				close(1);
				%
			end;%
			%
		else%
			%
			set(handles.ActuateMSG,'String','Be careful! Not Connected.');
			%
			%
		end;% if ( tGlobalStructure.bConnected )
		%
		fprintf('Exiting PlotActuation...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to get the data from the server and plot.');
		%
	end % try
	%	
	%
% end function

function AskAndInsertActuationsSignals( tController )
	%
	try %
		%
		fprintf('Entering AskAndInsertActuationsSignals...\n');
		global tGlobalStructure;
		%
		%
		tDevicesIDs				= Signal.GetDevicesIDs();
		tSignalsIDs				= Signal.GetSignalsIDs();
		fCurrentJulianDate		= Time.GetCurrentJulianDate();
		%
		%	
		iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																tDevicesIDs.iPLC_A225);
		iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																tDevicesIDs.iPLC_A225);
		iACValveIndex				= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																tSignalsIDs.iACValveOpeningPercentage ,					...
																tDevicesIDs.iPLC_A225);
		iRadiatorValveIndex			= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																tSignalsIDs.iRadiatorValveOpeningPercentage ,			...
																tDevicesIDs.iPLC_A225);
		%
		%
		if ( nargin > 0 )
			%
			fAirIN	= GettingActuationLevelGUI(	tSignalsIDs.iFreshAirInletValveOpeningPercentage,	...
												tDevicesIDs.iPLC_A225 ,								...
												fCurrentJulianDate );
			fAirOUT = GettingActuationLevelGUI(	tSignalsIDs.iExhaustAirOutletValveOpeningPercentage,...
												tDevicesIDs.iPLC_A225 ,								...
												fCurrentJulianDate );
			fRad	= GettingActuationLevelGUI(	tSignalsIDs.iRadiatorValveOpeningPercentage,		...
												tDevicesIDs.iPLC_A225 ,								...
												fCurrentJulianDate );
			fAC		= GettingActuationLevelGUI(	tSignalsIDs.iACValveOpeningPercentage,				...
												tDevicesIDs.iPLC_A225 ,								...
												fCurrentJulianDate );
			%
		else%
			%
			fAirIN	= tGlobalStructure.atActuationsSignals(iFreshAirInletValveIndex).ExtractSamplesAt(fCurrentJulianDate);
			fAirOUT = tGlobalStructure.atActuationsSignals(iExhaustAirValveOutletIndex).ExtractSamplesAt(fCurrentJulianDate);
			fRad	= tGlobalStructure.atActuationsSignals(iRadiatorValveIndex).ExtractSamplesAt(fCurrentJulianDate);
			fAC		= tGlobalStructure.atActuationsSignals(iACValveIndex).ExtractSamplesAt(fCurrentJulianDate);
			%
		end;%
		%
		tGlobalStructure.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fAirIN,		fCurrentJulianDate, true )
		tGlobalStructure.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fAirOUT,	fCurrentJulianDate, true )
		tGlobalStructure.atActuationsSignals(iACValveIndex).Insert(					fAC,		fCurrentJulianDate, true );
		tGlobalStructure.atActuationsSignals(iRadiatorValveIndex).Insert(			fRad,		fCurrentJulianDate, true );
		%														
		fprintf('Exiting AskAndInsertActuationsSignals...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to ask the actuation signals, and insert them in the proper function.');
		%
	end % try
	%	
	%
% end function



function fActuationLevel = GettingActuationLevelGUI( iSignalID, iDeviceID, fJulianDate )
	%
	try %
		%
		global tGlobalStructure;
		%
		switch tGlobalStructure.tGUIParameters.strWorkingController
			%
			case 'PID'
				%
				tController = tGlobalStructure.tGuiPIController;
				%
			case 'MPC'
				%
				tController = tGlobalStructure.tAirConditionedPIController;
				%
			case 'SMPC'
				%
				tController = tGlobalStructure.tAirConditionedPIController;
				%
			case 'EMPC'
				%
				tController = tGlobalStructure.tAirConditionedPIController;
				%
			otherwise
				%
				warning('Fundamental Error in the code. Not existent Controller.');
				%
		end%%%%%% switch case 
		%
		iActuationSignalIndex	= Signal.FindSignalIndex(	tController.atActuationsSignals ,	...
															iSignalID ,							...
															iDeviceID							);
		fActuationLevel			= tController.atActuationsSignals(iActuationSignalIndex).ExtractSamplesAt(fJulianDate);
		%
		if fActuationLevel == [];
			%
			fActuationLevel = 0;
			% 
		end;%
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to get the actuation level required.');
		%
	end % try
	%
%end function



function PlotSignal( tSignal,  tSpot )
	%
	try %
		%
		fprintf('Entering PlotSignal...\n');
		afDatenums = Time.JulianDateToDatenum( tSignal.afTimes );
		%
		plot( tSpot, afDatenums, tSignal.afValues, 'k');
		%
		fDeltaY = max(tSignal.afValues) - min(tSignal.afValues);
		fYMin	= min(tSignal.afValues) - 0.1 * fDeltaY;
		fYMax	= max(tSignal.afValues) + 0.1 * fDeltaY;
		%
		set( tSpot , 'xlim', [	Time.JulianDateToDatenum(tSignal.afTimes(1)		- 1 * Time.GetJulianMinute() )		...
								Time.JulianDateToDatenum(tSignal.afTimes(end)	+ 1 * Time.GetJulianMinute() )]	);
		%
		set( tSpot , 'xticklabel', datestr( get( tSpot ,'xtick' ), 'HH:MM' ) );
		%
		if( fYMin < fYMax )
			%
			ylim( [ fYMin, fYMax ] );
			set( tSpot , 'ylim', [ fYMin, fYMax ] );
			%
		end;%
		%
		fprintf('Exiting PlotSignal...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to Plot the data.');
		%
	end % try
	%	
	%
% end function

function PlotOccupancySignal( tOccupancy, tEstimatedOccupancyP, tEstimatedOccupancyNP,  tSpot )
	%
	try %
		%
		fprintf('Entering PlotOccupancySignal...\n');
		afDatenums = Time.JulianDateToDatenum( tOccupancy.afTimes );
		%
		stairs( tSpot, afDatenums, tOccupancy.afValues, 'ko-');
		hold on
		stairs( tSpot, afDatenums, tEstimatedOccupancyP.afValues, 'bx--');
% 		stairs( tSpot, afDatenums, tEstimatedOccupancyNP.afValues, 'gs-.');		
		%
		fDeltaY =		max ( max( tOccupancy.afValues, tEstimatedOccupancyP.afValues) ) ...
					-	min ( min( tOccupancy.afValues, tEstimatedOccupancyP.afValues) ) ;
		fYMin	= min ( min( tOccupancy.afValues, tEstimatedOccupancyP.afValues) ) - 0.1 * fDeltaY;
		fYMax	= max ( max( tOccupancy.afValues, tEstimatedOccupancyP.afValues) ) + 0.1 * fDeltaY;
		%
		%
% 		fDeltaY =		max ( max( tOccupancy.afValues, tEstimatedOccupancyP.afValues, tEstimatedOccupancyNP.afValues) ) ...
% 					-	min ( min( tOccupancy.afValues, tEstimatedOccupancyP.afValues, tEstimatedOccupancyNP.afValues) ) ;
% 		fYMin	= min ( min( tOccupancy.afValues, tEstimatedOccupancyP.afValues, tEstimatedOccupancyNP.afValues) ) - 0.1 * fDeltaY;
% 		fYMax	= max ( max( tOccupancy.afValues, tEstimatedOccupancyP.afValues, tEstimatedOccupancyNP.afValues) ) + 0.1 * fDeltaY;
% 		%
		set( tSpot , 'xlim', [	Time.JulianDateToDatenum( tOccupancy.afTimes(1)		- 1 * Time.GetJulianMinute() )		...
								Time.JulianDateToDatenum( tOccupancy.afTimes(end)	+ 1 * Time.GetJulianMinute() )]	);
		%
		set( tSpot , 'xticklabel', datestr( get( tSpot ,'xtick' ), 'HH:MM' ) );
		% 
		legend(tSpot, 'Measured','Estimated (P)','Location','NorthWest');
% 		%
% 		legend(tSpot, 'Measured','Estimated (P)', 'Estimated (NP)');
% 		%
		if( fYMin < fYMax )
			%
			ylim( [ fYMin, fYMax ] );
			set( tSpot , 'ylim', [ fYMin, fYMax ] );
			%
		end;%
		%
		%
		fprintf('Exiting PlotOccupancySignal...\n');
		%
	catch exception
		%
		disp( exception.message );
		warning('Unable to Plot the occupancy data.');
		%
	end % try
	%	
	%
% end function


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in Disconnect.
function Disconnect_Callback( hObject, eventdata, handles )
	%
	global tGlobalStructure;
	%
	try %
		% 
		fprintf('Entering Disconnect...\n');
		%
		if ( tGlobalStructure.bConnected )
			%
			if ( ~tGlobalStructure.bControllerRunning )
				%
				fclose( tGlobalStructure.tTCPConnection.tTcpIpClient );
				delete( tGlobalStructure.tGeneralPlotTimer );
				delete( tGlobalStructure.tActuationPlotTimer );
				%
				set( handles.Connect,		'BackgroundColor', 'red');
				set( handles.Disconnect,	'BackgroundColor', 'red');
				%
				%TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO : real check on the status
				tGlobalStructure.bConnected = false;
				%
				fprintf('Exiting Disconnect...\n');
				%
			else%
				%
				set(handles.ActuateMSG,'String','Better not to disconnect. A controller is running. Stop the controller before.');
				%
			end;%
			%
		else%
			%
			%
			set(handles.ActuateMSG,'String','Impossible to disconnect. You are already not connected.');
			%
			%
		end;%
		%
	catch exception
		%
		set(handles.ConnectionMsg,	'String','Not disconnected!! Error!!');
		%
		disp( exception.message );
		warning('Unable to disconnect');
		%
	end % try
	%
	%
% end function

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in OpenLoopActuation.
function OpenLoopActuation_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	try %
		%
		if ( tGlobalStructure.bConnected && ~tGlobalStructure.bControllerRunning )
			%
			set(handles.OpenLoopActuation,			'BackgroundColor', 'green');
			
			tDevicesIDs					= Signal.GetDevicesIDs();
			tSignalsIDs					= Signal.GetSignalsIDs();
			fCurrentJulianDate			= Time.GetCurrentJulianDate();
			%	
			iFreshAirInletValveIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																	tSignalsIDs.iFreshAirInletValveOpeningPercentage ,		...
																	tDevicesIDs.iPLC_A225);
			iExhaustAirValveOutletIndex	= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																	tSignalsIDs.iExhaustAirOutletValveOpeningPercentage ,	...
																	tDevicesIDs.iPLC_A225);
			iACValveIndex				= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																	tSignalsIDs.iACValveOpeningPercentage ,					...
																	tDevicesIDs.iPLC_A225);
			iRadiatorValveIndex			= Signal.FindSignalIndex(	tGlobalStructure.atActuationsSignals ,					...
																	tSignalsIDs.iRadiatorValveOpeningPercentage ,			...
																	tDevicesIDs.iPLC_A225);
			%
			%
			fAirIN	= str2double(get( handles.Ventilation,	'String'));
			fAirOUT = str2double(get( handles.Ventilation,	'String'));
			fRad	= str2double(get( handles.Radiator,		'String'));
			fAC		= str2double(get( handles.Cooling,		'String'));
			%
			afControlOutput = [fAirIN fAirOUT fRad fAC];
			%
			for iActuationSignal = 1 : numel(afControlOutput)
				%
				if		( afControlOutput(iActuationSignal) > 100 )
					%
					afControlOutput(iActuationSignal) = 100;
					%
				elseif	( afControlOutput(iActuationSignal) < 0 )
					%
					afControlOutput(iActuationSignal) = 0;
					%
				else%
					%
					afControlOutput(iActuationSignal) = ceil( 10 * afControlOutput(iActuationSignal) ) / 10;
					%
				end;%
				%
			end;%
			%
			fAirIN	= afControlOutput(1);
			fAirOUT = afControlOutput(2);
			fRad	= afControlOutput(3);
			fAC		= afControlOutput(4);
			%
			tGlobalStructure.atActuationsSignals(iFreshAirInletValveIndex).Insert(		fAirIN,		fCurrentJulianDate, true )
			tGlobalStructure.atActuationsSignals(iExhaustAirValveOutletIndex).Insert(	fAirOUT,	fCurrentJulianDate, true )
			tGlobalStructure.atActuationsSignals(iACValveIndex).Insert(					fAC,		fCurrentJulianDate, true );
			tGlobalStructure.atActuationsSignals(iRadiatorValveIndex).Insert(			fRad,		fCurrentJulianDate, true );
			%
			%
			for iSignal = 1:numel( tGlobalStructure.atActuationsSignals )
				%
				% for readability
				fCurrentActuationLevel = tGlobalStructure.atActuationsSignals(iSignal).ExtractSamplesAt( fCurrentJulianDate );
				%
				tGlobalStructure.tTCPConnection.SendToServer(					...
					tGlobalStructure.atActuationsSignals(iSignal).iSignalID,		...
					tGlobalStructure.atActuationsSignals(iSignal).iDeviceID,		...
					tGlobalStructure.atActuationsSignals(iSignal).strLocation,	...
					fCurrentActuationLevel										);
				%
				%
			end;%
			%
			set(handles.ActuateMSG, 'String',			'Actuation accepted!');	
			%
		else%
			%
			set(handles.ActuateMSG,'String','Actuation NOT accepted, you are not connected or a controller is running.');
			%
		end;%
			%
	catch exception
		%
		set(handles.ActuateMSG,'String','Unable to Actuate');
		%
		disp( exception.message );
		warning('Unable to Actuate');
		%
	end;% catch
	%
	%
% end function

	
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function UserName_Callback( hObject, eventdata, handles )
% hObject    handle to UserName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of UserName as text
%        str2double(get(hObject,'String')) returns contents of UserName as a double


% --- Executes during object creation, after setting all properties.
function UserName_CreateFcn(hObject, eventdata, handles)
% hObject    handle to UserName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


function Password_Callback(hObject, eventdata, handles)
% hObject    handle to Password (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Password as text
%        str2double(get(hObject,'String')) returns contents of Password as a double

% --- Executes during object creation, after setting all properties.
function Password_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Password (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



% --- Executes on button press in NoController.
function NoController_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	set(handles.MPC,		'Value',0);
	set(handles.PID,		'Value',0);
	set(handles.SMPC,		'Value',0);
	set(handles.EMPC,		'Value',0);
	set(handles.Scheduled,	'Value',0);
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'on');
	set(handles.MPCPanel,			'Visible', 'off');
	set(handles.ScheduledPanel,		'Visible', 'off');
	%
	%
	set(handles.OpenLoopActuation,	'Visible', 'on');
	set(handles.StartController,	'Visible', 'off');
	set(handles.StopController,		'Visible', 'off');
	set(handles.StartScheduled,		'Visible', 'off');
	set(handles.StopScheduled,		'Visible', 'off');
	%
	tGlobalStructure.tGUIParameters.strController	= 'OpenLoop';
	%
	%
% end function


% --- Executes on button press in PID.
function PID_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	set(handles.MPC,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.SMPC,				'Value', 0);
	set(handles.EMPC,				'Value', 0);
	set(handles.Scheduled,			'Value', 0);
	%
	set(handles.PIDPanel,			'Visible', 'on');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'off');
	set(handles.ScheduledPanel,		'Visible', 'off');
	%
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'on');
	set(handles.StopController,		'Visible', 'on');
	set(handles.StartScheduled,		'Visible', 'off');
	set(handles.StopScheduled,		'Visible', 'off');
	%
	tGlobalStructure.tGUIParameters.strController	= 'PID';
	%
	%
% end function

% --- Executes on button press in MPC.
function MPC_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	set(handles.PID,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.SMPC,				'Value', 0);
	set(handles.EMPC,				'Value', 0);
	set(handles.Scheduled,			'Value', 0);
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'on');
	set(handles.ScheduledPanel,		'Visible', 'off');
	%
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'on');
	set(handles.StopController,		'Visible', 'on');
	set(handles.StartScheduled,		'Visible', 'off');
	set(handles.StopScheduled,		'Visible', 'off');
	%
	set(handles.TextNumberOfScenarios,	'Visible', 'off');
	set(handles.NumberOfScenarios,	'Visible', 'off');
	
	%
	tGlobalStructure.tGUIParameters.strController	= 'MPC';
	%
	%
% end function

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% --- Executes on button press in SMPC.
function SMPC_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure;
	%
	set(handles.PID,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.MPC,				'Value', 0);
	set(handles.EMPC,				'Value', 0);
	set(handles.Scheduled,			'Value', 0);
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'on');
	set(handles.ScheduledPanel,		'Visible', 'off');
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'on');
	set(handles.StopController,		'Visible', 'on');
	set(handles.StartScheduled,		'Visible', 'off');
	set(handles.StopScheduled,		'Visible', 'off');
	%
	set(handles.TextNumberOfScenarios,	'Visible', 'on');
	set(handles.NumberOfScenarios,	'Visible', 'on');
	%
	tGlobalStructure.tGUIParameters.strController	= 'SMPC';
	%
	%
% end function

% Hint: get(hObject,'Value') returns toggle state of SMPC

% --- Executes on button press in EMPC.
function EMPC_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure;
	%
	set(handles.PID,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.MPC,				'Value', 0);
	set(handles.SMPC,				'Value', 0);
	set(handles.Scheduled,			'Value', 0);
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'on');
	set(handles.ScheduledPanel,		'Visible', 'off');
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'on');
	set(handles.StopController,		'Visible', 'on');
	set(handles.StartScheduled,		'Visible', 'off');
	set(handles.StopScheduled,		'Visible', 'off');
	%
	set(handles.TextNumberOfScenarios,	'Visible', 'on');
	set(handles.NumberOfScenarios,	'Visible', 'on');
	%
	tGlobalStructure.tGUIParameters.strController	= 'EMPC';
	%
	%
% end function

% --- Executes on button press in Scheduled Controllers.
function Scheduled_Callback(hObject, eventdata, handles)
	%
	global tGlobalStructure; 
	%
	set(handles.MPC,				'Value', 0);
	set(handles.PID,				'Value', 0);
	set(handles.NoController,		'Value', 0);
	set(handles.SMPC,				'Value', 0);
	set(handles.EMPC,				'Value', 0);
	
	%
	set(handles.PIDPanel,			'Visible', 'off');
	set(handles.NoControllerPanel,	'Visible', 'off');
	set(handles.MPCPanel,			'Visible', 'off');
	set(handles.ScheduledPanel,		'Visible', 'on');
	%
	%
	set(handles.OpenLoopActuation,	'Visible', 'off');
	set(handles.StartController,	'Visible', 'off');
	set(handles.StopController,		'Visible', 'off');
	set(handles.StartScheduled,		'Visible', 'on');
	set(handles.StopScheduled,		'Visible', 'on');
	
	fid = fopen('ExampleOfControllerSchedule.txt', 'wt'); 
	fprintf(fid, '%s\n', 'YYMMDDHHMMSS	Controller');
	
	fCurrentJulianDate = Time.GetCurrentJulianDate();
	aCurrentNumDate = Time.JulianDateToString_YYMMDDHHMMSS(fCurrentJulianDate);
	fCurrentNumDate = cell2mat(aCurrentNumDate);
	
	fprintf(fid, '%s%s\n', fCurrentNumDate(3:end), '	AkademiskaHC');
	%
% % 	tGlobalStructure.tGUIParameters.strController	= 'PID';
	%
	%
% end function

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


% --- Executes on button press in StartController.
function StartController_Callback(hObject, eventdata, handles)
% hObject    handle to StartController (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
	%
	global tGlobalStructure;
	%
	try %
		%
		%
		if ( tGlobalStructure.bConnected )
			%
			set( handles.StartController,	'BackgroundColor', 'green');
			set( handles.StopController,	'BackgroundColor', 'green');
			%
			switch tGlobalStructure.tGUIParameters.strController
				%
				case 'MPC'
					%
					if ( ~tGlobalStructure.bControllerRunning	)
						%
						set(handles.ActuateMSG, 'String', '...Initializing Controller...');
						%
						tGlobalStructure.tCO2ControllerParameters				= Controller.LoadDeterministicCO2MPCParameters();
						tGlobalStructure.tTemperatureControllerParameters		= Controller.LoadDeterministicTemperatureMPCParameters();
						tGlobalStructure.tAirConditionedPIControllerParameters	= Controller.LoadAirConditionedPIControllerParameters();  
						%
						tGlobalStructure.tCO2ControllerParameters.bPrintDebugInformation					= true;
						tGlobalStructure.tCO2ControllerParameters.bPlotSignalsDuringExecution				= false;
						%
						tGlobalStructure.tTemperatureControllerParameters.bPrintDebugInformation			= true;
						tGlobalStructure.tTemperatureControllerParameters.bPlotSignalsDuringExecution		= false;
						%
						tGlobalStructure.tAirConditionedPIControllerParameters.bPrintDebugInformation		= true;
						tGlobalStructure.tAirConditionedPIControllerParameters.bPlotSignalsDuringExecution	= false;
						%
						tGlobalStructure.tCO2ControllerParameters.fSamplingTimeInSeconds			= str2double(get( handles.SamplingTime,			'String'));
						tGlobalStructure.tCO2ControllerParameters.iPredictionHorizon				= str2double(get( handles.PredictionHorizon,	'String'));	
						tGlobalStructure.tCO2ControllerParameters.iControlHorizon					= str2double(get( handles.PredictionHorizon,	'String'));			
						tGlobalStructure.tCO2ControllerParameters.fExperimentLengthInHours			= str2double(get( handles.ExperimentLenght,		'String'));
						%
						tGlobalStructure.tTemperatureControllerParameters.fSamplingTimeInSeconds	= str2double(get( handles.SamplingTime,			'String'));
						tGlobalStructure.tTemperatureControllerParameters.iPredictionHorizon		= str2double(get( handles.PredictionHorizon,	'String'));	
						tGlobalStructure.tTemperatureControllerParameters.iControlHorizon			= str2double(get( handles.PredictionHorizon,	'String'));			
						tGlobalStructure.tTemperatureControllerParameters.fExperimentLengthInHours	= str2double(get( handles.ExperimentLenght,		'String'));
						%
						tGlobalStructure.tCO2Controller					= Controller.DeterministicCO2MPC( tGlobalStructure.tCO2ControllerParameters );
						tGlobalStructure.tTemperatureController			= Controller.DeterministicTemperatureMPC( tGlobalStructure.tTemperatureControllerParameters );
						tGlobalStructure.tAirConditionedPIController	= Controller.AirConditionedPIController( tGlobalStructure.tAirConditionedPIControllerParameters );			
						%

						% allocate the timer for the low level control loop
						tGlobalStructure.tPIControlLoopTimer = timer(																	...
							'TimerFcn',			{@Controller.RunPI,					tGlobalStructure.tAirConditionedPIController,		...
																					tGlobalStructure.tTCPConnection	},					...
							'ErrorFcn',			{@Controller.OnError,			{	tGlobalStructure.tAirConditionedPIController } },	...
							'StartFcn',			{@Controller.OnStart,			{	tGlobalStructure.tAirConditionedPIController } },	...
							'StopFcn',			{@Controller.OnExitNoTCPClose,	{	tGlobalStructure.tAirConditionedPIController } },	...
							'Period',			tGlobalStructure.tAirConditionedPIController.fSamplingTimeInSeconds,					...
							'TasksToExecute',	tGlobalStructure.tAirConditionedPIController.iNumberOfRunsToBeExecuted,					...
							'ExecutionMode',	'fixedRate',																			...
							'BusyMode',			'drop'																					);
						%
						% allocate the timer for the main control loop
						tGlobalStructure.tMainControlLoopTimer = timer(																...
							'TimerFcn',			{@Controller.Run,					tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController,		...
																					tGlobalStructure.tAirConditionedPIController,	...
																					tGlobalStructure.tTCPConnection },				...
							'ErrorFcn',			{@Controller.OnError,			{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'StartFcn',			{@Controller.OnStart,			{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'StopFcn',			{@Controller.OnExitNoTCPClose,	{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'Period',			tGlobalStructure.tCO2Controller.fSamplingTimeInSeconds,								...
							'TasksToExecute',	tGlobalStructure.tCO2Controller.iNumberOfRunsToBeExecuted,							...
							'ExecutionMode',	'fixedRate',																		...
							'BusyMode',			'drop'																				);
						%
						%
						disp('Started the low level control loop');
						start( tGlobalStructure.tPIControlLoopTimer );
						disp('Started the main control loop');
						start( tGlobalStructure.tMainControlLoopTimer );
						%
						tGlobalStructure.tGUIParameters.tActuatingController	= tGlobalStructure.tAirConditionedPIController;
						tGlobalStructure.tGUIParameters.strWorkingController	= 'MPC';
						tGlobalStructure.bControllerRunning						= true;
						%
						set(handles.ActuateMSG, 'String', 'Deterministic MPC running, press STOP to change controller.');
						%
					else%
						%
						set(handles.ActuateMSG, 'String', 'One controller is still running. Stop it before.');
						%
					end;%
					%
					%
					%--------------------------------------------------------------------------------------------------------------
					%
				case 'SMPC'
					%
					%
					if ( ~tGlobalStructure.bControllerRunning	)
						%
						set(handles.ActuateMSG, 'String', '...Initializing Controller...');
						%
						tGlobalStructure.tCO2ControllerParameters				= Controller.LoadStochasticCO2MPCParameters();
						tGlobalStructure.tTemperatureControllerParameters		= Controller.LoadStochasticTemperatureMPCParameters();
						tGlobalStructure.tAirConditionedPIControllerParameters	= Controller.LoadAirConditionedPIControllerParameters();  
						%
						tGlobalStructure.tCO2ControllerParameters.bPrintDebugInformation					= true;
						tGlobalStructure.tCO2ControllerParameters.bPlotSignalsDuringExecution				= false;
						%
						tGlobalStructure.tTemperatureControllerParameters.bPrintDebugInformation			= true;
						tGlobalStructure.tTemperatureControllerParameters.bPlotSignalsDuringExecution		= false;
						%
						tGlobalStructure.tAirConditionedPIControllerParameters.bPrintDebugInformation		= true;
						tGlobalStructure.tAirConditionedPIControllerParameters.bPlotSignalsDuringExecution	= false;
						%
						tGlobalStructure.tCO2ControllerParameters.fSamplingTimeInSeconds			= str2double(get( handles.SamplingTime,			'String'));
						tGlobalStructure.tCO2ControllerParameters.iPredictionHorizon				= str2double(get( handles.PredictionHorizon,	'String'));	
						tGlobalStructure.tCO2ControllerParameters.iControlHorizon					= str2double(get( handles.PredictionHorizon,	'String'));			
						tGlobalStructure.tCO2ControllerParameters.fExperimentLengthInHours			= str2double(get( handles.ExperimentLenght,		'String'));
						%
						tGlobalStructure.tTemperatureControllerParameters.fSamplingTimeInSeconds	= str2double(get( handles.SamplingTime,			'String'));
						tGlobalStructure.tTemperatureControllerParameters.iPredictionHorizon		= str2double(get( handles.PredictionHorizon,	'String'));	
						tGlobalStructure.tTemperatureControllerParameters.iControlHorizon			= str2double(get( handles.PredictionHorizon,	'String'));			
						tGlobalStructure.tTemperatureControllerParameters.fExperimentLengthInHours	= str2double(get( handles.ExperimentLenght,		'String'));
						%
						tGlobalStructure.tCO2Controller					= Controller.StochasticCO2MPC( tGlobalStructure.tCO2ControllerParameters );
						tGlobalStructure.tTemperatureController			= Controller.StochasticTemperatureMPC( tGlobalStructure.tTemperatureControllerParameters );
						tGlobalStructure.tAirConditionedPIController	= Controller.AirConditionedPIController( tGlobalStructure.tAirConditionedPIControllerParameters );			
						%
						tGlobalStructure.tCO2ControllerParameters.iNumberOfScenarios			= str2double(get( handles.NumberOfScenarios, 'String'));
						tGlobalStructure.tTemperatureControllerParameters.iNumberOfScenarios	= str2double(get( handles.NumberOfScenarios, 'String'));
						%
						% allocate the timer for the low level control loop
						tGlobalStructure.tPIControlLoopTimer = timer(																	...
							'TimerFcn',			{@Controller.RunPI,					tGlobalStructure.tAirConditionedPIController,		...
																					tGlobalStructure.tTCPConnection	},					...
							'ErrorFcn',			{@Controller.OnError,			{	tGlobalStructure.tAirConditionedPIController } },	...
							'StartFcn',			{@Controller.OnStart,			{	tGlobalStructure.tAirConditionedPIController } },	...
							'StopFcn',			{@Controller.OnExitNoTCPClose,	{	tGlobalStructure.tAirConditionedPIController } },	...
							'Period',			tGlobalStructure.tAirConditionedPIController.fSamplingTimeInSeconds,					...
							'TasksToExecute',	tGlobalStructure.tAirConditionedPIController.iNumberOfRunsToBeExecuted,					...
							'ExecutionMode',	'fixedRate',																			...
							'BusyMode',			'drop'																					);
						%
						% allocate the timer for the main control loop
						tGlobalStructure.tMainControlLoopTimer = timer(																...
							'TimerFcn',			{@Controller.Run,					tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController,		...
																					tGlobalStructure.tAirConditionedPIController,	...
																					tGlobalStructure.tTCPConnection },				...
							'ErrorFcn',			{@Controller.OnError,			{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'StartFcn',			{@Controller.OnStart,			{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'StopFcn',			{@Controller.OnExitNoTCPClose,	{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'Period',			tGlobalStructure.tCO2Controller.fSamplingTimeInSeconds,								...
							'TasksToExecute',	tGlobalStructure.tCO2Controller.iNumberOfRunsToBeExecuted,							...
							'ExecutionMode',	'fixedRate',																		...
							'BusyMode',			'drop'																				);
						%
						%
						disp('Started the low level control loop');
						start( tGlobalStructure.tPIControlLoopTimer );
						disp('Started the main control loop');
						start( tGlobalStructure.tMainControlLoopTimer );
						%
						tGlobalStructure.tGUIParameters.tActuatingController	= tGlobalStructure.tAirConditionedPIController;
						tGlobalStructure.tGUIParameters.strWorkingController	= 'SMPC';
						tGlobalStructure.bControllerRunning						= true;
						%
						set(handles.ActuateMSG,'String','Stochastic MPC running, press STOP to change controller.');
						%
						%
					else%
						%
						set(handles.ActuateMSG, 'String', 'One controller is still running. Stop it before.');
						%
					end;%
					%
				case 'EMPC'
					%
					%
					if ( ~tGlobalStructure.bControllerRunning	)
						%
						set(handles.ActuateMSG, 'String', '...Initializing Controller...');
						%
						tGlobalStructure.tCO2ControllerParameters				= Controller.LoadExperimentalExplicitCO2MPCParameters();
						tGlobalStructure.tTemperatureControllerParameters		= Controller.LoadExperimentalExplicitTemperatureMPCParameters();
						tGlobalStructure.tAirConditionedPIControllerParameters	= Controller.LoadAirConditionedPIControllerParameters();  
						%
						tGlobalStructure.tCO2ControllerParameters.bPrintDebugInformation					= true;
						tGlobalStructure.tCO2ControllerParameters.bPlotSignalsDuringExecution				= false;
						%
						tGlobalStructure.tTemperatureControllerParameters.bPrintDebugInformation			= true;
						tGlobalStructure.tTemperatureControllerParameters.bPlotSignalsDuringExecution		= false;
						%
						tGlobalStructure.tAirConditionedPIControllerParameters.bPrintDebugInformation		= true;
						tGlobalStructure.tAirConditionedPIControllerParameters.bPlotSignalsDuringExecution	= false;
						%
						tGlobalStructure.tCO2ControllerParameters.fSamplingTimeInSeconds			= str2double(get( handles.SamplingTime,			'String'));
						tGlobalStructure.tCO2ControllerParameters.iPredictionHorizon				= str2double(get( handles.PredictionHorizon,	'String'));	
						tGlobalStructure.tCO2ControllerParameters.iControlHorizon					= str2double(get( handles.PredictionHorizon,	'String'));			
						tGlobalStructure.tCO2ControllerParameters.fExperimentLengthInHours			= str2double(get( handles.ExperimentLenght,		'String'));
						%
						tGlobalStructure.tTemperatureControllerParameters.fSamplingTimeInSeconds	= str2double(get( handles.SamplingTime,			'String'));
						tGlobalStructure.tTemperatureControllerParameters.iPredictionHorizon		= str2double(get( handles.PredictionHorizon,	'String'));	
						tGlobalStructure.tTemperatureControllerParameters.iControlHorizon			= str2double(get( handles.PredictionHorizon,	'String'));			
						tGlobalStructure.tTemperatureControllerParameters.fExperimentLengthInHours	= str2double(get( handles.ExperimentLenght,		'String'));
						%
						tGlobalStructure.tCO2Controller					= Controller.ExperimentalExplicitCO2MPC( tGlobalStructure.tCO2ControllerParameters );
						tGlobalStructure.tTemperatureController			= Controller.ExperimentalExplicitTemperatureMPC( tGlobalStructure.tTemperatureControllerParameters );
						tGlobalStructure.tAirConditionedPIController	= Controller.AirConditionedPIController( tGlobalStructure.tAirConditionedPIControllerParameters );			
						%
						tGlobalStructure.tCO2ControllerParameters.iNumberOfScenarios			= str2double(get( handles.NumberOfScenarios, 'String'));
						tGlobalStructure.tTemperatureControllerParameters.iNumberOfScenarios	= str2double(get( handles.NumberOfScenarios, 'String'));
						%
						% allocate the timer for the low level control loop
						tGlobalStructure.tPIControlLoopTimer = timer(																	...
							'TimerFcn',			{@Controller.RunPI,					tGlobalStructure.tAirConditionedPIController,		...
																					tGlobalStructure.tTCPConnection	},					...
							'ErrorFcn',			{@Controller.OnError,			{	tGlobalStructure.tAirConditionedPIController } },	...
							'StartFcn',			{@Controller.OnStart,			{	tGlobalStructure.tAirConditionedPIController } },	...
							'StopFcn',			{@Controller.OnExitNoTCPClose,	{	tGlobalStructure.tAirConditionedPIController } },	...
							'Period',			tGlobalStructure.tAirConditionedPIController.fSamplingTimeInSeconds,					...
							'TasksToExecute',	tGlobalStructure.tAirConditionedPIController.iNumberOfRunsToBeExecuted,					...
							'ExecutionMode',	'fixedRate',																			...
							'BusyMode',			'drop'																					);
						%
						% allocate the timer for the main control loop
						tGlobalStructure.tMainControlLoopTimer = timer(																...
							'TimerFcn',			{@Controller.Run,					tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController,		...
																					tGlobalStructure.tAirConditionedPIController,	...
																					tGlobalStructure.tTCPConnection },				...
							'ErrorFcn',			{@Controller.OnError,			{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'StartFcn',			{@Controller.OnStart,			{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'StopFcn',			{@Controller.OnExitNoTCPClose,	{	tGlobalStructure.tCO2Controller,				...
																					tGlobalStructure.tTemperatureController } },	...
							'Period',			tGlobalStructure.tCO2Controller.fSamplingTimeInSeconds,								...
							'TasksToExecute',	tGlobalStructure.tCO2Controller.iNumberOfRunsToBeExecuted,							...
							'ExecutionMode',	'fixedRate',																		...
							'BusyMode',			'drop'																				);
						%
						%
						disp('Started the low level control loop');
						start( tGlobalStructure.tPIControlLoopTimer );
						disp('Started the main control loop');
						start( tGlobalStructure.tMainControlLoopTimer );
						%
						tGlobalStructure.tGUIParameters.tActuatingController	= tGlobalStructure.tAirConditionedPIController;
						tGlobalStructure.tGUIParameters.strWorkingController	= 'EMPC';
						tGlobalStructure.bControllerRunning						= true;
						%
						set(handles.ActuateMSG,'String','Explicit MPC running, press STOP to change controller.');
						%
						%
					else%
						%
						set(handles.ActuateMSG, 'String', 'One controller is still running. Stop it before.');
						%
					end;%
					%
				case 'PID'
					%
					%
					if ( ~tGlobalStructure.bControllerRunning	)
						%
						set(handles.ActuateMSG, 'String', '...Initializing Controller...');
						%
						tGlobalStructure.tGuiPIControllerParameters		= Controller.LoadPIControllerParameters();
						%
						tGlobalStructure.tGuiPIControllerParameters.fProportionalConstant	...
								= str2double(get( handles.KP,						'String'));
						tGlobalStructure.tGuiPIControllerParameters.fIntegralConstant		...
								= str2double(get( handles.KI,						'String'));	
						tGlobalStructure.tGuiPIControllerParameters.fDerivativeConstant		...
								= str2double(get( handles.KD,						'String'));			
						tGlobalStructure.tGuiPIControllerParameters.fTemperatureReference	...
								= str2double(get( handles.Reference,				'String'));
						tGlobalStructure.tGuiPIControllerParameters.fValueToDesaturateTheIntegralAction	...
								= str2double(get( handles.Desaturation,				'String'));
						tGlobalStructure.tGuiPIControllerParameters.bUseRadiators			...
								= get( handles.HeatAlsoWithRadiators,	'Value');
						%
						tGlobalStructure.tGuiPIController	= Controller.PIController( tGlobalStructure.tGuiPIControllerParameters );
						%
						% allocate the timer for the low level control loop
						tGlobalStructure.tPIControlLoopTimer = timer(														...
							'TimerFcn',			{@Controller.RunGUIPI,				tGlobalStructure.tGuiPIController,		...
																					tGlobalStructure.tTCPConnection,		...
																					handles							},		...
							'ErrorFcn',			{@Controller.OnError,			{	tGlobalStructure.tGuiPIController } },	...
							'StartFcn',			{@Controller.OnStart,			{	tGlobalStructure.tGuiPIController } },	...
							'StopFcn',			{@Controller.OnExitNoTCPClose,	{	tGlobalStructure.tGuiPIController } },	...
							'Period',			tGlobalStructure.tGuiPIController.fSamplingTimeInSeconds,					...
							'ExecutionMode',	'fixedRate',																...
							'BusyMode',			'drop'																		);
						%
						%
						disp('Started the PID controller');
						start( tGlobalStructure.tPIControlLoopTimer );
						%
						tGlobalStructure.tGUIParameters.tActuatingController	= tGlobalStructure.tGuiPIController;
						tGlobalStructure.tGUIParameters.strWorkingController	= 'PID';
						tGlobalStructure.bControllerRunning						= true;
						%
						set(handles.ActuateMSG,'String','PID running, press STOP to change controller.');
						%
						%
					else%
						%
						set(handles.ActuateMSG, 'String', 'One controller is still running. Stop it before.');
						%
					end;%
				case 'OpenLoop'
					%
					set(handles.ActuateMSG, '...Open loop...');
					%
				otherwise
					%
					set(handles.ActuateMSG,'String','Error. No controller selected');
					%
			end;%%%%% switch/case
			%
		else% ~bConnected
			%
			set(handles.ActuateMSG,'String','Impossible to launch the controller. Not Connected.');
			%
		end;%
		%
		%
	catch exception
		%
		set(handles.ActuateMSG,'String','Unable to Run the selected controller.');
		%
		disp( exception.message );
		warning('Unable to Run the controller');
		%
	end;% catch
	%
	%
% end function
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


% --- Executes on button press in StopController.
function StopController_Callback(hObject, eventdata, handles)
% hObject    handle to StopController (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
	%
	global tGlobalStructure;
	%
	try %
		%
		%
		if ( tGlobalStructure.bControllerRunning )
			
			set( handles.StartController,	'BackgroundColor', 'red');
			set( handles.StopController,	'BackgroundColor', 'red');
			
			%
			switch tGlobalStructure.tGUIParameters.strWorkingController
				%
				case 'MPC'
					%
					delete(tGlobalStructure.tPIControlLoopTimer);
					delete(tGlobalStructure.tMainControlLoopTimer);
					%
					tGlobalStructure.tGUIParameters.strWorkingController = 'OpenLoop';
					tGlobalStructure.bControllerRunning		= false;
					%
					set(handles.ActuateMSG,'String','Deterministic MPC stopped.');
					%
				case 'SMPC'
					%
					delete( tGlobalStructure.tPIControlLoopTimer);
					delete( tGlobalStructure.tMainControlLoopTimer);
					%
					tGlobalStructure.tGUIParameters.strWorkingController = 'OpenLoop';
					tGlobalStructure.bControllerRunning		= false;
					%
					set(handles.ActuateMSG,'String','Stochastic MPC stopped.');
					%
				case 'EMPC'
					%
					delete( tGlobalStructure.tPIControlLoopTimer);
					delete( tGlobalStructure.tMainControlLoopTimer);
					%
					tGlobalStructure.tGUIParameters.strWorkingController = 'OpenLoop';
					tGlobalStructure.bControllerRunning		= false;
					%
					set(handles.ActuateMSG,'String','Explicit MPC stopped.');
					%
				case 'PID'
					%
					delete( tGlobalStructure.tPIControlLoopTimer);
					%
					tGlobalStructure.tGUIParameters.strWorkingController = 'OpenLoop';
					tGlobalStructure.bControllerRunning		= false;
					%
					set(handles.ActuateMSG,'String','PID stopped.');
					%
				case 'OpenLoop'
					%
					tGlobalStructure.bControllerRunning		= false;
					%
				otherwise
					%
					set(handles.ActuateMSG,'String','Error. No controller selected');
					%
			end;%%%%% switch/case
			%
		else%
			%
			set(handles.ActuateMSG,'String','No controller is running.');
			%
		end;%
		%
	catch exception
		%
		set(handles.ActuateMSG,'String','Unable to Stop the selected controller.');
		%
		disp( exception.message );
		warning('Unable to Stop the controller');
		%
	end;% catch
	%
	%
% end function

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


function Ventilation_Callback(hObject, eventdata, handles)
% hObject    handle to Ventilation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Ventilation as text
%        str2double(get(hObject,'String')) returns contents of Ventilation as a double


% --- Executes during object creation, after setting all properties.
function Ventilation_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Ventilation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function Cooling_Callback(hObject, eventdata, handles)
% hObject    handle to Cooling (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Cooling as text
%        str2double(get(hObject,'String')) returns contents of Cooling as a double


% --- Executes during object creation, after setting all properties.
function Cooling_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Cooling (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function Radiator_Callback(hObject, eventdata, handles)
% hObject    handle to Radiator (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Radiator as text
%        str2double(get(hObject,'String')) returns contents of Radiator as a double


% --- Executes during object creation, after setting all properties.
function Radiator_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Radiator (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function KP_Callback(hObject, eventdata, handles)
% hObject    handle to KP (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of KP as text
%        str2double(get(hObject,'String')) returns contents of KP as a double


% --- Executes during object creation, after setting all properties.
function KP_CreateFcn(hObject, eventdata, handles)
% hObject    handle to KP (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function KI_Callback(hObject, eventdata, handles)
% hObject    handle to KI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of KI as text
%        str2double(get(hObject,'String')) returns contents of KI as a double


% --- Executes during object creation, after setting all properties.
function KI_CreateFcn(hObject, eventdata, handles)
% hObject    handle to KI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function KD_Callback(hObject, eventdata, handles)
% hObject    handle to KD (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of KD as text
%        str2double(get(hObject,'String')) returns contents of KD as a double


% --- Executes during object creation, after setting all properties.
function KD_CreateFcn(hObject, eventdata, handles)
% hObject    handle to KD (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




% --- Executes on button press in HeatAlsoWithRadiators.
function HeatAlsoWithRadiators_Callback(hObject, eventdata, handles)
% hObject    handle to HeatAlsoWithRadiators (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of HeatAlsoWithRadiators



function ExperimentLenght_Callback(hObject, eventdata, handles)
% hObject    handle to ExperimentLenght (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of ExperimentLenght as text
%        str2double(get(hObject,'String')) returns contents of ExperimentLenght as a double


% --- Executes during object creation, after setting all properties.
function ExperimentLenght_CreateFcn(hObject, eventdata, handles)
% hObject    handle to ExperimentLenght (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function SamplingTime_Callback(hObject, eventdata, handles)
% hObject    handle to SamplingTime (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of SamplingTime as text
%        str2double(get(hObject,'String')) returns contents of SamplingTime as a double


% --- Executes during object creation, after setting all properties.
function SamplingTime_CreateFcn(hObject, eventdata, handles)
% hObject    handle to SamplingTime (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function PredictionHorizon_Callback(hObject, eventdata, handles)
% hObject    handle to PredictionHorizon (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of PredictionHorizon as text
%        str2double(get(hObject,'String')) returns contents of PredictionHorizon as a double


% --- Executes during object creation, after setting all properties.
function PredictionHorizon_CreateFcn(hObject, eventdata, handles)
% hObject    handle to PredictionHorizon (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function NumberOfScenarios_Callback(hObject, eventdata, handles)
% hObject    handle to NumberOfScenarios (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of NumberOfScenarios as text
%        str2double(get(hObject,'String')) returns contents of NumberOfScenarios as a double


% --- Executes during object creation, after setting all properties.
function NumberOfScenarios_CreateFcn(hObject, eventdata, handles)
% hObject    handle to NumberOfScenarios (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function Reference_Callback(hObject, eventdata, handles)
% hObject    handle to Reference (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Reference as text
%        str2double(get(hObject,'String')) returns contents of Reference as a double


% --- Executes during object creation, after setting all properties.
function Reference_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Reference (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function Desaturation_Callback(hObject, eventdata, handles)
% hObject    handle to Desaturation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Desaturation as text
%        str2double(get(hObject,'String')) returns contents of Desaturation as a double


% --- Executes during object creation, after setting all properties.
function Desaturation_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Desaturation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in StartScheduled.
function StartScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to StartScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

global tGlobalStructure;
	%
	try %
		%
		%
		if ( tGlobalStructure.bConnected )
			
			if ( ~tGlobalStructure.bControllerRunning	)
				%
				set( handles.StartScheduled,	'BackgroundColor', 'green');
				set( handles.StopScheduled,		'BackgroundColor', 'green');
				
				% to get the updated models
				addpath(genpath('Models/'));
				
				% to get CPLEX path
				addpath(genpath('C:/Program Files/IBM/ILOG/CPLEX_Studio125/cplex'));
				
				% import the necessary classes
				import EstimationAlgorithms.*;
				import Controller.*;
				import MatlabToTikZ.*;
				import InternetConnection.*;
				import Scenarios.*;
				
				% allocate the TCP connection object
				global tTCPConnection;
				tTCPConnection				= tGlobalStructure.tTCPConnection;
				
				% do the first allocation of the controllers
				global tCO2Controller;
				tCO2Controller				= [];
				
				global tTemperatureController;
				tTemperatureController		= [];
				
				global tAirConditionedPIController;
				tAirConditionedPIController	= [];
				
				strPathScheduledController	= 'ExampleOfControllerSchedule.txt';
				
				global tClockManager;
				tClockManager = ClockManager( strPathScheduledController );
				
				tClockManager.tMainTimer =													...
					timer(																	...
					'TimerFcn',			{ @ClockManager.ManageTheRunningController },	...
					'ErrorFcn',			{ @ClockManager.OnError },						...
					'StartFcn',			{ @ClockManager.OnStart },						...
					'StopFcn',			{ @ClockManager.OnExit },						...
					'Period',			15 * 60,										...
					'ExecutionMode',	'fixedRate',									...
					'BusyMode',			'drop'											);
				
				start( tClockManager.tMainTimer );
				
				tGlobalStructure.bControllerRunning = true;
				
			else
				set(handles.ActuateMSG, 'String', 'One controller is still running. Stop it before.');
			end
			%
		else% ~bConnected
			%
			set(handles.ActuateMSG,'String','Impossible to launch the sheduled controllers. Not Connected.');
			%
		end;%
		%
		%
	catch exception
		%
		set(handles.ActuateMSG,'String','Unable to Run the scheduled controllers.');
		%
		disp( exception.message );
		warning('Unable to Run the scheduled controllers');
		%
	end;% catch


% --- Executes on button press in StopScheduled.
function StopScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to StopScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

global tGlobalStructure;

global tTCPConnection;
global tClockManager;
	
	try 
		
		if ( tGlobalStructure.bControllerRunning )
			
			set( handles.StartScheduled,	'BackgroundColor', 'red');
			set( handles.StopScheduled,		'BackgroundColor', 'red');
			
			if( strcmp( tClockManager.strRunningController,'AkademiskaHC') )
				
				set(handles.ActuateMSG,'String','AkademiskaHC stopped. There are no files to be saved.');
				
			else % saving the results in the appropriate .txt files
				
				set(handles.ActuateMSG,'String','Saving results in the appropriate txt files.');
				delete(tClockManager.tMainTimer);delete(tClockManager.atControllerTimers{1});delete(tClockManager.atControllerTimers{2});
				
			end
			
			tGlobalStructure.bControllerRunning	= false;
			
		else
			
			set(handles.ActuateMSG,'String','No controller is running.');
			
		end;% if
		
	catch exception
		
		set(handles.ActuateMSG,'String','Unable to Stop and save the results from selected controllers.');
		
		disp( exception.message );
		warning('Unable to Stop the controller');
		
	end;% catch


% --- Executes on selection change in ControllerScheduled.
function ControllerScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to ControllerScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns ControllerScheduled contents as cell array
%        contents{get(hObject,'Value')} returns selected item from ControllerScheduled

global aScheduledController

contents = cellstr(get(hObject,'String'));
aScheduledController = contents{get(hObject,'Value')};


% --- Executes during object creation, after setting all properties.
function ControllerScheduled_CreateFcn(hObject, eventdata, handles)
% hObject    handle to ControllerScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in YearScheduled.
function YearScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to YearScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns YearScheduled contents as cell array
%        contents{get(hObject,'Value')} returns selected item from YearScheduled

global iScheduledYear

contents = cellstr(get(hObject,'String'));
iScheduledYear = contents{get(hObject,'Value')};


% --- Executes during object creation, after setting all properties.
function YearScheduled_CreateFcn(hObject, eventdata, handles)
% hObject    handle to YearScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in MonthScheduled.
function MonthScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to MonthScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns MonthScheduled contents as cell array
%        contents{get(hObject,'Value')} returns selected item from MonthScheduled

global iScheduledMonth

contents = cellstr(get(hObject,'String'));
iScheduledMonth = contents{get(hObject,'Value')};


% --- Executes during object creation, after setting all properties.
function MonthScheduled_CreateFcn(hObject, eventdata, handles)
% hObject    handle to MonthScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in DayScheduled.
function DayScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to DayScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns DayScheduled contents as cell array
%        contents{get(hObject,'Value')} returns selected item from DayScheduled

global iScheduledDay

contents = cellstr(get(hObject,'String'));
iScheduledDay = contents{get(hObject,'Value')};


% --- Executes during object creation, after setting all properties.
function DayScheduled_CreateFcn(hObject, eventdata, handles)
% hObject    handle to DayScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in HourScheduled.
function HourScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to HourScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns HourScheduled contents as cell array
%        contents{get(hObject,'Value')} returns selected item from HourScheduled

global iScheduledHour

contents = cellstr(get(hObject,'String'));
iScheduledHour = contents{get(hObject,'Value')};


% --- Executes during object creation, after setting all properties.
function HourScheduled_CreateFcn(hObject, eventdata, handles)
% hObject    handle to HourScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in MinScheduled.
function MinScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to MinScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns MinScheduled contents as cell array
%        contents{get(hObject,'Value')} returns selected item from MinScheduled

global iScheduledMin

contents = cellstr(get(hObject,'String'));
iScheduledMin = contents{get(hObject,'Value')};


% --- Executes during object creation, after setting all properties.
function MinScheduled_CreateFcn(hObject, eventdata, handles)
% hObject    handle to MinScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in SecScheduled.
function SecScheduled_Callback(hObject, eventdata, handles)
% hObject    handle to SecScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns SecScheduled contents as cell array
%        contents{get(hObject,'Value')} returns selected item from SecScheduled

global iScheduledSec

contents = cellstr(get(hObject,'String'));
iScheduledSec = contents{get(hObject,'Value')};


% --- Executes during object creation, after setting all properties.
function SecScheduled_CreateFcn(hObject, eventdata, handles)
% hObject    handle to SecScheduled (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in Validate.
function Validate_Callback(hObject, eventdata, handles)
% hObject    handle to Validate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of Validate

global aScheduledController
global iScheduledYear
global iScheduledMonth
global iScheduledDay
global iScheduledHour
global iScheduledMin
global iScheduledSec

bValidate = get(hObject,'Value');

try
	
	if (bValidate)
		
		fid = fopen('ExampleOfControllerSchedule.txt', 'a');
		fprintf(fid, '%s%s%s%s%s%s\t%s\r\n', iScheduledYear(3:end), iScheduledMonth, iScheduledDay, iScheduledHour, iScheduledMin, iScheduledSec, aScheduledController);
		fclose(fid);
		
		set(handles.ActuateMSG,'String','Controller schedule saved!');
		set(hObject,'BackgroundColor','green');
		
		set(handles.Validate,			'Value',	0);
		set(handles.ControllerScheduled,'Value',	1);
		set(handles.ControllerScheduled,'ForegroundColor',	'blue');
		% 	set(handles.YearScheduled,		'Value',	1);
		% 	set(handles.MonthScheduled,		'Value',	1);
		set(handles.DayScheduled,		'Value',	1);
		set(handles.DayScheduled,		'ForegroundColor',	'blue');
		% 	set(handles.HourScheduled,		'Value',	1);
		% 	set(handles.MinScheduled,		'Value',	1);
		% 	set(handles.SecScheduled,		'Value',	1);
		
	end
	
catch exception
	
	set(handles.ActuateMSG,'String','Unable to write a controllers schedule');
	set(hObject,'BackgroundColor','red');
	
	disp( exception.message );
	warning('Unable to write on RunScheduledControllers.m');
	
end;% catch

