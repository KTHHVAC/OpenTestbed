% Communication class for sending and receiving data via TCP/IP connection
%
 classdef TCPConnection < handle
	%
	%
	%
	properties
		%
		bPrintDebugInformation;
		%
		strIPAddress;
		iPort;
		%
		tMessage;
		% iSize
		% acData
		%
		iBufferSize;
		iMessageLength;
		strError;
		%
		tTcpIpClient
		%
		iTimeOut;
		%
	end % properties
	%
	%
	%
	methods
		%
		function tConnection = TCPConnection( varargin )
			%
			tConnection.bPrintDebugInformation = false;
			%
			if( tConnection.bPrintDebugInformation )
				%
				warning('TCP connection object in debug mode -- to put it in release mode change the parameter in the constructor');
				%
			end;%
			%
			tConnection.strIPAddress	= varargin{1};
			tConnection.iPort			= varargin{2};
			tConnection.iBufferSize		= varargin{3};
			tConnection.iMessageLength	= varargin{4};
			tConnection.iTimeOut		= 1500;
			tConnection.strError		= 'Success';
			%
			try %
				tConnection.tTcpIpClient = tcpip(tConnection.strIPAddress);
				set(tConnection.tTcpIpClient, 'RemotePort',			tConnection.iPort);
				set(tConnection.tTcpIpClient, 'OutputBufferSize',	tConnection.iBufferSize);
% 				set(tConnection.tTcpIpClient, 'NetworkRole',		'client');
				fopen(tConnection.tTcpIpClient);
				%
			catch exception
				%
				% TODO: you cannot go on with connection errors => retry policy
				% controller.AddError( controller.tTCPConnection.strError );
				tConnection.strError = exception.message;
				disp(exception.message)
				warning('Unable to allocate the TCP connection object');
				%
			end;%
			%
		end;% default constructor
		%
	end % methods
	%
	%
	%	
end % classdef

