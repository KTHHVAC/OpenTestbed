function aiEstimatedClasses =			...
			ClassifyEvents(				...
				atEvents,				...
				atSVMs,					...
				aiLabelsVsClassesLUT	)
	%
	global bPrintDebugInformation;
	global tFileID;
	%
	% for readability
	iNumberOfEvents		= numel(atEvents);
	iNumberOfClasses	= numel(atSVMs);
	%
	% if there are no events then return
	if( iNumberOfEvents <= 0 )
		%
		aiEstimatedClasses = [];
		return;
		%
	end;%
	%
	% initialization
	aiEstimatedClasses	= zeros( iNumberOfEvents, 1 );
	iNumberOfFeatures	= numel( atEvents(1).afFeatures );
	aafFeatures			= zeros( iNumberOfEvents, iNumberOfFeatures );
	%
	% summarize the features in a single matrix
	for iEvent = 1:iNumberOfEvents;
		%
		aafFeatures(iEvent, :) = atEvents(iEvent).afFeatures;
		%
	end;%
	%
	% allocate the storage to save the probabilities of the estimates
	aafProbabilitiesOfEstimates = zeros( iNumberOfEvents, iNumberOfClasses );
	%
	for iClass = 1:numel(aiLabelsVsClassesLUT)
		%
		% for readability
		iCurrentClass = aiLabelsVsClassesLUT(iClass);
		%
		% do the estimation step for the current class
		[	aiCurrentEstimatedClasses,								...
	   		fCurrentAccuracy,										...
			aafCurrentProbabilitiesOfEstimates	] =					...
				svmpredict(											...
					double( aiEstimatedClasses == iCurrentClass ),	...
					aafFeatures,									...
					atSVMs{iClass}, '-q -b 1'						);
		%
		% select that probabilities corresponding to the currently estimated class
		aafProbabilitiesOfEstimates(:, iClass) =	...
	   		aafCurrentProbabilitiesOfEstimates(:, atSVMs{iClass}.Label == 1);
		%
		if( bPrintDebugInformation )
			%
			fprintf(tFileID, 'Testing class: %d\n', iCurrentClass);
			%
		end;%
		%
	end;%
	%
	% select as the estimate that one for which the probability is the highest
	[ afMaximalProbabilities, aiMaximalProbabilitiesIndexes ]	=	...
		max( aafProbabilitiesOfEstimates, [], 2 );
	%
	% transform the indexes into classes
	aiEstimatedClasses = aiLabelsVsClassesLUT(aiMaximalProbabilitiesIndexes);
	%
	% remove the invalid data and store the estimated class into the events
	for iEvent = 1:iNumberOfEvents;
		%
		if( ~atEvents(iEvent).bIsValid )
			%
			aiEstimatedClasses(iEvent) = 999;
			%
		end;%
		%
		atEvents(iEvent).iEstimatedClass = aiEstimatedClasses(iEvent);
		%
		if( bPrintDebugInformation )
			%
			fprintf(tFileID, 'Event %d has been classified with class %d\n', iEvent, aiEstimatedClasses(iEvent));
			atEvents(iEvent).Plot();
			%
		end;%
		%
	end;%
	%
end % function

