function [ afValues, afTimes ] = GetOccupancyFromALookUpTable( tSignal )
	% starting from the current data a randomic pattern for the Occupancy
	% for the next requested hours
	%
	afValues							= []; 
	afTimes								= [];
	MAX_VALUE_FOR_THE_OCCUPANCY			= 6;
	LUNCHTIME_VALUE_FOR_THE_OCCUPANCY	= 1;
	%
	try %
		%
		iNumberOfHourlyNeededSamples = mod( tSignal.iSignalID , 10);
		%
		afTimes = [			Time.GetCurrentJulianDate()	+ Time.GetJulianHour()									...
						:	Time.GetJulianHour()																...
						:	Time.GetCurrentJulianDate() + Time.GetJulianHour() * iNumberOfHourlyNeededSamples	];
		%
		%
		for iSample = 1:numel(afTimes) 
			%
			%
			if	(	(		(	8 <		Time.JulianDateToHour( afTimes(iSample) )			)		...
						&&	(			Time.JulianDateToHour( afTimes(iSample) )	< 12	)		...
					)																				...
					||																				...
					(		(	13 <	Time.JulianDateToHour( afTimes(iSample) )			)		...
						&&	(			Time.JulianDateToHour( afTimes(iSample) )	< 18	)		...
					)																				...
				)
				%
% 				afValues(iSample) = randi(MAX_VALUE_FOR_THE_OCCUPANCY,1); 
				afValues(iSample) = MAX_VALUE_FOR_THE_OCCUPANCY;
				%
				%
			elseif	(		(	12 <=	Time.JulianDateToHour( afTimes(iSample) )			)		...
						&&	(			Time.JulianDateToHour( afTimes(iSample) )	<= 13	)		...
					)
				%
				afValues(iSample) = LUNCHTIME_VALUE_FOR_THE_OCCUPANCY;
				%
			else%
				%
				afValues(iSample) = 0;
				%
			end;% end of the random generation of the occupancy pattern
			%
		end;% end of the cycle to get the occupancy pattern
		%
	catch exception
		%
		disp(exception.message);
		warning('Error in the generation of the forecasted occupancy pattern');
		%
	end;% end catch
	%
end % end function
			
		
		