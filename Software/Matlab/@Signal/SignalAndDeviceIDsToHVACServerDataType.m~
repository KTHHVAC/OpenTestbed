function strDataType = SignalAndDeviceIDsToHVACServerDataType( iSignalID, iDeviceID )
	%
	tSignalsIDs = Signal.GetSignalsIDs();
	strDataType = [];
	%
	try %
		%
		if( Signal.IsAMote(iDeviceID) )
			%
			switch( iSignalID )
				%
				case {	tSignalsIDs.iTemperatureOfEnvironment,	...
						tSignalsIDs.iTemperatureOfFreshAirInlet,	...
						tSignalsIDs.iTemperatureOfExhaustAirOutlet,	...
						tSignalsIDs.iTemperatureOfACin,	...
						tSignalsIDs.iTemperatureOfACout,	...
						tSignalsIDs.iSurfaceTemperatureOfRadiatorHotWaterIn,	...
						tSignalsIDs.iSurfaceTemperatureOfRadiatorHotWaterOut,	...
						tSignalsIDs.iTemperatureOfOutsideEnvironment			}
					 strDataType = 'T'; % (Temperature)
				%
				case {	tSignalsIDs.iHumidityOfEnvironment,	...
						tSignalsIDs.iHumidityOfFreshAirInlet,	...
						tSignalsIDs.iHumidityOfExhaustAirOutlet,	...
						tSignalsIDs.iHumidityOfACIn,	...
						tSignalsIDs.iHumidityOfOutsideEnvironment	}
					strDataType = 'H'; % (Humidity)
				%
				case {	tSignalsIDs.iCO2OfEnvironment,	...
						tSignalsIDs.iCO2OfFreshAirInlet,	...
						tSignalsIDs.iCO2OfExhaustAirOutlet,	...
						tSignalsIDs.iCO2OfAC				}
					strDataType = 'C'; % (CO2)
				%
				case {	tSignalsIDs.iNaturalLighting,	...
						tSignalsIDs.iArtificialLighting,	...
						tSignalsIDs.iExternalLightingTop,	...
						tSignalsIDs.iExternalLightingNorth,	...
						tSignalsIDs.iExternalLightingSouth,	...
						tSignalsIDs.iExternalLightingEast,	...
						tSignalsIDs.iExternalLightingWest	}
					strDataType = 'L'; % (Light)
				%
				otherwise
					warning('uncatched signal ID');
				%
			end;% switch
			%
		elseif( Signal.IsAPLC(iDeviceID) )
			%
			switch( iSignalID )
				%
				case {	tSignalsIDs.iTemperatureOfEnvironment,							...
						tSignalsIDs.iCentralSystemTemperatureOfFreshAirInlet,			...
						tSignalsIDs.iCentralSystemTemperatureOfExhaustAirOutlet,		...
						tSignalsIDs.iCentralSystemTemperatureOfFreshAirAfterExchanger,	...
						tSignalsIDs.iCentralSystemTemperatureOfExhaustAirAfterExchanger,...
						tSignalsIDs.iCentralSystemTemperatureOfACin,					...
						tSignalsIDs.iCentralSystemTemperatureOfACout,					...
						tSignalsIDs.iCentralSystemTemperatureOfRadiatorHotWaterIn,		...
						tSignalsIDs.iCentralSystemTemperatureOfRadiatorHotWaterOut		}
					strDataType = 'T'; % (Temperature)
				%
				case {	tSignalsIDs.iCO2OfEnvironment	}
					strDataType = 'C'; % (CO2)
				%
				case {	tSignalsIDs.iMotion	}
					strDataType = 'M'; % (Motion)
				%
				case {	tSignalsIDs.iCentralSystemPressureOfFreshAirInlet,				...
						tSignalsIDs.iCentralSystemPressureOfExhaustAirOutlet,			...
						tSignalsIDs.iCentralSystemPressureDifferenceHotWaterIO,			...
						tSignalsIDs.iCentralSystemPressureDifferenceACIO				}
					strDataType = 'P'; % (Pressure)
				%
				case {	tSignalsIDs.iCentralSystemPumpOpeningPercentageVentilation,		...
						tSignalsIDs.iCentralSystemPumpOpeningPercentageHeating,			...
						tSignalsIDs.iCentralSystemPumpOpeningPercentageAC				}
					strDataType = 'V'; % (Opening percentage of pump)
				%
	% 			case {
	% 				strDataType = 'A'; % (Actuation)
				%
				otherwise
					warning('uncatched signal ID');
				%
			end;% switch
			%
		elseif( Signal.IsAPeopleCounter(iDeviceID) )
			%
			strDataType = 'O'; % (Occupancy)
			%
		elseif( Signal.IsACurrentWeather(iSignalID, iDeviceID) )
			%
			strDataType = ''; % (Occupancy)
			%
		else%
			%
			iSignalID
			iDeviceID
			warning('uncatched device');
			%
		end;%
	%
% 		strDataType = 'T'; % (Temperature)
% 		strDataType = 'WS'; % (Wind Speed)
% 		strDataType = 'WD'; % (Wind Direction)
% 		strDataType = 'WG'; % (Wind Gusts)
% 		strDataType = 'AP'; % (Air Pressure)
% 		strDataType = 'Pr'; % (Precipitation)
	%
end % function

