function strDescription = GetDescription( iSignalID, iDeviceID )
	%
	tSignalsIDs = Signal.GetSignalsIDs();
	%
	switch( iSignalID )
		case tSignalsIDs.iTemperatureOfEnvironment				
 			strDescription = sprintf('Temperature of the environment - Device %d - Signal %d', iDeviceID, iSignalID);		
			
		case tSignalsIDs.iTemperatureOfFreshAirInlet	
			strDescription = sprintf('Temperature of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iTemperatureOfExhaustAirOutlet			
			strDescription = sprintf('Temperature of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iTemperatureOfAC						
			strDescription = sprintf('Temperature of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iTemperatureOfWall												
			strDescription = sprintf('Temperature of the Wall - Device %d - Signal %d', iDeviceID, iSignalID);		
			
		case tSignalsIDs.iTemperatureOfCeiling												
			strDescription = sprintf('Temperature of the Ceiling - Device %d - Signal %d', iDeviceID, iSignalID);			
			
		case tSignalsIDs.iCentralSystemTemperatureOfAC	
			strDescription = sprintf('Temperature of the AC (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
	
		case tSignalsIDs.iCentralSystemTemperatureOfRadiatorHotWaterIn			
			strDescription = sprintf('Temperature of the Radiator (hot water in) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfRadiatorHotWaterOut		
			strDescription = sprintf('Temperature of the Radiator (hot water out) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iSurfaceTemperatureOfRadiatorHotWaterIn	
			strDescription = sprintf('Surface Temperature of the Radiator (hot water in) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iSurfaceTemperatureOfRadiatorHotWaterOut	
			strDescription = sprintf('Surface Temperature of the Radiator (hot water out) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iTemperatureOfOutsideEnvironment			
			strDescription = sprintf('Temperature of Outside Environment - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iHumidityOfEnvironment					
 			strDescription = sprintf('Humidity of the environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iHumidityOfFreshAirInlet		
			strDescription = sprintf('Humidity of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iHumidityOfExhaustAirOutlet				
			strDescription = sprintf('Humidity of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iHumidityOfAC		
			strDescription = sprintf('Humidity of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iHumidityOfOutsideEnvironment			
			strDescription = sprintf('Humidity of Outside Environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCO2OfEnvironment						
			strDescription = sprintf('CO2 of the Environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCO2OfFreshAirInlet						
			strDescription = sprintf('CO2 of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCO2OfExhaustAirOutlet					
			strDescription = sprintf('CO2 of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iCO2OfAC		
			strDescription = sprintf('CO2 of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iNaturalLighting	
			strDescription = sprintf('Natural Lighting in the room - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iArtificialLighting
			strDescription = sprintf('Artificial Lighting in the room - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingTop
			strDescription = sprintf('External Lighting from the Top - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingNorth					
			strDescription = sprintf('External Lighting from North - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingSouth					
			strDescription = sprintf('External Lighting from South - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingEast						
			strDescription = sprintf('External Lighting from East - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingWest						
			strDescription = sprintf('External Lighting from West - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iOccupancy								
			strDescription = sprintf('Occupancy - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iMotion
			strDescription = sprintf('Motion Detection - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEvents			
			strDescription = sprintf('Events - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iAcousticNoise	
			strDescription = sprintf('Acustic Noise - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPumpOpeningPercentageVentilation
			strDescription = sprintf('Pump Opening Percentage Ventilation (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPumpOpeningPercentageHeating
			strDescription = sprintf('Pump Opening Percentage Heating (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPumpOpeningPercentageAC
			strDescription = sprintf('Pump Opening Percentage AC (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfFreshAirInlet			
			strDescription = sprintf('Temperature of the Fresh Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfExhaustAirOutlet			
			strDescription = sprintf('Temperature of the Exhaust Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfFreshAirAfterExchanger	
			strDescription = sprintf('Temperature of the Fresh Air after Heat Ex-changer (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfExhaustAirAfterExchanger	
			strDescription = sprintf('Temperature of the Exhaust Air after Heat Ex-changer (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureOfFreshAirInlet				
			strDescription = sprintf('Pressure of the Fresh Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureOfExhaustAirOutlet			
			strDescription = sprintf('Pressure of the Exhaust Air Outlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureDifferenceHotWaterIO			
			strDescription = sprintf('Pressure Difference between hot water in-out (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureDifferenceACIO				
			strDescription = sprintf('Pressure Difference between AC in-out (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iFreshAirInletValveOpeningPercentage
			strDescription = sprintf('Fresh Air Inlet valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExhaustAirOutletValveOpeningPercentage
			strDescription = sprintf('Exhaust air outlet valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iACValveOpeningPercentage
			strDescription = sprintf('AC valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iPortableHeaterOpeningPercentage
			strDescription = sprintf('Portable Heater Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iRadiatorValveOpeningPercentage
			strDescription = sprintf('Radiator valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedExternalTemperatureCurrent
			strDescription = sprintf('Forecasted External Temperature ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedWindSpeedCurrent
			strDescription = sprintf('Forecasted Wind Speed ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iForecastedWindDirectionCurrent		
			strDescription = sprintf('Forecasted Wind Direction ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedWindGustsCurrent
			strDescription = sprintf('Forecasted External Wind Direction ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedPrecipitationCurrent		
			strDescription = sprintf('Forecasted Precipitation ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iForecastedExternalAirPressure
			strDescription = sprintf('Forecasted External Air Pressure ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
			
	
		case tSignalsIDs.iPostTsa
			strDescription = sprintf('Current Desired Supply Air Temperature by Temperature MPC - Device %d - Signal %d', iDeviceID, iSignalID);
					
		case tSignalsIDs.iPostmVent
			strDescription = sprintf('Current Desired Mass Flow by Temperature MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iPostTrad
			strDescription = sprintf('Current Desired  Radiator Temperature by Temperature MPC  - Device %d - Signal %d', iDeviceID, iSignalID);	
			
		case tSignalsIDs.iBuildSysUheat
			strDescription = sprintf('Current Desired Uh by Temperature MPC  - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iBuildSysUcool
			strDescription = sprintf('Current Desired Uc by Temperaute MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iBuildSysUradiator
			strDescription = sprintf('Current Desired U radiator by Temperaute MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iVentingPercentage
			strDescription = sprintf('Current Desired Venting Percentage by MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCalculatedACPercentage
			strDescription = sprintf('Current Desired AC Opening Percentage by Low Level MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iTsa
			strDescription = sprintf('Current Tsa by Low Level MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iTai
			strDescription = sprintf('Current Tai by Low Level MPC - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iBuildSysUCO2
			strDescription = sprintf('Current Output from CO2 MPC - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iBuildSysULowerBound
			strDescription = sprintf('Lower bound produced from the CO2 MPC - Device %d - Signal %d', iDeviceID, iSignalID);
		
	
		otherwise
			%
			% -------------------------------------------------------------------
			% forecasts
			if iSignalID > 80000 && iSignalID < 81000
				%
				iHour = iSignalID - 80000;
				strDescription = sprintf('Forecasted External Temperature ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif iSignalID > 81000 && iSignalID < 82000
				%
				iHour = iSignalID - 81000;
				strDescription = sprintf('Forecasted Wind Speed ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif iSignalID > 82000 && iSignalID <= 82999
				%
				iHour = iSignalID - 82000;
				strDescription = sprintf('Forecasted Wind Direction ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif iSignalID > 84000 && iSignalID < 85000
				%
				iHour = iSignalID - 84000;
				strDescription = sprintf('Forecasted Precipitation ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif iSignalID > 85000 && iSignalID < 86000
				%
				iHour = iSignalID - 85000;
				strDescription = sprintf('Forecasted External Air Pressure ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif iSignalID > 86000 && iSignalID < 87000
				%
				iHour = iSignalID - 86000;
				strDescription = sprintf('Forecasted Sky Cover ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
				%
				% -------------------------------------------------------------------
				% software sources
			elseif( 60000 <= iSignalID && iSignalID <= 69999 )
			   	%
				strDescription = sprintf('Software source, go to the wiki - Device %d - Signal %d', iDeviceID, iSignalID);	
				%
				%
				% -------------------------------------------------------------------
				% radiators
			elseif iSignalID >= 1030 && iSignalID <= 1040
				%
				strDescription = sprintf('Radiator Surface Temperature - Device %d - Signal %d', iDeviceID, iSignalID);
				%
			else
				%
				fprintf('Device %d - Signal %d', iDeviceID, iSignalID);
				warning('Signal.GetDescription() is not supporting the current iSignalLabel');
				%
			end;%
		%
		%
	end;% switch
	%
end %

