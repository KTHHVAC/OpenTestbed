function strDescription = GetDescription( iSignalID, iDeviceID )
	%
	% initialization
	strDescription = '';
	%
	% consistency check
	if(		numel(iSignalID) == 0	...
	   	||	numel(iDeviceID) == 0	)
		%
		return;
		%
	end;%
	%
	tSignalsIDs = Signal.GetSignalsIDs();
	%
	switch( iSignalID )
		%
		case tSignalsIDs.iTemperatureOfEnvironment				
 			strDescription = sprintf('Temperature of the environment - Device %d - Signal %d', iDeviceID, iSignalID);		
			
		case tSignalsIDs.iEstimatedTemperatureOfEnvironment				
 			strDescription = sprintf('Estimated temperature of the environment - Device %d - Signal %d', iDeviceID, iSignalID);		
			
		case tSignalsIDs.iTemperatureOfFreshAirInlet	
			strDescription = sprintf('Temperature of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iEstimatedTemperatureOfFreshAirInlet	
			strDescription = sprintf('Estimated temperature of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iTemperatureOfExhaustAirOutlet			
			strDescription = sprintf('Temperature of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iEstimatedTemperatureOfExhaustAirOutlet			
			strDescription = sprintf('Estimated temperature of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iTemperatureOfAC						
			strDescription = sprintf('Temperature of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedTemperatureOfAC						
			strDescription = sprintf('Estimated temperature of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iTemperatureOfWall												
			strDescription = sprintf('Temperature of the Wall - Device %d - Signal %d', iDeviceID, iSignalID);		
			
		case tSignalsIDs.iEstimatedTemperatureOfWall												
			strDescription = sprintf('Estimated temperature of the Wall - Device %d - Signal %d', iDeviceID, iSignalID);		
			
		case tSignalsIDs.iTemperatureOfCeiling												
			strDescription = sprintf('Temperature of the Ceiling - Device %d - Signal %d', iDeviceID, iSignalID);			
			
		case tSignalsIDs.iEstimatedTemperatureOfCeiling												
			strDescription = sprintf('Estimated temperature of the Ceiling - Device %d - Signal %d', iDeviceID, iSignalID);			
			
		case tSignalsIDs.iCentralSystemTemperatureOfAC	
			strDescription = sprintf('Temperature of the AC (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfACout	
			strDescription = sprintf('Temperature of the AC (OUT) (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
	
		case tSignalsIDs.iEstimatedCentralSystemTemperatureOfAC	
			strDescription = sprintf('Estimated temperature of the AC (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
	
		case tSignalsIDs.iCentralSystemTemperatureOfRadiatorHotWaterIn			
			strDescription = sprintf('Temperature of the Radiator (hot water in) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemTemperatureOfRadiatorHotWaterIn			
			strDescription = sprintf('Estimated temperature of the Radiator (hot water in) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfRadiatorHotWaterOut		
			strDescription = sprintf('Temperature of the Radiator (hot water out) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemTemperatureOfRadiatorHotWaterOut		
			strDescription = sprintf('Estimated temperature of the Radiator (hot water out) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iSurfaceTemperatureOfRadiator
			strDescription = sprintf('Surface Temperature of the Radiator - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedSurfaceTemperatureOfRadiator	
			strDescription = sprintf('Estimated surface Temperature of the Radiator - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iSurfaceTemperatureOfRadiatorHotWaterIn	
			strDescription = sprintf('Surface Temperature of the Radiator (hot water in) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedSurfaceTemperatureOfRadiatorHotWaterIn	
			strDescription = sprintf('Estimated surface Temperature of the Radiator (hot water in) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iSurfaceTemperatureOfRadiatorHotWaterOut	
			strDescription = sprintf('Surface Temperature of the Radiator (hot water out) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedSurfaceTemperatureOfRadiatorHotWaterOut	
			strDescription = sprintf('Estimated surface Temperature of the Radiator (hot water out) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iTemperatureOfOutsideEnvironment			
			strDescription = sprintf('Temperature of Outside Environment - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iEstimatedTemperatureOfOutsideEnvironment			
			strDescription = sprintf('Estimated temperature of Outside Environment - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iHumidityOfEnvironment					
 			strDescription = sprintf('Humidity of the environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedHumidityOfEnvironment					
 			strDescription = sprintf('Estimated humidity of the environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iHumidityOfFreshAirInlet		
			strDescription = sprintf('Humidity of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iEstimatedHumidityOfFreshAirInlet		
			strDescription = sprintf('Estimated humidity of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iHumidityOfExhaustAirOutlet				
			strDescription = sprintf('Humidity of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iEstimatedHumidityOfExhaustAirOutlet				
			strDescription = sprintf('Estimated humidity of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iHumidityOfAC		
			strDescription = sprintf('Humidity of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedHumidityOfAC		
			strDescription = sprintf('Estimated humidity of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iHumidityOfOutsideEnvironment			
			strDescription = sprintf('Humidity of Outside Environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedHumidityOfOutsideEnvironment			
			strDescription = sprintf('Estimated humidity of Outside Environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCO2OfEnvironment						
			strDescription = sprintf('CO2 of the Environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCO2OfEnvironment						
			strDescription = sprintf('Estimated cO2 of the Environment - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCO2OfFreshAirInlet						
			strDescription = sprintf('CO2 of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCO2OfFreshAirInlet						
			strDescription = sprintf('Estimated cO2 of the Fresh Air Inlet - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCO2OfExhaustAirOutlet					
			strDescription = sprintf('CO2 of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iEstimatedCO2OfExhaustAirOutlet					
			strDescription = sprintf('Estimated cO2 of the Exhaust Air Outlet - Device %d - Signal %d', iDeviceID, iSignalID); 
			
		case tSignalsIDs.iCO2OfAC		
			strDescription = sprintf('CO2 of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCO2OfAC		
			strDescription = sprintf('Estimated cO2 of the AC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iNaturalLighting	
			strDescription = sprintf('Natural Lighting in the room - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedNaturalLighting	
			strDescription = sprintf('Estimated natural Lighting in the room - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iArtificialLighting
			strDescription = sprintf('Artificial Lighting in the room - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedArtificialLighting
			strDescription = sprintf('Estimated artificial Lighting in the room - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingTop
			strDescription = sprintf('External Lighting from the Top - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedExternalLightingTop
			strDescription = sprintf('Estimated external Lighting from the Top - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingNorth					
			strDescription = sprintf('External Lighting from North - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedExternalLightingNorth					
			strDescription = sprintf('Estimated external Lighting from North - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingSouth					
			strDescription = sprintf('External Lighting from South - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedExternalLightingSouth					
			strDescription = sprintf('Estimated external Lighting from South - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingEast						
			strDescription = sprintf('External Lighting from East - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedExternalLightingEast						
			strDescription = sprintf('Estimated external Lighting from East - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExternalLightingWest						
			strDescription = sprintf('External Lighting from West - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedExternalLightingWest						
			strDescription = sprintf('Estimated external Lighting from West - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iOccupancy								
			strDescription = sprintf('Occupancy - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedOccupancy								
			strDescription = sprintf('Estimated occupancy - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iMotion
			strDescription = sprintf('Motion Detection - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedMotion
			strDescription = sprintf('Estimated motion Detection - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEvents			
			strDescription = sprintf('Events - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedEvents			
			strDescription = sprintf('Estimated events - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iAcousticNoise	
			strDescription = sprintf('Acustic Noise - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedAcousticNoise	
			strDescription = sprintf('Estimated acustic Noise - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPumpOpeningPercentageVentilation
			strDescription = sprintf('Pump Opening Percentage Ventilation (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemPumpOpeningPercentageVentilation
			strDescription = sprintf('Estimated pump Opening Percentage Ventilation (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPumpOpeningPercentageHeating
			strDescription = sprintf('Pump Opening Percentage Heating (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemPumpOpeningPercentageHeating
			strDescription = sprintf('Estimated pump Opening Percentage Heating (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPumpOpeningPercentageAC
			strDescription = sprintf('Pump Opening Percentage AC (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemPumpOpeningPercentageAC
			strDescription = sprintf('Estimated pump Opening Percentage AC (Central System)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfFreshAirInlet			
			strDescription = sprintf('Temperature of the Fresh Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemTemperatureOfFreshAirInlet			
			strDescription = sprintf('Estimated temperature of the Fresh Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfExhaustAirOutlet			
			strDescription = sprintf('Temperature of the Exhaust Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemTemperatureOfExhaustAirOutlet			
			strDescription = sprintf('Estimated temperature of the Exhaust Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfFreshAirAfterExchanger	
			strDescription = sprintf('Temperature of the Fresh Air after Heat Ex-changer (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iEstimatedCentralSystemTemperatureOfFreshAirAfterExchanger	
			strDescription = sprintf('Estimated temperature of the Fresh Air after Heat Ex-changer (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemTemperatureOfExhaustAirAfterExchanger	
			strDescription = sprintf('Temperature of the Exhaust Air after Heat Ex-changer (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemTemperatureOfExhaustAirAfterExchanger	
			strDescription = sprintf('Estimated temperature of the Exhaust Air after Heat Ex-changer (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureOfFreshAirInlet				
			strDescription = sprintf('Pressure of the Fresh Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemPressureOfFreshAirInlet				
			strDescription = sprintf('Estimated pressure of the Fresh Air Inlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureOfExhaustAirOutlet			
			strDescription = sprintf('Pressure of the Exhaust Air Outlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemPressureOfExhaustAirOutlet			
			strDescription = sprintf('Estimated pressure of the Exhaust Air Outlet (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureDifferenceHotWaterIO			
			strDescription = sprintf('Pressure Difference between hot water in-out (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemPressureDifferenceHotWaterIO			
			strDescription = sprintf('Estimated pressure Difference between hot water in-out (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCentralSystemPressureDifferenceACIO				
			strDescription = sprintf('Pressure Difference between AC in-out (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedCentralSystemPressureDifferenceACIO				
			strDescription = sprintf('Estimated pressure Difference between AC in-out (Central System) - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iFreshAirInletValveOpeningPercentage
			strDescription = sprintf('Fresh Air Inlet valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedFreshAirInletValveOpeningPercentage
			strDescription = sprintf('Estimated fresh Air Inlet valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iExhaustAirOutletValveOpeningPercentage
			strDescription = sprintf('Exhaust air outlet valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedExhaustAirOutletValveOpeningPercentage
			strDescription = sprintf('Estimated exhaust air outlet valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iACValveOpeningPercentage
			strDescription = sprintf('AC valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedACValveOpeningPercentage
			strDescription = sprintf('Estimated aC valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iPowerConsumption
			strDescription = sprintf('Power consumption - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedPowerConsumption
			strDescription = sprintf('Estimated Power consumption - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iPortableHeaterOpeningPercentage
			strDescription = sprintf('Portable Heater Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedPortableHeaterOpeningPercentage
			strDescription = sprintf('Estimated portable Heater Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iRadiatorValveOpeningPercentage
			strDescription = sprintf('Radiator valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iEstimatedRadiatorValveOpeningPercentage
			strDescription = sprintf('Estimated radiator valve Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedExternalTemperatureCurrent
			strDescription = sprintf('Forecasted External Temperature ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedWindSpeedCurrent
			strDescription = sprintf('Forecasted Wind Speed ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iForecastedWindDirectionCurrent		
			strDescription = sprintf('Forecasted Wind Direction ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedWindGustsCurrent
			strDescription = sprintf('Forecasted External Wind Direction ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iForecastedPrecipitationCurrent		
			strDescription = sprintf('Forecasted Precipitation ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);

		case tSignalsIDs.iForecastedExternalAirPressureCurrent
			strDescription = sprintf('Forecasted External Air Pressure ~ Current - Device %d - Signal %d', iDeviceID, iSignalID);
	


	
		case tSignalsIDs.iSupplyAirTemperatureAfterPostProcessing
			strDescription = sprintf('Current Desired Supply Air Temperature by Temperature MPC - Device %d - Signal %d', iDeviceID, iSignalID);
					
		case tSignalsIDs.iAirMassFlowAfterPostProcessing
			strDescription = sprintf('Current Desired Mass Flow by Temperature MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iRadiantTemperatureAfterPostProcessing
			strDescription = sprintf('Current Desired  Radiator Temperature by Temperature MPC  - Device %d - Signal %d', iDeviceID, iSignalID);	
			
		case tSignalsIDs.iAmountOfVentilationHeatingPowerNeeded
			strDescription = sprintf('Current Desired Uh by Temperature MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iAmountOfVentilationCoolingPowerNeeded
			strDescription = sprintf('Current Desired Uc by Temperaute MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iAmountOfRadiatorPowerNeeded
			strDescription = sprintf('Current Desired U radiator by Temperaute MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iVentilationOpeningPercentage
			strDescription = sprintf('Current Desired Venting Percentage by MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iACOpeningPercentage
			strDescription = sprintf('Current Desired AC Opening Percentage - Device %d - Signal %d', iDeviceID, iSignalID);
			
% 		case tSignalsIDs.iConditionedAirTemperature
% 			strDescription = sprintf('Current Conditioned Air Temperature (Tac)- Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iAirInletTemperature
			strDescription = sprintf('Current Air Inlet Temperature (Tai) - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iAmountOfFreshAirNeeded
			strDescription = sprintf('Current Output from CO2 MPC (Uco2)- Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iLowerBoundOfFreshAirNeeded
			strDescription = sprintf('Lower bound produced from the CO2 MPC - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.fTemperatureError
			strDescription = sprintf('Error of Temperature - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.fIntegrationOfTheTemperatureError
			strDescription = sprintf('Integration of the error of temperature - Device %d - Signal %d', iDeviceID, iSignalID);
		
			
		case tSignalsIDs.iHeatingDifferrenceOfTemperatureForVentilation
			strDescription = sprintf('Difference of temperature requested to heat with the ventilation - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iCoolingDifferrenceOfTemperatureForVentilation
			strDescription = sprintf('Difference of temperature requested to cool with the ventilation - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iDifferenceAmountOfVentilationHeatingPowerNeeded
			strDescription = sprintf('Difference of the amount of power needed to heat with the ventilation - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iDifferenceAmountOfVentilationCoolingPowerNeeded
			strDescription = sprintf('Difference of the amount of power needed to cool with the ventilation - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iAirConditionedTempertureRequested
			strDescription = sprintf('Temperature of the air conditioning to set - Device %d - Signal %d', iDeviceID, iSignalID);

			
		case tSignalsIDs.iDoorOpen
			strDescription = sprintf('Door opened - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iDoorClose
			strDescription = sprintf('Door closed - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iPassingPhotoelectricSensor1
			strDescription = sprintf('Passing the photoelectric Sensor 1 - Device %d - Signal %d', iDeviceID, iSignalID);
			
		case tSignalsIDs.iPassedPhotoelectricSensor1
			strDescription = sprintf('Passed the photoelectric Sensor 1 - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iPassingPhotoelectricSensor2
			strDescription = sprintf('Passing the photoelectric Sensor 2 - Device %d - Signal %d', iDeviceID, iSignalID);
		
		case tSignalsIDs.iPassedPhotoelectricSensor2
			strDescription = sprintf('Passed the photoelectric Sensor 2 - Device %d - Signal %d', iDeviceID, iSignalID);

		
		% -------------------------------------------------------------------
		otherwise
			%
			if( 42000 <= iSignalID && iSignalID < 43000 )
				%
				iHour = iSignalID - 42000;
				strDescription = sprintf('Forecasted Solar Radiation ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 50000 <= iSignalID && iSignalID < 51000 )
				%
				iHour = iSignalID - 50000;
				strDescription = sprintf('Forecasted Occupancy ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 60000 <= iSignalID && iSignalID < 70000 )
			   	%
				strDescription = sprintf('Software source, go to the wiki - Device %d - Signal %d', iDeviceID, iSignalID);	
				%
			elseif( 80000 <= iSignalID && iSignalID < 81000 )
				%
				iHour = iSignalID - 80000;
				strDescription = sprintf('Forecasted External Temperature ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 81000 <= iSignalID && iSignalID < 82000 )
				%
				iHour = iSignalID - 81000;
				strDescription = sprintf('Forecasted Wind Speed ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 82000 <= iSignalID && iSignalID < 83000 )
				%
				iHour = iSignalID - 82000;
				strDescription = sprintf('Forecasted Wind Direction ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 84000 <= iSignalID && iSignalID < 85000 )
				%
				iHour = iSignalID - 84000;
				strDescription = sprintf('Forecasted Precipitation ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 85000 <= iSignalID && iSignalID < 86000 )
				%
				iHour = iSignalID - 85000;
				strDescription = sprintf('Forecasted External Air Pressure ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 86000 <= iSignalID && iSignalID < 87000 )
				%
				iHour = iSignalID - 86000;
				strDescription = sprintf('Forecasted Sky Cover ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 87000 <= iSignalID && iSignalID < 88000 )
				%
				iHour = iSignalID - 87000;
				strDescription = sprintf('Forecasted Solar Radiation ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
				%
			elseif( 10000 <= iSignalID && iSignalID < 11000 )
				%
				iHour = iSignalID - 10000;
				strDescription = sprintf('Forecasted Temperature Of Environment ~ %d h ahead - Device %d - Signal %d', iHour, iDeviceID, iSignalID);
			else%
				%
				fprintf('Device %d - Signal %d', iDeviceID, iSignalID);
				warning('Signal.GetDescription() is not supporting the current iSignalLabel');
				%
			end;% otherwise
		%
		%
	end;% switch
	%
end % function

