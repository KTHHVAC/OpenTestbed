% function [ afValues, afTimes ] = GetRoomTemperatureForecastsFromALookUpTable( tSignal )
% taking the room temperature forecasts of a certain room from a desired
% lookup table
%
function [ afValues, afTimes ] = GetSinusoidalForecasts( tSignal, tConnection )
	%
	%
	try %
		%
		%
		tDevicesIDs						= Signal.GetDevicesIDs();
		tSignalsIDs						= Signal.GetSignalsIDs();
		iNumberOfHourlyNeededSamples	= mod( tSignal.iSignalID , 100); 
		iHourlyResolution				= 4;
		%
		%
		afValues	=	[];
		afTimes		=	[		Time.GetCurrentJulianDate()	+ 1/iHourlyResolution * Time.GetJulianHour()			...
							:	1/iHourlyResolution * Time.GetJulianHour()											...
							:	Time.GetCurrentJulianDate() + Time.GetJulianHour() * iNumberOfHourlyNeededSamples	];
		%
		%------------------------------------------------------------------
		% loading the various mean values switching the possible cases 
		% (the values that are written here can be changed but these are
		% mean values referred to a precise dataset studied)
		%
		if tSignal.iSignalID == tSignalsIDs.iForecastedTemperatureOfEnvironment8h
			%
			switch tSignal.iDeviceID
				%
				case tDevicesIDs.iA231LocalLookUpTableForecast
					%
					fDelta				= 1;
					iDefaultSignalID	= tSignalsIDs.iTemperatureOfEnvironment;
					iDefaultDeviceID	= tDevicesIDs.iMote1213;
					[ fStartingValue, fTime ] = tConnection.GetFromServer( iDefaultSignalID, iDefaultDeviceID );
					%
				case tDevicesIDs.iA221LocalLookUpTableForecast		%
					%
					fDelta				= 1;
					iDefaultSignalID	= tSignalsIDs.iTemperatureOfEnvironment;%iTemperatureOfWall
					iDefaultDeviceID	= tDevicesIDs.iMote1213;%1110
					[ fStartingValue, fTime ] = tConnection.GetFromServer( iDefaultSignalID, iDefaultDeviceID );
					%
				case tDevicesIDs.iA208LocalLookUpTableForecast		% CORRIDOR
					%
					fDelta			= 1;
					iDefaultSignalID	= tSignalsIDs.iTemperatureOfEnvironment;
					iDefaultDeviceID	= tDevicesIDs.iMote1003;
					[ fStartingValue, fTime ] = tConnection.GetFromServer( iDefaultSignalID, iDefaultDeviceID );
					%
				case tDevicesIDs.iA225LocalLookUpTableForecast		% TODO: be more precise!! now it is USED FOR THE CEILING
					%
					fDelta			= 1;
					iDefaultSignalID	= tSignalsIDs.iTemperatureOfCeiling;
					iDefaultDeviceID	= tDevicesIDs.iMote1037;
					[ fStartingValue, fTime ] = tConnection.GetFromServer( iDefaultSignalID, iDefaultDeviceID );
					%
				otherwise
					%
					fDelta			= 1;
					fStartingValue	= 20.5;
					warning('This forecast is not available or the requested Device ID is incorrect. Initial condition set by default to 20.5');
					%
					%
			end;% end switch cases
			%
		else%
			warning('This forecast is not available or the requested Device ID is incorrect.');
			%
		end;%

		%
		%
		%------------------------------------------------------------------
		% building the sinusoidal signals
		%
		%
		afSinusoidalTime		= 0 : 1/iHourlyResolution : 72;
		afSinusoidalVariation	= - fDelta * cos( 8*pi / (24*iHourlyResolution) .* afSinusoidalTime);
		%
		% end of the cycle to get the 2 days pattern of the temperatures
		%
		%
		%------------------------------------------------------------------
		% getting the correct vector of predictions
		%
		iCurrentHour		= Time.JulianDateToHour( afTimes(1) );
		iHourIndex			= find( afSinusoidalTime == iCurrentHour );
		%
		for iTimeSample = 1 : numel(afTimes)
			%
			afValues( iTimeSample )	= fStartingValue + afSinusoidalVariation( iHourIndex + 1 );
			iHourIndex				= iHourIndex + 1;
			%
		end;% end 
		%
		%
	catch exception
		%
		disp(exception.message);
		warning('Error calculating some forecasts of one of the adjacent rooms');
		%
	end;% end catch
	%
	%
end % end function
