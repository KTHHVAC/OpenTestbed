% function Insert( tSignal, afValues, afTimes, bOverwriteOldSamples )
% 
% insert some values at specific times
%
% notice: if we find that there was already a certain specific time in the
% signal then we overwrite the corresponding value
%
function Insert( tSignal, afValues, afTimes, bOverwriteOldSamples )
	%
	%
	% sanity check
	switch( nargin )
		%
		case 1
			error('too few input parameters');
		%
		case 2
			if( numel(afValues) > 1 )
				%
				warning('you cannot add more than one sample with the method Insert() without specifying an equal number of afTimes. I am going to ignore all the values passed but the first one');
				afValues = afValues(1);
				%
			end;%
			afTimes = Time.GetCurrentJulianDate();
			bOverwriteOldSamples = true;
		%
		case 3
			bOverwriteOldSamples = true;
		%
		case 4
			% do nothing, it corresponds to the full signature
		%
		otherwise
			error('wrong number of parameters')
		%
	end;% switch
	%
	%
	% force values and times to be columns
	afValues	= reshape(	afValues,	numel( afValues ),	1 );
	afTimes		= reshape(	afTimes,	numel( afTimes ),	1 );
	%
	% check if the number of values and times inserted are the same
	if( numel(afValues) ~= numel(afTimes) )
		%
		warning('you are inserting in a signal two vectors afValues and afTimes that differ in size!!!');
		%
	end;%
	%
	%
	if( tSignal.bPrintDebugInformation )
		%
		fprintf('Insert() in signal %d %d: ', tSignal.iSignalID, tSignal.iDeviceID );
		%
	end;%
	%
	%
	if( numel( tSignal.afTimes ) == 0 )
		%
		% to prevent guys that give "afTimes" that are not sorted we insert just
		% 1 sample then we recall the function 
		tSignal.afTimes(1)			= afTimes(1);
		tSignal.afValues(1)			= afValues(1);
		tSignal.afInaccuracies(1)	= 0;
		%
		tSignal.Insert( afValues(2:end), afTimes(2:end), bOverwriteOldSamples );
		%
		%
		if( tSignal.bPrintDebugInformation )
			%
			fprintf('Insert(): number of elements: %d (from number of elements == 0)\n', numel(tSignal.afTimes));
			%
		end;%
		%
	else%
		%
		for iSample = 1:numel( afTimes )
			%
			if( afTimes(iSample) > tSignal.afTimes(end) )
				%
				tSignal.InsertAtTheEnd( afValues(iSample), afTimes(iSample) );
				%
			else%
				%
				% find the place where to put the sample
				iIndex = find(  tSignal.afTimes > afTimes(iSample), 1, 'first' );
				%
				% check if the time is already in the signal
				if( afTimes(iSample) == tSignal.afTimes(iIndex) )
					%
					% case time is already present => overwrite if desired
					if( bOverwriteOldSamples )
						%
						tSignal.afValues(iIndex, 1) 		= afValues(iSample);
						tSignal.afInaccuracies(iIndex, 1) 	= 0;
						%
						if( tSignal.bPrintDebugInformation )
							%
							fprintf('Insert(): number of elements: %d (from overwrite old samples)\n', numel(tSignal.afTimes));
							%
						end;%
						%
					end;%
					%
					if( tSignal.bPrintDebugInformation )
						%
						fprintf('Insert(): number of elements: %d (no elements have been inserted)\n', numel(tSignal.afTimes));
						%
					end;%
					%
				else%
					%
					%
					% 2) shift the samples from iIndex, one to the right
					tSignal.afValues(iIndex+1:end+1, 1)			= tSignal.afValues(iIndex:end, 1);
					tSignal.afTimes(iIndex+1:end+1, 1)			= tSignal.afTimes(iIndex:end, 1);
					tSignal.afInaccuracies(iIndex+1:end+1, 1)	= tSignal.afInaccuracies(iIndex:end, 1);
					%
					% 3) insert the desired value
					tSignal.afValues(iIndex, 1)			= afValues(iSample);
					tSignal.afTimes(iIndex, 1)			= afTimes(iSample);
					tSignal.afInaccuracies(iIndex, 1)	= 0;
					%
					if( tSignal.bPrintDebugInformation )
						%
						fprintf('Insert(): number of elements: %d (from normal case)\n', numel(tSignal.afTimes));
						%
					end;%
					%
				end;% if time is already in signal
				%
			end;% if the sample is at the end
			%
		end;% cycle on samples
		%
	end;% if there are samples in the signal
	%
	%
end % function

