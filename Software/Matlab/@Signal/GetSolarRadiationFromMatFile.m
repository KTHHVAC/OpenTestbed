function [ afValues, afTimes ] = GetSolarRadiationFromMatFile(							...
													tSignal ,							...
													strPathSolarRadiationConverter,		...
													strPathExpectedCloudCover )
	% starting from the current data a randomic pattern for the Occupancy
	% for the next requested hours
	%
	afValues							= []; 
	afTimes								= [];
	%
	try %
		%
		iNumberOfHourlyNeededSamples = mod( tSignal.iSignalID , 100);
		%
		fCurrentJulianDate			= Time.GetCurrentJulianDate();
		%
		afTimes = [			fCurrentJulianDate	...+ Time.GetJulianHour()									...
						:	Time.GetJulianHour()														...
						:	fCurrentJulianDate + Time.GetJulianHour() * iNumberOfHourlyNeededSamples	];
		%
% 		% parameters for the solar radiation
% 		[	fLatitudeInDegrees,							...
% 			fLongitudeInDegrees,						...
% 			fTimeZoneInHours	] =						...
% 				PhysicalModels.GetStockholmCoordinates();
% 		%
% 		tSolarRadiation = Scenarios.SkyCoverToRadiationConverter(	...
% 											fLatitudeInDegrees,		...
% 											fLongitudeInDegrees,	...
% 											fTimeZoneInHours		);
		load(strPathSolarRadiationConverter);
		%							
		tMaximalSolarRadiationForecast	= tConverter.GetMaximalRadiationSignal( afTimes );
		%
		afMaximalRadiations				= tMaximalSolarRadiationForecast.afValues;
		%
		load(strPathExpectedCloudCover);
		afSkyCovers					= ones( size(afMaximalRadiations) ) * fExpectedCloudCover;
		%
		afValues = tConverter.Convert(					...
									afSkyCovers,		...
									afMaximalRadiations	);
		%
		%
		%
	catch exception
		%
		disp(exception.message);
		warning('Error in the loading of the forecasted solar radiation from the mat file');
		%
	end;% end catch
	%
end % end function
			