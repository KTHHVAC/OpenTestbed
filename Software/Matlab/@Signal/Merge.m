% assumption: the original signals have the same sampling times
%
% NOTE: the merged signal will appear to be with the same description etc.
%       of the first signal passed
%
function tMergedSignal = Merge( atOriginalSignals, fSmoothingParameter )
	%
	% check for how many parameters have been passed
	if( nargin == 1 )
		%
		fSmoothingParameter = 2 * mean( diff(atOriginalSignals(1).afTimes) );
		%
	end;%
	%
	% initialization
	tMergedSignal = atOriginalSignals(1).Copy();
	%
	% check for trivial cases
	if( numel(atOriginalSignals) == 1 )
		%
		return;
		%
	end;%
	%
	% check for inconsistencies in the domains
	for iSignal = 2:numel( atOriginalSignals );
		%
		if( sum( atOriginalSignals(1).afTimes ~= atOriginalSignals(iSignal).afTimes ) > 0 )
			%
			warning('The function Merge() requires the original signals to have the same time domains');
			return;
			%
		end;%
		%
	end;%
	%
	% in this case we can actually do the merge
	%
	% storage allocation
	afWeights 		= zeros( numel(atOriginalSignals), 1 );
	afValues  		= zeros( numel(atOriginalSignals), 1 ); 
	afInaccuracies  = zeros( numel(atOriginalSignals), 1 ); 
	%
	for iSample = 1:numel( tMergedSignal.afValues );
		%
		for iSignal = 1:numel(atOriginalSignals)
			%
			afWeights(iSignal)		= fSmoothingParameter / ( fSmoothingParameter + atOriginalSignals(iSignal).afInaccuracies(iSample) );
			afValues(iSignal)		= atOriginalSignals(iSignal).afValues(iSample);
			afInaccuracies(iSignal)	= atOriginalSignals(iSignal).afInaccuracies(iSample);
			%
		end;%
		%
		% normalization
		afWeights = afWeights ./ sum( afWeights );
		%
		tMergedSignal.afValues(iSample) = afWeights' * afValues;
		%
		tMergedSignal.afInaccuracies(iSample) = min( afInaccuracies );
		%
	end;%
	%
end %

