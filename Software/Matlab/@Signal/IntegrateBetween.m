% by default, strTimeUnit is 'JulianDates'
%
% the integration is trapezoidal
%
function fIntegratedValue = IntegrateBetween( tSignal, fInitialJulianDate, fFinalJulianDate, strTimeUnit )
	%
	% get the initial sample
	[ fInitialValue, fInitialInaccuracy ] = tSignal.ExtractSamplesAt( fInitialJulianDate );
	%
	% get the samples in between
	[ afTimes, afValues, afInaccuracies ] = tSignal.GetSamplesBetween( fInitialJulianDate, fFinalJulianDate );
	%
	% get the final sample
	[ fFinalValue, fFinalInaccuracy ] = tSignal.ExtractSamplesAt( fFinalJulianDate );
	%
	% stack the samples all together
	afTimes			= [ fInitialJulianDate;	afTimes;		fFinalJulianDate	];
	afValues		= [ fInitialValue;		afValues;		fFinalValue			];
	afInaccuracies	= [ fInitialInaccuracy;	afInaccuracies;	fFinalInaccuracy	];
	%
	% compute the integral: initialization
	fIntegratedValueInJulianDates = 0;
	%
	% compute the integral: cycle on the samples
	for iSampleIndex = 1:numel( afTimes ) - 1;
		%
		fIntegratedValueInJulianDates =												...
				fIntegratedValueInJulianDates										...
			+	(																	...
						( afValues(iSampleIndex + 1) + afValues(iSampleIndex) )		...
					*	( afTimes(iSampleIndex + 1) - afTimes(iSampleIndex) )		...
					/	2															...
				);
		%
	end;% cycle on the samples
	%
	% in case, change the time units
	switch( nargin )
		%
		% by default do nothing
		case 3
			fConversionFactor = 1;
		%
		% if somebody passes a string then first compute the 
		case 4
			%
			switch( strTimeUnit )
				%
				case 'JulianDates'
					fConversionFactor = 1;
				%
				case 'Hours'
					fConversionFactor = Time.GetJulianHour();
				%
				case 'Minutes'
					fConversionFactor = Time.GetJulianMinute();
				%
				case 'Seconds'
					fConversionFactor = Time.GetJulianSecond();
				%
				otherwise
					fConversionFactor = 1;
					warning('inconsistent strTimeUnits, returning as it was chosen to use strJulianDates');
				%
			end;% switch on the string describing the time units
		%
		otherwise
			warning('inconsistent number of arguments, returning as it was chosen to use strJulianDates');
		%
	end;% switch on the number of arguments
	%
	% do the conversion
	fIntegratedValue = fIntegratedValueInJulianDates / fConversionFactor;
	%
end % function

