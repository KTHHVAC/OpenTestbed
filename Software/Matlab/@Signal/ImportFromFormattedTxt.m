% remember: the ExportToFormattedTxt performs the following:
%
% 		fprintf(	fid,																	...
% 					'%d %d %.4f %s %.4f %.4f %.4f\n ',										...
% 					tSignal.iDeviceID,														...
% 					tSignal.iSignalID,														...
% 					tSignal.afValues(iSample),												...
% 					Time.JulianDateToString_YYMMDDHHMMSS( tSignal.afTimes(iSample) ){1},	...
% 					tSignal.afX(1),															...
% 					tSignal.afY(1),															...
% 					tSignal.afZ(1)															);
%
function tSignal =							...
			ImportFromFormattedTxt(			...
				strFilename,				...
				bImportAsPiecewiseConstant	) % optional
	%
	% initialization
	tSignal = Signal();
	tSignal.bPrintDebugInformation = true;
	%
	try %
		%
		switch( nargin )
			%
			case 1
				bImportAsPiecewiseConstant = false;
			%
			case 2
				% do nothing
			%
			otherwise
				error('wrong number of inputs!');
			%
		end;%
		%
		%
		tFileID = fopen( strFilename, 'r' );
		acDataset = textscan( tFileID, '%d %d %f %s %f %f %f' );
		%
		iDeviceID	= acDataset{1}(1);
		iSignalID	= acDataset{2}(1);
		afValues	= acDataset{3};
		fX			= acDataset{5}(1);
		fY			= acDataset{6}(1);
		fZ			= acDataset{7}(1);
		%
		afTimes		= [];
		for iSample = 1:numel( acDataset{4} )
			%
			afTimes(end + 1) = Time.StringToJulianDate_YYMMDDHHMMSS( acDataset{4}{iSample} );
			%
		end;%
		%
		% fill the meaningful information
		tSignal.Set( iDeviceID, iSignalID, afValues, afTimes, fX, fY, fZ );
		%
		% in case one needs to insert as piecewise constant, then re-insert the things
		if( bImportAsPiecewiseConstant )
			%
			tSignal.Clear();
			%
			for iSample = 1:numel(afValues)
				%
				tSignal.InsertAsPiecewiseConstant( afValues(iSample), afTimes(iSample) );
				%
			end;%
			%
		end;%
		%
	catch exception
		%
		disp(exception.message);
		warning('Error in importing a signal from a formatted text');
		%
	end;% end catch
	%
end %

