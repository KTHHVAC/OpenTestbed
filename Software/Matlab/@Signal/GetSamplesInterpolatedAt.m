% finds the NaNs and interpolates them
%
function [	afInterpolatedValues,				...
			afInterpolatedInaccuracies	] =		...
		   		GetSamplesInterpolatedAt(		...
					tSignal,					...
					afJulianDates				)
	%
	% storage allocation
	afInterpolatedValues 		= zeros( size( afJulianDates ) );
	afInterpolatedInaccuracies 	= zeros( size( afJulianDates ) );
	%
	%
	% cycle on the samples
	for iSample = 1:numel( afJulianDates );
		%
		% case where the signal starts too late
		if( tSignal.afTimes(1) >= afJulianDates(iSample) )
			%
			afInterpolatedValues(iSample) 		= tSignal.afValues(1);
			afInterpolatedInaccuracies(iSample) = abs(tSignal.afTimes(1) - afJulianDates(iSample));
			%
		% case where the signal ends too early
		elseif( tSignal.afTimes(end) <= afJulianDates(iSample) )
			%
			afInterpolatedValues(iSample) 		= tSignal.afValues(end);
			afInterpolatedInaccuracies(iSample) = abs(tSignal.afTimes(end) - afJulianDates(iSample));
			%
		% case where the interpolation occurs
		else%
			%
			%
			iLeftSample 	= find( tSignal.afTimes < afJulianDates(iSample), 1, 'last' );
			iRightSample 	= find( tSignal.afTimes > afJulianDates(iSample), 1, 'first' );
			%
			% sanity check: they should be consequent
			if( iLeftSample ~= iRightSample - 1 )
				%
				warning('there is something wrong in the interpolation of signals, probably the interpolation algorithm has a bug');
				%
			end;%
			%
			% interpolate with linear interpolation
			%                    f(x_2) - f(x_1)
			% f(x_i) = f(x_1) + ----------------- * (x_i - x_1)
			%                       x_2 - x_1
			%
			afInterpolatedValues(iSample) =					...
				tSignal.afValues(iLeftSample)				...
				+											...
				(											...
					(										...
						tSignal.afValues(iRightSample)		...
						-									...
						tSignal.afValues(iLeftSample)		...
					)										...
					/										...
					(										...
						tSignal.afTimes(iRightSample)		...
						-									...
						tSignal.afTimes(iLeftSample)		...
					)										...
				)											...
				*											...
				(											...
					afJulianDates(iSample)					...
					-										...
					tSignal.afTimes(iLeftSample)			...
				);
			%
			afInterpolatedInaccuracies(iSample) =						...
				min(	abs(		afJulianDates(iSample)				...
								-	tSignal.afTimes(iRightSample) ),	...
						abs(		afJulianDates(iSample)				...
								-	tSignal.afTimes(iLeftSample) ) );
			%
			% DEBUG
%			fprintf('interpolated sample %d, put to %.5f\n', iInterpolationSample, afInterpolatedValues(iInterpolationSample));
			%
		end;% switch on the various cases
		%
	end;% sample
	%
end % function
