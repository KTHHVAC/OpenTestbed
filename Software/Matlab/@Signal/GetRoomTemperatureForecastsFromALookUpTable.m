% function [ afValues, afTimes ] = GetRoomTemperatureForecastsFromALookUpTable( tSignal )
% taking the room temperature forecasts of a certain room from a desired
% lookup table
%
function [ afValues, afTimes ] = GetRoomTemperatureForecastsFromALookUpTable( tSignal )
	%
	%
	try %
		%
		%
		tDevicesIDs						= Signal.GetDevicesIDs();
		iNumberOfHourlyNeededSamples	= mod( tSignal.iSignalID , 100); 
		iHourlyResolution				= 4;
		%
		%
		afValues	=	[];
		afTimes		=	[		Time.GetCurrentJulianDate()	+ 1/iHourlyResolution * Time.GetJulianHour()			...
							:	1/iHourlyResolution * Time.GetJulianHour()											...
							:	Time.GetCurrentJulianDate() + Time.GetJulianHour() * iNumberOfHourlyNeededSamples	];
		%
		%------------------------------------------------------------------
		% loading the various mean values switching the possible cases 
		% (the values that are written here can be changed but these are
		% mean values referred to a precise dataset studied)
		%
		switch tSignal.iDeviceID
			%
			case tDevicesIDs.iLocalLookUpTableRoomA231Forecast
				%
				fTemperatureMeanValues = 21.17;
				%
			case tDevicesIDs.iLocalLookUpTableRoomA221Forecast
				%
				fTemperatureMeanValues = 20.39;
				%
			case tDevicesIDs.iLocalLookUpTableCorridorForecast
				%
				fTemperatureMeanValues = 22.95;
				%
			case tDevicesIDs.iLocalLookUpTableCeilingForecast
				%
				fTemperatureMeanValues = 22.21;
				%
			otherwise
				%
				fTemperatureMeanValues = 20.5;
				warning('This forecast is not available or the requested Device ID is incorrect. Set randomly to 20.5');
				%
				%
		end;% end switch cases
		%
		%
		%------------------------------------------------------------------
		% building the sinusoidal signals
		%
		%
		afX					= 0 : 1/iHourlyResolution : 72;
		afTemperatureValues = fTemperatureMeanValues - cos( 8*pi / (24*iHourlyResolution) .* afX);
		%
		% end of the cycle to get the 2 days pattern of the temperatures
		%
		%
		%------------------------------------------------------------------
		% getting the correct vector of predictions
		%
		iCurrentHour		= Time.JulianDateToHour( afTimes(1) );
		iHourIndex			= find( afX == iCurrentHour );
		%
		for iTimeSample = 1 : numel(afTimes)
			%
			afValues( iTimeSample )	= afTemperatureValues( iHourIndex + 1);
			iHourIndex				= iHourIndex + 1;
			%
		end;% end 
		%
		%
	catch exception
		%
		disp(exception.message);
		warning('Error calculating some forecasts of one of the adjacent rooms');
		%
	end;% end catch
	%
	%
end % end function
