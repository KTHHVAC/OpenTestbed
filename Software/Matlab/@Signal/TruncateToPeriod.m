function TruncateToPeriod( tSignal, fInitialJulianDate, fFinalJulianDate )
	%
	% DEBUG
	if( tSignal.bPrintDebugInformation )
		%
		fprintf('truncation to period of signal %s:\n', tSignal.strDescription);
		fprintf('requested starting time: %s\n', Time.JulianDateToString( fInitialJulianDate ){1});
		fprintf('requested ending time:   %s\n', Time.JulianDateToString( fFinalJulianDate ){1});
		fprintf('initial starting time:   %s\n', Time.JulianDateToString( tSignal.afTimes(1) ){1});
		fprintf('initial ending time:     %s\n', Time.JulianDateToString( tSignal.afTimes(end) ){1});
		%
	end;%
	%
	% if there is an inconsistencies between the initial and final julian date then return
	if( fInitialJulianDate > fFinalJulianDate )
		%
		tSignal.Reset();
		%
		% DEBUG
		if( tSignal.bPrintDebugInformation )
			%
			warning('the initial and final julian dates are inconsistent -- I am resetting the considered signal!!\n');
			%
		end;%
		%
		return;
		%
	end;%
	%
	% for readability
	iFirstSample			= find( tSignal.afTimes > fInitialJulianDate, 1, 'first' );
	iLastSample				= find( tSignal.afTimes < fFinalJulianDate, 1, 'last' );
	%
	% truncate the signal
	tSignal.afValues		= tSignal.afValues(iFirstSample:iLastSample);
	tSignal.afTimes			= tSignal.afTimes(iFirstSample:iLastSample);
	tSignal.afInaccuracies	= tSignal.afInaccuracies(iFirstSample:iLastSample);
	%
	% DEBUG
	if( tSignal.bPrintDebugInformation )
		%
		if( numel( tSignal.afTimes ) > 0 )
			%
			fprintf('final starting time:    %s\n', Time.JulianDateToString( tSignal.afTimes(1) ){1});
			fprintf('final ending time:      %s\n', Time.JulianDateToString( tSignal.afTimes(end) ){1});
			%
		else%
			%
			warning('the truncation led to a reset of the considered signal!!\n');
			%
		end;%
		%
	end;%
	%
end % function

