% inputs:
%
% output:
%
function	tHVACPowerSignal =							...
				ComputeHVACPowerFromSignals(			...
					atRoomTemperatureSignals,			...
					tRadiatorsValveOpeningSignal,		...
					tAirInletTemperatureSignal,			...
					tAirConditioningTemperatureSignal,	...
					tAirInletValveOpeningSignal,		...
					tMainVentilationFanOpeningSignal	)
	%
	% TODO fix the opening percentage
	if( nargin == 5 )
		%
		tMainVentilationFanOpeningSignal = tAirInletValveOpeningSignal.Copy();
		tMainVentilationFanOpeningSignal.afValues = ones( size(tMainVentilationFanOpeningSignal.afValues) );
		%
	end;%
	%
	% Constants
	AIR_SPECIFIC_HEAT_CAPACITY			= 1007	; % [J/kgK]
	AIR_DENSITY							= 1.2	; % [kg/m3]
	RADIATORS_AREA						= 10	; % [m2]
	RADIATORS_CONVECTION_COEFFICIENT	= 8		; % [W/m2K]
	INTERNAL_GAINS_PER_PERS				= 170	; % [W/pers]
	HEAT_PRODUCED_PER_LUX				= 0.195 ; % Heat loss in the fluorescent lamps/ballasts per lux, artificial light, [W/lux]
	SECONDS_PER_HOUR					= 3600  ; % [s/h]
	SETPOINT_HEATING_TEMPERATURE		= 23	; % Setpoint temperature for heating, [deg C]
	SAMPLING_TIME_IN_SECONDS			= 60    ;
	%
	% compute the total mass flow
	tTotalMassFlow				= tAirInletValveOpeningSignal * ( tMainVentilationFanOpeningSignal ~= 0 );
	tTotalMassFlow.afValues		= Controller.Controller.VentingPercentageToMassFlowLinearCase( tTotalMassFlow.afValues , 'T' );
	%
	% room temperatures averaging
	tAverageRoomTemperature = atRoomTemperatureSignals(1).Copy();
	%
	for iRoomTemperatureSignal = 2:numel(atRoomTemperatureSignals);
		%
		tAverageRoomTemperature = tAverageRoomTemperature + atRoomTemperatureSignals(iRoomTemperatureSignal);
		%
	end;%
	%
	tAverageRoomTemperature = tAverageRoomTemperature / numel(atRoomTemperatureSignals);
	%
	% compute the mixed air inlet temperature
	tMixedAirTemperature = Converter.GetMixedTemperatureSignal( tAirInletTemperatureSignal, tAirConditioningTemperatureSignal );
	%
	% compute the power
	tHVACPowerSignal = ( tTotalMassFlow * ( tAverageRoomTemperature - tMixedAirTemperature ) ) * AIR_SPECIFIC_HEAT_CAPACITY;
	%
	tSignalsIDs	= Signal.GetSignalsIDs();
	tDevicesIDs	= Signal.GetDevicesIDs();	
	%
	% set the signal ID
	tHVACPowerSignal.Set( tDevicesIDs.iUserDefinedDevice, tSignalsIDs.iEstimatedPowerConsumption );
	%
end % function

