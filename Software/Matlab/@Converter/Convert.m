%  This function gets the following information:
%
%  1 - downloaded dataset from website
%  2 - The desired sampling time
%  3 - The file name, into which the user wants to save the obtained
%  information
%
%  The output is an array of all different available signals, where each signal
%  has the following fields:
%  1 - The signal value
%  2 - The corresponding sampling time
%  3 - The signal description
%  4 - The corresponding signal's room label
%  5 - The corresponding signal's room ID, that can be used to easily access all
%      the signals corresponding to a specific room
% 
% 
% 
function tDataset = Convert(	astrDatabasesFilenames,						...
								fSamplingPeriodInSeconds,					...
								strConvertedDatabaseFilename,				... optional
								aaiListOfSignalsAndDevicesToBeDiscarded,	... optional
								bConvertInInteractiveMode					) % optional
	%
	% 					
	% load some necessary information
	DEVICE_ID_COLUMN	= 1;
	SIGNAL_ID_COLUMN	= 2;
	VALUE_COLUMN		= 3;
	TIME_COLUMN			= 4;
	X_POSITION_COLUMN	= 5;
	Y_POSITION_COLUMN	= 6;
	Z_POSITION_COLUMN	= 7;
	%
	% sanity check
	if( numel(astrDatabasesFilenames) == 0 )
		%
		warning('You requested to convert no files, returning');
		tDataset = [];
		return;
		%
	end;%
	%
	% checks if the user wants to discard some devices
	if( nargin < 3 )
		%
		bSaveTheConvertedDataset = false;
		%
	else%
		%
		bSaveTheConvertedDataset = true;
		%
	end;%
	%
	% checks if the user wants to discard some devices
	if( nargin < 4 )
		%
		aaiListOfSignalsAndDevicesToBeDiscarded = [-1 -1];
		%
	end;%
	%
	% check if the user wants to perform the conversion interactively
	if( nargin < 5 )
		%
		bConvertInInteractiveMode = false;
		%
	end;%
	%
	%
	% check if there are signals or devices to be completely discarded
	[ aiListOfSignalsToBeCompletelyDiscarded, aiListOfDevicesToBeCompletelyDiscarded ] =	...
		GetListsOfSignalsAndDevicesToBeDiscarded( aaiListOfSignalsAndDevicesToBeDiscarded );			
	%
	% if there are no devices to be removed, add some fake ones (makes the code
	% simpler)
	if( numel(aaiListOfSignalsAndDevicesToBeDiscarded) == 0 )
		%
		aaiListOfSignalsAndDevicesToBeDiscarded = [-1 -1];
		%
	end;%
	%
	% load the downloaded *.txt file from website to the Matlab
	aafDataset = [];
	for iDatabase = 1:numel(astrDatabasesFilenames)
		%
		fprintf('Loading the .txt file number %d...', iDatabase);
		aafDataset = [aafDataset ; load( astrDatabasesFilenames{iDatabase} )]; %#ok<AGROW>
		fprintf('finished.\n');
		%
	end;%
	%
	% Find the list of signals present in the database
	aiListOfSignalsIDs = sort( unique( aafDataset(:, SIGNAL_ID_COLUMN) ) );
	%
	fprintf('list of signals loaded:\n')
	disp(aiListOfSignalsIDs)
	%
	% Count the number of diferent available signals in the Dataset	
	iNumberOfDifferentSignals = 0;
	%
	for iSignal = 1:numel(aiListOfSignalsIDs)
		%
		% for readability - select the part of the database related to just this signal
		iSignalID = aiListOfSignalsIDs(iSignal);
		%
		% skip the signal if requested
		if( sum( iSignalID == aiListOfSignalsToBeCompletelyDiscarded ) ~= 0 )
			%
			% here it means that the signal should be discarded
			%
		else%
			%
			aafSelectedDataset = aafDataset( aafDataset(:, SIGNAL_ID_COLUMN) == iSignalID, : );
			%
			% find the list of devices that produced this signal
			aiListOfDevicesID = sort( unique( aafSelectedDataset(:, DEVICE_ID_COLUMN) ) ); % is sufficient unique
			%
			% check if there are devices to be removed
			if( sum( iSignalID == aaiListOfSignalsAndDevicesToBeDiscarded(:, 1) ) > 0 )
				%
				aiIndexesOfDevicesToBeDiscarded = ...
					( iSignalID == aaiListOfSignalsAndDevicesToBeDiscarded(:, 1) );
				%
				aiListOfDevicesToBeRemoved = ...
					aaiListOfSignalsAndDevicesToBeDiscarded( aiIndexesOfDevicesToBeDiscarded, 2);
				%
				aiListOfDevicesID = setdiff( aiListOfDevicesID, aiListOfDevicesToBeRemoved );
				%
			end;%
			%
			% the following are instead devices to be always removed 
			aiListOfDevicesID = setdiff( aiListOfDevicesID, aiListOfDevicesToBeCompletelyDiscarded );
			%
			iNumberOfDifferentSignals = iNumberOfDifferentSignals + numel(aiListOfDevicesID);
			%
		end;% skip the signal
		%
	end;% cycle on the signals
	%
	%
	%
	% storage allocation -- those are empty signals
	atSignals = Signal( iNumberOfDifferentSignals );
	%
	%
	%
	fprintf('Preprocessing %d signals:', iNumberOfDifferentSignals);
	%
	% Read the properties of each signal and save them
	iSignalCounter = 1;
	for iSignal = 1:numel(aiListOfSignalsIDs)
		%
		% for readability - select the part of the database related to just this signal
		iSignalID = aiListOfSignalsIDs(iSignal);
		%
		% skip the signal if requested
		if( sum( iSignalID == aiListOfSignalsToBeCompletelyDiscarded ) == 0 )
			%
			aafSelectedDataset = aafDataset( aafDataset(:, SIGNAL_ID_COLUMN) == iSignalID, : );
			%
			% find the list of devices that produced this signal
			aiListOfDevicesID = sort( unique( aafSelectedDataset(:, DEVICE_ID_COLUMN) ) ); % is sufficient unique
			%
			% check if there are devices to be removed
			if( sum( iSignalID == aaiListOfSignalsAndDevicesToBeDiscarded(:, 1) ) > 0 )
				%
				aiIndexesOfDevicesToBeDiscarded = ...
					( iSignalID == aaiListOfSignalsAndDevicesToBeDiscarded(:, 1) );
				%
				aiListOfDevicesToBeRemoved = ...
					aaiListOfSignalsAndDevicesToBeDiscarded( aiIndexesOfDevicesToBeDiscarded, 2);
				%
				aiListOfDevicesID = setdiff( aiListOfDevicesID, aiListOfDevicesToBeRemoved );
				%
			end;%
			%
			% the following are instead devices to be always removed 
			aiListOfDevicesID = setdiff( aiListOfDevicesID, aiListOfDevicesToBeCompletelyDiscarded );
			%
			for iDevice = 1:numel(aiListOfDevicesID)
				%
				iDeviceID = aiListOfDevicesID( iDevice );
				%
				afValues	= aafSelectedDataset( aafSelectedDataset(:, DEVICE_ID_COLUMN) == aiListOfDevicesID(iDevice), VALUE_COLUMN );
				afTimes		= aafSelectedDataset( aafSelectedDataset(:, DEVICE_ID_COLUMN) == aiListOfDevicesID(iDevice), TIME_COLUMN  ); %needs to be converted
				afTimes		= Time.IntegerToJulianDate( afTimes );
				afX			= aafSelectedDataset( aafSelectedDataset(:, DEVICE_ID_COLUMN) == aiListOfDevicesID(iDevice), X_POSITION_COLUMN );
				afY			= aafSelectedDataset( aafSelectedDataset(:, DEVICE_ID_COLUMN) == aiListOfDevicesID(iDevice), Y_POSITION_COLUMN );
				afZ			= aafSelectedDataset( aafSelectedDataset(:, DEVICE_ID_COLUMN) == aiListOfDevicesID(iDevice), Z_POSITION_COLUMN );
				%
				% set the various properties, like fInvalidDataMarker and 
				atSignals(iSignalCounter).Set( iDeviceID, iSignalID, afValues, afTimes, afX, afY, afZ );
				atSignals(iSignalCounter).strDescription = atSignals(iSignalCounter).GetDescription (iSignalID, iDeviceID);
				%
				% if in interactive mode, ask the user if she likes the signal
				bAcceptThisSignal = true;
				if( bConvertInInteractiveMode )
					%
					cSelection = '';
					close all;
					while(		~strcmp( cSelection, 'd')	...
							&&	~strcmp( cSelection, 'D')	...
							&&	~strcmp( cSelection, 'n')	...
							&&	~strcmp( cSelection, 'N')	...
							&&	~strcmp( cSelection, 'a')	...
							&&	~strcmp( cSelection, 'A')	...
							&&	~strcmp( cSelection, 'y')	...
							&&	~strcmp( cSelection, 'Y')	)
						%
						atSignals(iSignalCounter).Plot();
						fprintf('Accept this signal?\n');
						fprintf('a | y = yes\n');
						fprintf('d | n = no\n');
						fprintf('i = interpolate invalid data and then re-ask\n');
						fprintf('b = display the values of the signal below a certain value and then re-ask\n');
						fprintf('r = display the values of the signal in a certain range and then re-ask\n');
						fprintf('any other, redraw\n');
						cSelection = input('>> ', 's');
						%
						if( strcmp(cSelection, 'b') || strcmp(cSelection, 'B' ) )
							%
							fLowerRange = input('insert the threshold: ');
							atSignals(iSignalCounter).afValues( atSignals(iSignalCounter).afValues < fLowerRange )
							%
						end;%
						%
						if( strcmp(cSelection, 'r') || strcmp(cSelection, 'R' ) )
							%
% 							fLowerRange = input('insert the lower bound of the range: ');
% 							fUpperRange = input('insert the upper bound of the range: ');
% 							abSatisfyingUpperRange = atSignals(iSignalCounter).afValues < fUpperRange;
% 							abSatisfyingLowerRange = atSignals(iSignalCounter).afValues > fLowerRange;
% 							abSatisfyingBothRanges = abSatisfyingUpperRange .* abSatisfyingUpperRange
% 							atSignals(iSignalCounter).afValues(abSatisfyingBothRanges)
							fprintf('TOFIX\n');
							%
						end;%
						%
						if( strcmp(cSelection, 'i') || strcmp(cSelection, 'I' ) )
							%
							atSignals(iSignalCounter).InterpolateInvalidData();
							%
						end;%
						%
					end;%
					%
					if( strcmp(cSelection, 'n') || strcmp(cSelection, 'N') || strcmp(cSelection, 'a') || strcmp(cSelection, 'A') )
						%
						bAcceptThisSignal = false;
						%
					end;%
				   	%
				end;%
				%
				if( bAcceptThisSignal )
					%
					iSignalCounter = iSignalCounter + 1;
					%
				end;%
				%
				fprintf('.');
				%
			end;%
			%
		end;% skip the signal
		%
	end;% cycle on the signals
	%
	fprintf('done.\n');
	%
	%
	% find the time span and define the sampling period
	[ fInitialJulianDate, fFinalJulianDate ]	= Signal.GetTimeSpan( atSignals );
	fSamplingPeriod								= fSamplingPeriodInSeconds * Time.GetJulianSecond();
	afSamplingTimesInJulianDates				= fInitialJulianDate:fSamplingPeriod:fFinalJulianDate;
	%
	%
	% initialization
	tDataset.afSignalsTimes					= afSamplingTimesInJulianDates;
	tDataset.aafSignalsValues				= [];
	tDataset.astrSignalsDescriptions		= [];
	tDataset.aafSignalsPositions			= [];
	tDataset.aafSignalsInaccuracies			= [];
	tDataset.aiSignalsIDs					= [];
	tDataset.aiDevicesIDs					= [];
	tDataset.aiSignalsRoomsIDs				= [];
	tDataset.astrSignalsRoomsDescriptions	= [];
	%
	%
	% process each signal independently and resampling
	fprintf('Resampling the signals:');
	for iSignal = 1:numel( atSignals );
		%
		if( atSignals(iSignal).IsActive() )
			%
			fprintf('Signal %d is active\n', atSignals(iSignal).iSignalID )
			%
			% copy the original signal
			tOriginalSignal = atSignals(iSignal).Copy();
			%
% 			% DEBUG
% 			tOriginalSignal.Plot()
% 			pause
			%
			% interpolate the invalid data
			tOriginalSignal.InterpolateInvalidData();
			%
			% DEBUG
% 			tOriginalSignal.Plot()
% 			pause
			%
			% resample it
			tResampledSignal = tOriginalSignal.ResampleAt( afSamplingTimesInJulianDates );
			%
			% DEBUG
% 			warning('debug plot in convert');
% 			tResampledSignal.Plot()
			%
			%
			if(		numel( atSignals(iSignal).afX ) == 0	...
				&&	numel( atSignals(iSignal).afY ) == 0	...
				&&	numel( atSignals(iSignal).afZ ) == 0	)
				%
				iRoomID = Converter.XYZToRoomID();
				afCurrentSignalPosition = [ -1 ; -1 ; -1 ];
				%
			else%
				%
				iRoomID = Converter.XYZToRoomID(					...
										atSignals(iSignal).afX(1),	...
										atSignals(iSignal).afY(1),	...
										atSignals(iSignal).afZ(1)	);
				afCurrentSignalPosition = [ atSignals(iSignal).afX(1) ; atSignals(iSignal).afY(1) ; atSignals(iSignal).afZ(1) ];
				%
			end;%
			%
			strSignalDescription	= Converter.RoomIDToDescription( iRoomID );
			%			
			tDataset.aafSignalsValues				= [ tDataset.aafSignalsValues,				tResampledSignal.afValues			];
			tDataset.astrSignalsDescriptions		= [ tDataset.astrSignalsDescriptions,		{tResampledSignal.strDescription}	];
			tDataset.aafSignalsPositions			= [	tDataset.aafSignalsPositions,			afCurrentSignalPosition				];
			tDataset.aafSignalsInaccuracies			= [	tDataset.aafSignalsInaccuracies,		tResampledSignal.afInaccuracies		];
			tDataset.astrSignalsRoomsDescriptions	= [	tDataset.astrSignalsRoomsDescriptions,	{strSignalDescription}				];
			tDataset.aiSignalsRoomsIDs				= [	tDataset.aiSignalsRoomsIDs,				iRoomID								];
			tDataset.aiSignalsIDs					= [ tDataset.aiSignalsIDs,					atSignals(iSignal).iSignalID		];
			tDataset.aiDevicesIDs					= [ tDataset.aiDevicesIDs,					atSignals(iSignal).iDeviceID		];
			%
			fprintf('.');
			%
		else
			%
			fprintf('Signal %d is not active\n', atSignals(iSignal).iSignalID )
			%
		end%
		%
	end;%
	%
	fprintf('done.\n\n');
	fprintf('summary: %d signals, %d samples per signal\n\n', size(tDataset.aafSignalsValues, 2), size(tDataset.aafSignalsValues, 1) );
	%
	% save the Dataset
	if( bSaveTheConvertedDataset )
		%
		save( strConvertedDatabaseFilename,	'tDataset' );
		%
	end;%
	%
	%
end % function




function [ aiListOfSignalsToBeDiscarded, aiListOfDevicesToBeDiscarded ] =	...
			GetListsOfSignalsAndDevicesToBeDiscarded( aaiListOfSignalsAndDevicesToBeDiscarded )
	%
	% return -1 if there is nothing to discard
	if( numel(aaiListOfSignalsAndDevicesToBeDiscarded) == 0 )
		%
		aiListOfSignalsToBeDiscarded = -1;
		aiListOfDevicesToBeDiscarded = -1;
		%
	else%
		%
		% initialization
		aiListOfSignalsToBeDiscarded = [];
		aiListOfDevicesToBeDiscarded = [];
		%
		% check for the signals
		for iSignal = 1:numel( aaiListOfSignalsAndDevicesToBeDiscarded( :, 1) );
			%
			% if the current row has a -1 in the device ID then this signal should be
			% discarded
			if( aaiListOfSignalsAndDevicesToBeDiscarded( iSignal, 2 ) == -1 )
				%
				aiListOfSignalsToBeDiscarded =									...
					[	aiListOfSignalsToBeDiscarded,							...
						aaiListOfSignalsAndDevicesToBeDiscarded( iSignal, 1 )	];
				%
			end;%
			%
		end;% check for the signals
		%
		% check for the devices
		for iDevice = 1:numel( aaiListOfSignalsAndDevicesToBeDiscarded( :, 2) );
			%
			% if the current row has a -1 in the signal ID then this device should be
			% discarded
			if( aaiListOfSignalsAndDevicesToBeDiscarded( iDevice, 1 ) == -1 )
				%
				aiListOfDevicesToBeDiscarded =									...
					[	aiListOfDevicesToBeDiscarded,							...
						aaiListOfSignalsAndDevicesToBeDiscarded( iDevice, 2 )	];
				%
			end;%
			%
		end;% check for the devices
		%
	end;%
	%
end % function

