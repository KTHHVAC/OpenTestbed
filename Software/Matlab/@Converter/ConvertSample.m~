function ConvertSample(	tRoom,				...
iDevicesIDs
						iSignalID,			...
iDevicesIDs
						iDeviceID,			...
iDevicesIDs
						fValue,				...
iDevicesIDs
						fTime				)
iDevicesIDs
	%
iDevicesIDs
	iSignalIndex = tRoom.GetSignalIndex( iSignalID, iDeviceID );
iDevicesIDs
	%
iDevicesIDs
	if(  numel( tRoom.atSignals ) < iSignalIndex  )
iDevicesIDs
		%
iDevicesIDs
		% to prevent the constructor to erase the previously allocated objects
iDevicesIDs
		% we save them in a temporary array that we restore later on
iDevicesIDs
		if( iSignalIndex > 1 )
iDevicesIDs
			%
iDevicesIDs
			atTemporarySignals = tRoom.atSignals;
iDevicesIDs
			%
iDevicesIDs
		end;%
iDevicesIDs
		%
iDevicesIDs
		tRoom.atSignals = Signal(iSignalIndex);
iDevicesIDs
		%
iDevicesIDs
		% set the information relative to the current signal
iDevicesIDs
		tRoom.atSignals(iSignalIndex).strDescription = ...
iDevicesIDs
			Signal.GetDescription( iSignalID, iDeviceID );
iDevicesIDs
		%
iDevicesIDs
		% restore the previous signals
iDevicesIDs
		if( iSignalIndex > 1 )
iDevicesIDs
			%
iDevicesIDs
			tRoom.atSignals(1:iSignalIndex-1) = atTemporarySignals;
iDevicesIDs
			%
iDevicesIDs
		end;%
iDevicesIDs
		%
iDevicesIDs
		% save the information about the current signal
iDevicesIDs
		tRoom.atSignals(iSignalIndex).iSignalID	= iSignalID;
iDevicesIDs
		tRoom.atSignals(iSignalIndex).iDeviceID = iDeviceID;
iDevicesIDs
		%
iDevicesIDs
		tRoom.atSignals(iSignalIndex).SetInvalidDataMarker();
iDevicesIDs
		%
iDevicesIDs
	end;%
iDevicesIDs
	%
iDevicesIDs
	tRoom.atSignals(iSignalIndex).Insert( fValue, fTime, false );
iDevicesIDs
	%
iDevicesIDs
	% DEBUG
iDevicesIDs
% 	fprintf('ConvertSample(): number of signals at end of method: %d\n', numel( tRoom.atSignals ));
iDevicesIDs
	%
iDevicesIDs
end %
iDevicesIDs
