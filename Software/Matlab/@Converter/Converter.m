classdef Converter
	%
	%
	% ---------------------------------------------------------------------
	properties
		%
		%
	end %
	%
	%
	% ---------------------------------------------------------------------
	methods
		%
		% standard constructor
		function tConverter = Converter()
			%
			%
		end % standard constructor
		%
	end %
	%
	%
	%
	% ---------------------------------------------------------------------
	methods(Static = true)
		%
		% main methods
		tDataset = Convert(	astrDatabaseFilenames,						...
							fSamplingPeriodInSeconds,					...
							strConvertedDatabaseFilename,				...
							aaiListOfSignalsAndDevicesToBeDiscarded,	...
							bConvertInInteractiveMode					);
		%
		[	tTrainingSet,						...
			tTestSet		] =					...
				DivideInTrainingAndTestSets(	...
					tDataset,					...
					iNumberOfTrainingSamples	);
		%
		[	afSamplingTimesInJulianDates,			...
			aafInputs,								...
			astrInputsDescriptions,					...
			aafOutputs,								...
			astrOutputsDescriptions ] =				...
				ConvertIntoInputsAndOutputs(		...
					strDatabaseFilename,			...
					fSamplingPeriodInSeconds,		...
					strConvertedDatabaseFilename 	);
		%
		SubstituteCommasWithDots( strFile );
		%
		% auxiliary methods
		tRoomsIDs			= GetRoomsIDs();
		%
		tDataset			= Import( strFile );
		%
		afValues			= Cells2Values( acDataset );
		afJulianDates		= Cells2JulianDates( acDataset );
		aiRooms				= Cells2Rooms( acDataset );
		[aiSignals,				... kind of signal
		 aiSignalsIndexes	] =	... signal index (to account for multiple different signals on the same room)
			Cells2Signals( acSources, acDevices, acSignals );
		%
		ConvertSample(	tRoom,			...
						iSignal,		...
						iSignalIndex,	...
						fValue,			...
						fTime			);
		%
		PlotSignals( tDataset, aiToBePlottedSignalsIDs );
		%
		tRoomsCoordinates	= GetRoomsCoordinates();
		iRoomID				= XYZToRoomID( fX, fY, fZ );
		strRoomDescription	= RoomIDToDescription( iRoomID );
		%
		tNewDataset			= SelectRooms( tDataset, aiListOfRoomsIDs );
		tNewDataset			= SelectDates( tDataset, fInitialJulianDate, fFinalJulianDate );
		%
		tSignal				= GetSignal( tDataset, iSignalID, iDeviceID );
		tMergedSignal		= MergeSignals( tDataset, aaiSignalsIDsDevicesIDsCouples );
		%
		afErrors			= GetForecastErrors(	tDataset,					...
													iTrueSignalID,				...
													iTrueDeviceID,				...
													iForecastSignalID,			...
													iForecastDeviceID,			...
													fForecastHorizonInSeconds	);
		%
		tHVACPowerSignal	= ComputeHVACPowerFromSignals(	atRoomTemperatureSignals,			...
															tRadiatorsValveOpeningSignal,		...
															tAirInletTemperatureSignal,			...
															tAirConditioningTemperatureSignal,	...
															tAirInletValveOpeningSignal,		...
															tMainVentilationFanOpeningSignal	);
	   	%
		tMixedAirTemperature = GetMixedTemperatureSignal( tAirInletTemperatureSignal, tAirConditioningTemperatureSignal );
		%
	end	%
	%
	%
end % classdef

