% ALGORITHM
%
% - load the manual events
% - load the events from the raw dataset
% - if there is matching between the number of events then associate them,
%   otherwise raise an error
%
function LoadDatasets( tSVMTrainer, strDatasetFromWebsite, strManualDataset )
	%
	%
	%
	% -----------------------------------------------------------------------------------
	% load the manual dataset
	[	aiManualEventsClasses,		...
		afManualEventsJulianDates,	...
		astrManualEventsNotes	] =	...
			tSVMTrainer.LoadManualDataset( strManualDataset );
	%
	iNumberOfManualEvents = numel(afManualEventsJulianDates);
	%
	%
	% -----------------------------------------------------------------------------------
	% load the dataset from raw data
	fprintf('Starting loading the raw dataset...\n');
	%
	aafRawData			= load(strDatasetFromWebsite);
	atOccupancyEvents	= PeopleCounters.TransformRawDataIntoEvents( aafRawData );
	%
	iNumberOfEventsFromRawData = numel(atOccupancyEvents);
	%
	%
	% DEBUG
	fprintf('\n\n**********************************************************\nLoaded the following %d manual events:\n', ...
			iNumberOfManualEvents);
	for iEvent = 1:iNumberOfManualEvents;
		fprintf('%d\t%s\n', aiManualEventsClasses(iEvent), Time.JulianDateToString(afManualEventsJulianDates(iEvent)){1} );
	end;%
	fprintf('\n\n**********************************************************\nLoaded the following %d raw data events (note: they still do not have associated classes):\n',	...
			iNumberOfManualEvents);
	for iEvent = 1:iNumberOfEventsFromRawData;
		fprintf('%s\n', Time.JulianDateToString(atOccupancyEvents(iEvent).fJulianDate){1} );
	end;%
	fprintf('\n\n**********************************************************\nStarting the association process:\n');
	%
	%
	%
	% -----------------------------------------------------------------------------------
	% compute the distances between each raw / measured events couple (rows = raw) 
	aafRawToMeasuredEventsDistancesInSeconds = zeros( iNumberOfEventsFromRawData, iNumberOfManualEvents );
	%
	for iRawEvent		= 1:iNumberOfEventsFromRawData;
	for iManualEvent	= 1:iNumberOfManualEvents;
		%
		aafRawToMeasuredEventsDistancesInSeconds(iRawEvent, iManualEvent) =											...
			min(		abs( atOccupancyEvents(iRawEvent).fJulianDate - afManualEventsJulianDates(iManualEvent) )	...
					/	Time.GetJulianSecond(),																		...
					999 );
		%
	end;%
	end;%
	%
	% before assigning the manual measurements we set every raw event as an invalid one
	for iRawEvent = 1:iNumberOfEventsFromRawData;
		%
		% by default, the event is invalid
		atOccupancyEvents(iRawEvent).bIsValid = false;
		%
	end;%
	%
	% now we associate every manual measurement to the corresponding (if existing)
	% raw one
	for iMeasuredEvent = 1:iNumberOfManualEvents;
		%
		% check who is the raw event closer in time
		[ fTimeDistance, iRawEvent ] = 	...
			min( aafRawToMeasuredEventsDistancesInSeconds(:, iMeasuredEvent) );
		%
		% if the time is too big for everything then discard the measured event, otherwise
		% do the association
		if( fTimeDistance < 15 )
			%
			% before doing the association check if the raw event has been asked to be discarded
			if( abs(aiManualEventsClasses(iMeasuredEvent)) < tSVMTrainer.iThresholdForDiscardingEventsClass )
				%
				atOccupancyEvents(iRawEvent).bIsValid		= true;
				atOccupancyEvents(iRawEvent).iMeasuredClass = aiManualEventsClasses(iMeasuredEvent);
				%
				% DEBUG
				fprintf('The raw occupancy event %d (%s) has been associated to the manual occupancy event %d (%s)\n',	...
						iRawEvent, Time.JulianDateToString(atOccupancyEvents(iRawEvent).fJulianDate){1},				... 
						iMeasuredEvent, Time.JulianDateToString(afManualEventsJulianDates(iMeasuredEvent)){1} 			);
				%
			else%
				%
				fprintf('The raw occupancy event %d (%s) has been discarded because its class is outside the pre-defined thresholds\n',	...
						iRawEvent, Time.JulianDateToString(atOccupancyEvents(iRawEvent).fJulianDate){1} );
				%
			end;%
			%
		else%
			%
			fprintf('The measured occupancy event %d (%s) has been discarded because not associated to any raw event\n',	...
					iMeasuredEvent, Time.JulianDateToString(afManualEventsJulianDates(iMeasuredEvent)){1} );
			%
		end;%
		%
	end;% cycle on the raw events
	%
	% save only the valid events
	tSVMTrainer.atEvents = PeopleCounters.DiscardInvalidEvents( atOccupancyEvents );
	%
end % function

