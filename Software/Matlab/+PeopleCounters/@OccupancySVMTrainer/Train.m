function Train( tSVMTrainer )
	%
% 	% get the training and test set in a convenient format
% 	[	aafTrainingFeatures,		aiTrainingClasses,			...
% 		aafTestFeatures,			aiTestClasses			] =	...
% 			tSVMTrainer.GetTrainingAndTestSets( tSVMTrainer.fTrainingVsTestSetDimensionsRatio );
	%
	% bypass - get the whole dataset in the same convenient format TODO
	[	aafTrainingFeatures,		aiTrainingClasses,			...
		aafTestFeatures,			aiTestClasses			] =	...
			tSVMTrainer.GetTrainingAndTestSets(1);
	aafTestFeatures = aafTrainingFeatures;
	aiTestClasses	= aiTrainingClasses
	%
	%
	% for readability
	iNumberOfClasses = numel(tSVMTrainer.aiLabelsVsClassesLUT); TODO
	%
	% DEBUG
% 	[ aiTrainingClasses,	aafTrainingFeatures(:, 1:4) ]
% 	[ aiTestClasses,		aafTestFeatures(:, 1:4) ]
% 	tSVMTrainer.aiLabelsVsClassesLUT
% 	pause
	%
	% do the learning step, one-against-all
	for iClass = 1:iNumberOfClasses;
		%
		% for readability
		iCurrentClass = tSVMTrainer.aiLabelsVsClassesLUT(iClass);
		%
		% DEBUG
		fprintf('\nStarted training class %d\n', iCurrentClass);
		%
		% check that there is an instance for each class
		if(  sum( aiTrainingClasses == iCurrentClass )  < 2  )
			%
			error('The training set does not comprise enough elements of all the various classes');
			%
		end;%
		%
		% training
		tSVMTrainer.atSVMs{iClass} =							...
			svmtrain(											...
				double( aiTrainingClasses == iCurrentClass ),	...
				aafTrainingFeatures,							...
				tSVMTrainer.strSvmlibOptions					);
		%
	end;%
	%
	% do the estimation step
	aiEstimatedClasses =						...
		PeopleCounters.ClassifyEvents(			...
			tSVMTrainer.atEvents,				...
			tSVMTrainer.atSVMs,					...
			tSVMTrainer.aiLabelsVsClassesLUT	);
	%
	% DEBUG
% 	fprintf('measured    estimated\n');
% 	[ aiTestClasses, aiEstimatedClasses ]
% 	pause
	%
	% evaluate the fit on the test set
	tSVMTrainer.fEstimationAccuracy =				...
		sum( aiEstimatedClasses == aiTestClasses )	...
		/											...
		numel( aiTestClasses );
	%
	% for each event save the corresponding estimate
	for iEvent = 1:numel(aiEstimatedClasses)
		%
		tSVMTrainer.atEvents(iEvent).iEstimatedClass = aiEstimatedClasses(iEvent);
		%
		% plot the incorrectly classified events
		if(		tSVMTrainer.atEvents(iEvent).iEstimatedClass	...
			~=	tSVMTrainer.atEvents(iEvent).iMeasuredClass		)
			%
			tSVMTrainer.atEvents(iEvent).Plot();
			%
		end;%
		%
	end;%
	%
	% DEBUG
	tSVMTrainer.Plot();
	%
end % function




% 	% ---------------------------------------------------------------------
% 	% version for the native Matlab's SVM toolbox
% 	%
% 	% do the SVM training
% 	tSVMStruct = svmtrain(aafTrainingFeatures,aiTrainingClasses);
% 	%
% 	% do the test
% 	aiEstimatedClasses = svmclassify(tSVMStruct, aafTestFeatures);
% 	% ---------------------------------------------------------------------
